
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c1c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408c1c  00408c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00408c24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000284  204009b8  004095dc  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400c3c  00409860  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c40  0040b864  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f0b8  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000408c  00000000  00000000  0003faf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a109  00000000  00000000  00043b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f78  00000000  00000000  0004dc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001228  00000000  00000000  0004ec04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023cf3  00000000  00000000  0004fe2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010900  00000000  00000000  00073b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009f7a8  00000000  00000000  0008441f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003834  00000000  00000000  00123bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 2c 40 20 c9 0a 40 00 c7 0a 40 00 c7 0a 40 00     @,@ ..@...@...@.
  400010:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c1 0e 40 00 c7 0a 40 00 00 00 00 00 61 0f 40 00     ..@...@.....a.@.
  40003c:	c5 0f 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40004c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40005c:	c7 0a 40 00 c7 0a 40 00 00 00 00 00 8d 05 40 00     ..@...@.......@.
  40006c:	a1 05 40 00 b5 05 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40007c:	c7 0a 40 00 c9 05 40 00 dd 05 40 00 c7 0a 40 00     ..@...@...@...@.
  40008c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40009c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000ac:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000bc:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000cc:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000dc:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000ec:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  4000fc:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40010c:	c7 0a 40 00 c7 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ......@...@...@.
  40012c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40013c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40014c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00 c7 0a 40 00     ..@...@...@...@.
  40015c:	c7 0a 40 00 c7 0a 40 00 c7 0a 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00408c24 	.word	0x00408c24

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00408c24 	.word	0x00408c24
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00408c24 	.word	0x00408c24
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400c9d 	.word	0x00400c9d
  400220:	0040068d 	.word	0x0040068d
  400224:	004006e1 	.word	0x004006e1
  400228:	004006f1 	.word	0x004006f1
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400701 	.word	0x00400701
  400238:	004005f1 	.word	0x004005f1
  40023c:	00400629 	.word	0x00400629
  400240:	00400b91 	.word	0x00400b91

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400bd0 	.word	0x20400bd0
  40027c:	20400bc8 	.word	0x20400bc8

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400bcc 	.word	0x20400bcc
  4002cc:	20400bd0 	.word	0x20400bd0

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	00400711 	.word	0x00400711
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004fe:	b410      	push	{r4}
  400500:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400502:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400504:	b94c      	cbnz	r4, 40051a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400506:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400508:	b14b      	cbz	r3, 40051e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40050a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40050c:	b94a      	cbnz	r2, 400522 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40050e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400510:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400512:	6001      	str	r1, [r0, #0]
}
  400514:	f85d 4b04 	ldr.w	r4, [sp], #4
  400518:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40051a:	6641      	str	r1, [r0, #100]	; 0x64
  40051c:	e7f4      	b.n	400508 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40051e:	6541      	str	r1, [r0, #84]	; 0x54
  400520:	e7f4      	b.n	40050c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400522:	6301      	str	r1, [r0, #48]	; 0x30
  400524:	e7f4      	b.n	400510 <pio_set_output+0x12>

00400526 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400526:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400528:	420b      	tst	r3, r1
}
  40052a:	bf14      	ite	ne
  40052c:	2001      	movne	r0, #1
  40052e:	2000      	moveq	r0, #0
  400530:	4770      	bx	lr

00400532 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400532:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400534:	4770      	bx	lr

00400536 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400536:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400538:	4770      	bx	lr
	...

0040053c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400540:	4604      	mov	r4, r0
  400542:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400544:	4b0e      	ldr	r3, [pc, #56]	; (400580 <pio_handler_process+0x44>)
  400546:	4798      	blx	r3
  400548:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40054a:	4620      	mov	r0, r4
  40054c:	4b0d      	ldr	r3, [pc, #52]	; (400584 <pio_handler_process+0x48>)
  40054e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400550:	4005      	ands	r5, r0
  400552:	d013      	beq.n	40057c <pio_handler_process+0x40>
  400554:	4c0c      	ldr	r4, [pc, #48]	; (400588 <pio_handler_process+0x4c>)
  400556:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40055a:	e003      	b.n	400564 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40055c:	42b4      	cmp	r4, r6
  40055e:	d00d      	beq.n	40057c <pio_handler_process+0x40>
  400560:	3410      	adds	r4, #16
		while (status != 0) {
  400562:	b15d      	cbz	r5, 40057c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400564:	6820      	ldr	r0, [r4, #0]
  400566:	4540      	cmp	r0, r8
  400568:	d1f8      	bne.n	40055c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40056a:	6861      	ldr	r1, [r4, #4]
  40056c:	4229      	tst	r1, r5
  40056e:	d0f5      	beq.n	40055c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400570:	68e3      	ldr	r3, [r4, #12]
  400572:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400574:	6863      	ldr	r3, [r4, #4]
  400576:	ea25 0503 	bic.w	r5, r5, r3
  40057a:	e7ef      	b.n	40055c <pio_handler_process+0x20>
  40057c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400580:	00400533 	.word	0x00400533
  400584:	00400537 	.word	0x00400537
  400588:	204009d4 	.word	0x204009d4

0040058c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40058c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40058e:	210a      	movs	r1, #10
  400590:	4801      	ldr	r0, [pc, #4]	; (400598 <PIOA_Handler+0xc>)
  400592:	4b02      	ldr	r3, [pc, #8]	; (40059c <PIOA_Handler+0x10>)
  400594:	4798      	blx	r3
  400596:	bd08      	pop	{r3, pc}
  400598:	400e0e00 	.word	0x400e0e00
  40059c:	0040053d 	.word	0x0040053d

004005a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005a2:	210b      	movs	r1, #11
  4005a4:	4801      	ldr	r0, [pc, #4]	; (4005ac <PIOB_Handler+0xc>)
  4005a6:	4b02      	ldr	r3, [pc, #8]	; (4005b0 <PIOB_Handler+0x10>)
  4005a8:	4798      	blx	r3
  4005aa:	bd08      	pop	{r3, pc}
  4005ac:	400e1000 	.word	0x400e1000
  4005b0:	0040053d 	.word	0x0040053d

004005b4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005b6:	210c      	movs	r1, #12
  4005b8:	4801      	ldr	r0, [pc, #4]	; (4005c0 <PIOC_Handler+0xc>)
  4005ba:	4b02      	ldr	r3, [pc, #8]	; (4005c4 <PIOC_Handler+0x10>)
  4005bc:	4798      	blx	r3
  4005be:	bd08      	pop	{r3, pc}
  4005c0:	400e1200 	.word	0x400e1200
  4005c4:	0040053d 	.word	0x0040053d

004005c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ca:	2110      	movs	r1, #16
  4005cc:	4801      	ldr	r0, [pc, #4]	; (4005d4 <PIOD_Handler+0xc>)
  4005ce:	4b02      	ldr	r3, [pc, #8]	; (4005d8 <PIOD_Handler+0x10>)
  4005d0:	4798      	blx	r3
  4005d2:	bd08      	pop	{r3, pc}
  4005d4:	400e1400 	.word	0x400e1400
  4005d8:	0040053d 	.word	0x0040053d

004005dc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4005de:	2111      	movs	r1, #17
  4005e0:	4801      	ldr	r0, [pc, #4]	; (4005e8 <PIOE_Handler+0xc>)
  4005e2:	4b02      	ldr	r3, [pc, #8]	; (4005ec <PIOE_Handler+0x10>)
  4005e4:	4798      	blx	r3
  4005e6:	bd08      	pop	{r3, pc}
  4005e8:	400e1600 	.word	0x400e1600
  4005ec:	0040053d 	.word	0x0040053d

004005f0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4005f0:	2803      	cmp	r0, #3
  4005f2:	d011      	beq.n	400618 <pmc_mck_set_division+0x28>
  4005f4:	2804      	cmp	r0, #4
  4005f6:	d012      	beq.n	40061e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4005f8:	2802      	cmp	r0, #2
  4005fa:	bf0c      	ite	eq
  4005fc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400600:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400602:	4a08      	ldr	r2, [pc, #32]	; (400624 <pmc_mck_set_division+0x34>)
  400604:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40060a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40060c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40060e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400610:	f013 0f08 	tst.w	r3, #8
  400614:	d0fb      	beq.n	40060e <pmc_mck_set_division+0x1e>
}
  400616:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400618:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40061c:	e7f1      	b.n	400602 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40061e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400622:	e7ee      	b.n	400602 <pmc_mck_set_division+0x12>
  400624:	400e0600 	.word	0x400e0600

00400628 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400628:	4a17      	ldr	r2, [pc, #92]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  40062a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40062c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400630:	4318      	orrs	r0, r3
  400632:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f08 	tst.w	r3, #8
  40063a:	d10a      	bne.n	400652 <pmc_switch_mck_to_pllack+0x2a>
  40063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400640:	4911      	ldr	r1, [pc, #68]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  400642:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400644:	f012 0f08 	tst.w	r2, #8
  400648:	d103      	bne.n	400652 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40064a:	3b01      	subs	r3, #1
  40064c:	d1f9      	bne.n	400642 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40064e:	2001      	movs	r0, #1
  400650:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400652:	4a0d      	ldr	r2, [pc, #52]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  400654:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400656:	f023 0303 	bic.w	r3, r3, #3
  40065a:	f043 0302 	orr.w	r3, r3, #2
  40065e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400660:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400662:	f013 0f08 	tst.w	r3, #8
  400666:	d10a      	bne.n	40067e <pmc_switch_mck_to_pllack+0x56>
  400668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40066c:	4906      	ldr	r1, [pc, #24]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  40066e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400670:	f012 0f08 	tst.w	r2, #8
  400674:	d105      	bne.n	400682 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400676:	3b01      	subs	r3, #1
  400678:	d1f9      	bne.n	40066e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40067a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40067c:	4770      	bx	lr
	return 0;
  40067e:	2000      	movs	r0, #0
  400680:	4770      	bx	lr
  400682:	2000      	movs	r0, #0
  400684:	4770      	bx	lr
  400686:	bf00      	nop
  400688:	400e0600 	.word	0x400e0600

0040068c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40068c:	b9a0      	cbnz	r0, 4006b8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40068e:	480e      	ldr	r0, [pc, #56]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  400690:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400692:	0209      	lsls	r1, r1, #8
  400694:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400696:	4a0d      	ldr	r2, [pc, #52]	; (4006cc <pmc_switch_mainck_to_xtal+0x40>)
  400698:	401a      	ands	r2, r3
  40069a:	4b0d      	ldr	r3, [pc, #52]	; (4006d0 <pmc_switch_mainck_to_xtal+0x44>)
  40069c:	4313      	orrs	r3, r2
  40069e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006a0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006a2:	4602      	mov	r2, r0
  4006a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006a6:	f013 0f01 	tst.w	r3, #1
  4006aa:	d0fb      	beq.n	4006a4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4006ac:	4a06      	ldr	r2, [pc, #24]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4006ae:	6a11      	ldr	r1, [r2, #32]
  4006b0:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <pmc_switch_mainck_to_xtal+0x48>)
  4006b2:	430b      	orrs	r3, r1
  4006b4:	6213      	str	r3, [r2, #32]
  4006b6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006b8:	4903      	ldr	r1, [pc, #12]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4006ba:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4006bc:	4a06      	ldr	r2, [pc, #24]	; (4006d8 <pmc_switch_mainck_to_xtal+0x4c>)
  4006be:	401a      	ands	r2, r3
  4006c0:	4b06      	ldr	r3, [pc, #24]	; (4006dc <pmc_switch_mainck_to_xtal+0x50>)
  4006c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006c4:	620b      	str	r3, [r1, #32]
  4006c6:	4770      	bx	lr
  4006c8:	400e0600 	.word	0x400e0600
  4006cc:	ffc8fffc 	.word	0xffc8fffc
  4006d0:	00370001 	.word	0x00370001
  4006d4:	01370000 	.word	0x01370000
  4006d8:	fec8fffc 	.word	0xfec8fffc
  4006dc:	01370002 	.word	0x01370002

004006e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <pmc_osc_is_ready_mainck+0xc>)
  4006e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop
  4006ec:	400e0600 	.word	0x400e0600

004006f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4006f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006f4:	4b01      	ldr	r3, [pc, #4]	; (4006fc <pmc_disable_pllack+0xc>)
  4006f6:	629a      	str	r2, [r3, #40]	; 0x28
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop
  4006fc:	400e0600 	.word	0x400e0600

00400700 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <pmc_is_locked_pllack+0xc>)
  400702:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400704:	f000 0002 	and.w	r0, r0, #2
  400708:	4770      	bx	lr
  40070a:	bf00      	nop
  40070c:	400e0600 	.word	0x400e0600

00400710 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400710:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400714:	4b05      	ldr	r3, [pc, #20]	; (40072c <pmc_enable_periph_clk+0x1c>)
  400716:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40071a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40071e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400722:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400726:	2000      	movs	r0, #0
  400728:	4770      	bx	lr
  40072a:	bf00      	nop
  40072c:	400e0600 	.word	0x400e0600

00400730 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400730:	4b28      	ldr	r3, [pc, #160]	; (4007d4 <twihs_set_speed+0xa4>)
  400732:	4299      	cmp	r1, r3
  400734:	d84b      	bhi.n	4007ce <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400736:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40073a:	4299      	cmp	r1, r3
  40073c:	d92d      	bls.n	40079a <twihs_set_speed+0x6a>
{
  40073e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400740:	4c25      	ldr	r4, [pc, #148]	; (4007d8 <twihs_set_speed+0xa8>)
  400742:	fba4 3402 	umull	r3, r4, r4, r2
  400746:	0ba4      	lsrs	r4, r4, #14
  400748:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40074a:	4b24      	ldr	r3, [pc, #144]	; (4007dc <twihs_set_speed+0xac>)
  40074c:	440b      	add	r3, r1
  40074e:	009b      	lsls	r3, r3, #2
  400750:	fbb2 f2f3 	udiv	r2, r2, r3
  400754:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400756:	2cff      	cmp	r4, #255	; 0xff
  400758:	d91d      	bls.n	400796 <twihs_set_speed+0x66>
  40075a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  40075c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  40075e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400760:	2cff      	cmp	r4, #255	; 0xff
  400762:	d901      	bls.n	400768 <twihs_set_speed+0x38>
  400764:	2906      	cmp	r1, #6
  400766:	d9f9      	bls.n	40075c <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400768:	2aff      	cmp	r2, #255	; 0xff
  40076a:	d907      	bls.n	40077c <twihs_set_speed+0x4c>
  40076c:	2906      	cmp	r1, #6
  40076e:	d805      	bhi.n	40077c <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400770:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400772:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400774:	2aff      	cmp	r2, #255	; 0xff
  400776:	d901      	bls.n	40077c <twihs_set_speed+0x4c>
  400778:	2906      	cmp	r1, #6
  40077a:	d9f9      	bls.n	400770 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40077c:	0213      	lsls	r3, r2, #8
  40077e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400780:	0409      	lsls	r1, r1, #16
  400782:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400786:	430b      	orrs	r3, r1
  400788:	b2e4      	uxtb	r4, r4
  40078a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  40078c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40078e:	2000      	movs	r0, #0
}
  400790:	f85d 4b04 	ldr.w	r4, [sp], #4
  400794:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400796:	2100      	movs	r1, #0
  400798:	e7e6      	b.n	400768 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40079a:	0049      	lsls	r1, r1, #1
  40079c:	fbb2 f2f1 	udiv	r2, r2, r1
  4007a0:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4007a2:	2aff      	cmp	r2, #255	; 0xff
  4007a4:	d911      	bls.n	4007ca <twihs_set_speed+0x9a>
  4007a6:	2300      	movs	r3, #0
			ckdiv++;
  4007a8:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4007aa:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4007ac:	2aff      	cmp	r2, #255	; 0xff
  4007ae:	d901      	bls.n	4007b4 <twihs_set_speed+0x84>
  4007b0:	2b06      	cmp	r3, #6
  4007b2:	d9f9      	bls.n	4007a8 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4007b4:	0211      	lsls	r1, r2, #8
  4007b6:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4007b8:	041b      	lsls	r3, r3, #16
  4007ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4007be:	430b      	orrs	r3, r1
  4007c0:	b2d2      	uxtb	r2, r2
  4007c2:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  4007c4:	6102      	str	r2, [r0, #16]
	return PASS;
  4007c6:	2000      	movs	r0, #0
  4007c8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4007ca:	2300      	movs	r3, #0
  4007cc:	e7f2      	b.n	4007b4 <twihs_set_speed+0x84>
		return FAIL;
  4007ce:	2001      	movs	r0, #1
  4007d0:	4770      	bx	lr
  4007d2:	bf00      	nop
  4007d4:	00061a80 	.word	0x00061a80
  4007d8:	057619f1 	.word	0x057619f1
  4007dc:	3ffd1200 	.word	0x3ffd1200

004007e0 <twihs_master_init>:
{
  4007e0:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4007e2:	f04f 32ff 	mov.w	r2, #4294967295
  4007e6:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4007e8:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4007ea:	2280      	movs	r2, #128	; 0x80
  4007ec:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4007ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4007f0:	2208      	movs	r2, #8
  4007f2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4007f4:	2220      	movs	r2, #32
  4007f6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4007f8:	2204      	movs	r2, #4
  4007fa:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4007fc:	680a      	ldr	r2, [r1, #0]
  4007fe:	6849      	ldr	r1, [r1, #4]
  400800:	4b03      	ldr	r3, [pc, #12]	; (400810 <twihs_master_init+0x30>)
  400802:	4798      	blx	r3
}
  400804:	2801      	cmp	r0, #1
  400806:	bf14      	ite	ne
  400808:	2000      	movne	r0, #0
  40080a:	2001      	moveq	r0, #1
  40080c:	bd08      	pop	{r3, pc}
  40080e:	bf00      	nop
  400810:	00400731 	.word	0x00400731

00400814 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400814:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400816:	2b00      	cmp	r3, #0
  400818:	d04b      	beq.n	4008b2 <twihs_master_read+0x9e>
{
  40081a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40081c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40081e:	2600      	movs	r6, #0
  400820:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400822:	684a      	ldr	r2, [r1, #4]
  400824:	0212      	lsls	r2, r2, #8
  400826:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40082a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  40082e:	7c0d      	ldrb	r5, [r1, #16]
  400830:	042d      	lsls	r5, r5, #16
  400832:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400836:	432a      	orrs	r2, r5
  400838:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40083a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40083c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40083e:	b15d      	cbz	r5, 400858 <twihs_master_read+0x44>
	val = addr[0];
  400840:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400842:	2d01      	cmp	r5, #1
  400844:	dd02      	ble.n	40084c <twihs_master_read+0x38>
		val |= addr[1];
  400846:	784e      	ldrb	r6, [r1, #1]
  400848:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  40084c:	2d02      	cmp	r5, #2
  40084e:	dd04      	ble.n	40085a <twihs_master_read+0x46>
		val |= addr[2];
  400850:	7889      	ldrb	r1, [r1, #2]
  400852:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400856:	e000      	b.n	40085a <twihs_master_read+0x46>
		return 0;
  400858:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40085a:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40085c:	2201      	movs	r2, #1
  40085e:	6002      	str	r2, [r0, #0]
  400860:	e006      	b.n	400870 <twihs_master_read+0x5c>
		if (cnt == 1) {
  400862:	2b01      	cmp	r3, #1
  400864:	d019      	beq.n	40089a <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  400866:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400868:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  40086c:	3b01      	subs	r3, #1
  40086e:	d018      	beq.n	4008a2 <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  400870:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400872:	f412 7f80 	tst.w	r2, #256	; 0x100
  400876:	d122      	bne.n	4008be <twihs_master_read+0xaa>
		if (!(status & TWIHS_SR_RXRDY)) {
  400878:	f012 0f02 	tst.w	r2, #2
  40087c:	d1f1      	bne.n	400862 <twihs_master_read+0x4e>
  40087e:	f247 5230 	movw	r2, #30000	; 0x7530
		status = p_twihs->TWIHS_SR;
  400882:	6a01      	ldr	r1, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400884:	f411 7f80 	tst.w	r1, #256	; 0x100
  400888:	d115      	bne.n	4008b6 <twihs_master_read+0xa2>
		if (!timeout--) {
  40088a:	3a01      	subs	r2, #1
  40088c:	d015      	beq.n	4008ba <twihs_master_read+0xa6>
		if (!(status & TWIHS_SR_RXRDY)) {
  40088e:	f011 0f02 	tst.w	r1, #2
  400892:	d1e6      	bne.n	400862 <twihs_master_read+0x4e>
	while (cnt > 0) {
  400894:	2b00      	cmp	r3, #0
  400896:	d1f4      	bne.n	400882 <twihs_master_read+0x6e>
  400898:	e003      	b.n	4008a2 <twihs_master_read+0x8e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40089a:	2302      	movs	r3, #2
  40089c:	6003      	str	r3, [r0, #0]
		*buffer++ = p_twihs->TWIHS_RHR;
  40089e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008a0:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4008a2:	6a03      	ldr	r3, [r0, #32]
  4008a4:	f013 0f01 	tst.w	r3, #1
  4008a8:	d0fb      	beq.n	4008a2 <twihs_master_read+0x8e>
	p_twihs->TWIHS_SR;
  4008aa:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4008ac:	2000      	movs	r0, #0
}
  4008ae:	bc70      	pop	{r4, r5, r6}
  4008b0:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  4008b2:	2001      	movs	r0, #1
  4008b4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4008b6:	2005      	movs	r0, #5
  4008b8:	e7f9      	b.n	4008ae <twihs_master_read+0x9a>
			return TWIHS_ERROR_TIMEOUT;
  4008ba:	2009      	movs	r0, #9
  4008bc:	e7f7      	b.n	4008ae <twihs_master_read+0x9a>
			return TWIHS_RECEIVE_NACK;
  4008be:	2005      	movs	r0, #5
  4008c0:	e7f5      	b.n	4008ae <twihs_master_read+0x9a>

004008c2 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  4008c2:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4008c4:	2b00      	cmp	r3, #0
  4008c6:	d043      	beq.n	400950 <twihs_master_write+0x8e>
{
  4008c8:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4008ca:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4008cc:	2600      	movs	r6, #0
  4008ce:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4008d0:	7c0a      	ldrb	r2, [r1, #16]
  4008d2:	0412      	lsls	r2, r2, #16
  4008d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4008d8:	684d      	ldr	r5, [r1, #4]
  4008da:	022d      	lsls	r5, r5, #8
  4008dc:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4008e0:	432a      	orrs	r2, r5
  4008e2:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4008e4:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4008e6:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4008e8:	b15d      	cbz	r5, 400902 <twihs_master_write+0x40>
	val = addr[0];
  4008ea:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4008ec:	2d01      	cmp	r5, #1
  4008ee:	dd02      	ble.n	4008f6 <twihs_master_write+0x34>
		val |= addr[1];
  4008f0:	784e      	ldrb	r6, [r1, #1]
  4008f2:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4008f6:	2d02      	cmp	r5, #2
  4008f8:	dd04      	ble.n	400904 <twihs_master_write+0x42>
		val |= addr[2];
  4008fa:	7889      	ldrb	r1, [r1, #2]
  4008fc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400900:	e000      	b.n	400904 <twihs_master_write+0x42>
		return 0;
  400902:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400904:	60c2      	str	r2, [r0, #12]
  400906:	e004      	b.n	400912 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400908:	f814 2b01 	ldrb.w	r2, [r4], #1
  40090c:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  40090e:	3b01      	subs	r3, #1
  400910:	d00f      	beq.n	400932 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  400912:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400914:	f412 7f80 	tst.w	r2, #256	; 0x100
  400918:	d11e      	bne.n	400958 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40091a:	f012 0f04 	tst.w	r2, #4
  40091e:	d1f3      	bne.n	400908 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  400920:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400922:	f412 7f80 	tst.w	r2, #256	; 0x100
  400926:	d115      	bne.n	400954 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  400928:	f012 0f04 	tst.w	r2, #4
  40092c:	d1ec      	bne.n	400908 <twihs_master_write+0x46>
	while (cnt > 0) {
  40092e:	2b00      	cmp	r3, #0
  400930:	d1f6      	bne.n	400920 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  400932:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400934:	f413 7f80 	tst.w	r3, #256	; 0x100
  400938:	d111      	bne.n	40095e <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40093a:	f013 0f04 	tst.w	r3, #4
  40093e:	d0f8      	beq.n	400932 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400940:	2302      	movs	r3, #2
  400942:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400944:	6a03      	ldr	r3, [r0, #32]
  400946:	f013 0f01 	tst.w	r3, #1
  40094a:	d0fb      	beq.n	400944 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40094c:	2000      	movs	r0, #0
  40094e:	e004      	b.n	40095a <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400950:	2001      	movs	r0, #1
  400952:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400954:	2005      	movs	r0, #5
  400956:	e000      	b.n	40095a <twihs_master_write+0x98>
  400958:	2005      	movs	r0, #5
}
  40095a:	bc70      	pop	{r4, r5, r6}
  40095c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40095e:	2005      	movs	r0, #5
  400960:	e7fb      	b.n	40095a <twihs_master_write+0x98>
	...

00400964 <twihs_probe>:
{
  400964:	b500      	push	{lr}
  400966:	b087      	sub	sp, #28
	uint8_t data = 0;
  400968:	2300      	movs	r3, #0
  40096a:	aa06      	add	r2, sp, #24
  40096c:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  400970:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  400972:	2201      	movs	r2, #1
  400974:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  400976:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  40097a:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  40097e:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  400980:	a901      	add	r1, sp, #4
  400982:	4b02      	ldr	r3, [pc, #8]	; (40098c <twihs_probe+0x28>)
  400984:	4798      	blx	r3
}
  400986:	b007      	add	sp, #28
  400988:	f85d fb04 	ldr.w	pc, [sp], #4
  40098c:	004008c3 	.word	0x004008c3

00400990 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400990:	6943      	ldr	r3, [r0, #20]
  400992:	f013 0f02 	tst.w	r3, #2
  400996:	d002      	beq.n	40099e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400998:	61c1      	str	r1, [r0, #28]
	return 0;
  40099a:	2000      	movs	r0, #0
  40099c:	4770      	bx	lr
		return 1;
  40099e:	2001      	movs	r0, #1
}
  4009a0:	4770      	bx	lr

004009a2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4009a2:	6943      	ldr	r3, [r0, #20]
  4009a4:	f013 0f01 	tst.w	r3, #1
  4009a8:	d003      	beq.n	4009b2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4009aa:	6983      	ldr	r3, [r0, #24]
  4009ac:	700b      	strb	r3, [r1, #0]
	return 0;
  4009ae:	2000      	movs	r0, #0
  4009b0:	4770      	bx	lr
		return 1;
  4009b2:	2001      	movs	r0, #1
}
  4009b4:	4770      	bx	lr

004009b6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4009b6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009b8:	010b      	lsls	r3, r1, #4
  4009ba:	4293      	cmp	r3, r2
  4009bc:	d914      	bls.n	4009e8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009be:	00c9      	lsls	r1, r1, #3
  4009c0:	084b      	lsrs	r3, r1, #1
  4009c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4009c6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4009ca:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009cc:	1e5c      	subs	r4, r3, #1
  4009ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009d2:	428c      	cmp	r4, r1
  4009d4:	d901      	bls.n	4009da <usart_set_async_baudrate+0x24>
		return 1;
  4009d6:	2001      	movs	r0, #1
  4009d8:	e017      	b.n	400a0a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4009da:	6841      	ldr	r1, [r0, #4]
  4009dc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4009e0:	6041      	str	r1, [r0, #4]
  4009e2:	e00c      	b.n	4009fe <usart_set_async_baudrate+0x48>
		return 1;
  4009e4:	2001      	movs	r0, #1
  4009e6:	e010      	b.n	400a0a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009e8:	0859      	lsrs	r1, r3, #1
  4009ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4009ee:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4009f2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009f4:	1e5c      	subs	r4, r3, #1
  4009f6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009fa:	428c      	cmp	r4, r1
  4009fc:	d8f2      	bhi.n	4009e4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4009fe:	0412      	lsls	r2, r2, #16
  400a00:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400a04:	431a      	orrs	r2, r3
  400a06:	6202      	str	r2, [r0, #32]

	return 0;
  400a08:	2000      	movs	r0, #0
}
  400a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a0e:	4770      	bx	lr

00400a10 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400a10:	4b08      	ldr	r3, [pc, #32]	; (400a34 <usart_reset+0x24>)
  400a12:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400a16:	2300      	movs	r3, #0
  400a18:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400a1a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a1c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400a1e:	2388      	movs	r3, #136	; 0x88
  400a20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400a22:	2324      	movs	r3, #36	; 0x24
  400a24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400a26:	f44f 7380 	mov.w	r3, #256	; 0x100
  400a2a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400a30:	6003      	str	r3, [r0, #0]
  400a32:	4770      	bx	lr
  400a34:	55534100 	.word	0x55534100

00400a38 <usart_init_rs232>:
{
  400a38:	b570      	push	{r4, r5, r6, lr}
  400a3a:	4605      	mov	r5, r0
  400a3c:	460c      	mov	r4, r1
  400a3e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400a40:	4b0f      	ldr	r3, [pc, #60]	; (400a80 <usart_init_rs232+0x48>)
  400a42:	4798      	blx	r3
	ul_reg_val = 0;
  400a44:	2200      	movs	r2, #0
  400a46:	4b0f      	ldr	r3, [pc, #60]	; (400a84 <usart_init_rs232+0x4c>)
  400a48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a4a:	b1a4      	cbz	r4, 400a76 <usart_init_rs232+0x3e>
  400a4c:	4632      	mov	r2, r6
  400a4e:	6821      	ldr	r1, [r4, #0]
  400a50:	4628      	mov	r0, r5
  400a52:	4b0d      	ldr	r3, [pc, #52]	; (400a88 <usart_init_rs232+0x50>)
  400a54:	4798      	blx	r3
  400a56:	4602      	mov	r2, r0
  400a58:	b978      	cbnz	r0, 400a7a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a5a:	6863      	ldr	r3, [r4, #4]
  400a5c:	68a1      	ldr	r1, [r4, #8]
  400a5e:	430b      	orrs	r3, r1
  400a60:	6921      	ldr	r1, [r4, #16]
  400a62:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a64:	68e1      	ldr	r1, [r4, #12]
  400a66:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a68:	4906      	ldr	r1, [pc, #24]	; (400a84 <usart_init_rs232+0x4c>)
  400a6a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400a6c:	6869      	ldr	r1, [r5, #4]
  400a6e:	430b      	orrs	r3, r1
  400a70:	606b      	str	r3, [r5, #4]
}
  400a72:	4610      	mov	r0, r2
  400a74:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400a76:	2201      	movs	r2, #1
  400a78:	e7fb      	b.n	400a72 <usart_init_rs232+0x3a>
  400a7a:	2201      	movs	r2, #1
  400a7c:	e7f9      	b.n	400a72 <usart_init_rs232+0x3a>
  400a7e:	bf00      	nop
  400a80:	00400a11 	.word	0x00400a11
  400a84:	20400a44 	.word	0x20400a44
  400a88:	004009b7 	.word	0x004009b7

00400a8c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400a8c:	2340      	movs	r3, #64	; 0x40
  400a8e:	6003      	str	r3, [r0, #0]
  400a90:	4770      	bx	lr

00400a92 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400a92:	2310      	movs	r3, #16
  400a94:	6003      	str	r3, [r0, #0]
  400a96:	4770      	bx	lr

00400a98 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a98:	6943      	ldr	r3, [r0, #20]
  400a9a:	f013 0f02 	tst.w	r3, #2
  400a9e:	d004      	beq.n	400aaa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400aa0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400aa4:	61c1      	str	r1, [r0, #28]
	return 0;
  400aa6:	2000      	movs	r0, #0
  400aa8:	4770      	bx	lr
		return 1;
  400aaa:	2001      	movs	r0, #1
}
  400aac:	4770      	bx	lr

00400aae <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400aae:	6943      	ldr	r3, [r0, #20]
  400ab0:	f013 0f01 	tst.w	r3, #1
  400ab4:	d005      	beq.n	400ac2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400ab6:	6983      	ldr	r3, [r0, #24]
  400ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400abc:	600b      	str	r3, [r1, #0]
	return 0;
  400abe:	2000      	movs	r0, #0
  400ac0:	4770      	bx	lr
		return 1;
  400ac2:	2001      	movs	r0, #1
}
  400ac4:	4770      	bx	lr

00400ac6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ac6:	e7fe      	b.n	400ac6 <Dummy_Handler>

00400ac8 <Reset_Handler>:
{
  400ac8:	b500      	push	{lr}
  400aca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400acc:	4b25      	ldr	r3, [pc, #148]	; (400b64 <Reset_Handler+0x9c>)
  400ace:	4a26      	ldr	r2, [pc, #152]	; (400b68 <Reset_Handler+0xa0>)
  400ad0:	429a      	cmp	r2, r3
  400ad2:	d010      	beq.n	400af6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ad4:	4b25      	ldr	r3, [pc, #148]	; (400b6c <Reset_Handler+0xa4>)
  400ad6:	4a23      	ldr	r2, [pc, #140]	; (400b64 <Reset_Handler+0x9c>)
  400ad8:	429a      	cmp	r2, r3
  400ada:	d20c      	bcs.n	400af6 <Reset_Handler+0x2e>
  400adc:	3b01      	subs	r3, #1
  400ade:	1a9b      	subs	r3, r3, r2
  400ae0:	f023 0303 	bic.w	r3, r3, #3
  400ae4:	3304      	adds	r3, #4
  400ae6:	4413      	add	r3, r2
  400ae8:	491f      	ldr	r1, [pc, #124]	; (400b68 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400aea:	f851 0b04 	ldr.w	r0, [r1], #4
  400aee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400af2:	429a      	cmp	r2, r3
  400af4:	d1f9      	bne.n	400aea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400af6:	4b1e      	ldr	r3, [pc, #120]	; (400b70 <Reset_Handler+0xa8>)
  400af8:	4a1e      	ldr	r2, [pc, #120]	; (400b74 <Reset_Handler+0xac>)
  400afa:	429a      	cmp	r2, r3
  400afc:	d20a      	bcs.n	400b14 <Reset_Handler+0x4c>
  400afe:	3b01      	subs	r3, #1
  400b00:	1a9b      	subs	r3, r3, r2
  400b02:	f023 0303 	bic.w	r3, r3, #3
  400b06:	3304      	adds	r3, #4
  400b08:	4413      	add	r3, r2
                *pDest++ = 0;
  400b0a:	2100      	movs	r1, #0
  400b0c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400b10:	4293      	cmp	r3, r2
  400b12:	d1fb      	bne.n	400b0c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b14:	4a18      	ldr	r2, [pc, #96]	; (400b78 <Reset_Handler+0xb0>)
  400b16:	4b19      	ldr	r3, [pc, #100]	; (400b7c <Reset_Handler+0xb4>)
  400b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b1c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b1e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b22:	fab3 f383 	clz	r3, r3
  400b26:	095b      	lsrs	r3, r3, #5
  400b28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400b2a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400b2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b30:	2200      	movs	r2, #0
  400b32:	4b13      	ldr	r3, [pc, #76]	; (400b80 <Reset_Handler+0xb8>)
  400b34:	701a      	strb	r2, [r3, #0]
	return flags;
  400b36:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b38:	4a12      	ldr	r2, [pc, #72]	; (400b84 <Reset_Handler+0xbc>)
  400b3a:	6813      	ldr	r3, [r2, #0]
  400b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b46:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b4a:	b129      	cbz	r1, 400b58 <Reset_Handler+0x90>
		cpu_irq_enable();
  400b4c:	2201      	movs	r2, #1
  400b4e:	4b0c      	ldr	r3, [pc, #48]	; (400b80 <Reset_Handler+0xb8>)
  400b50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400b52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b56:	b662      	cpsie	i
        __libc_init_array();
  400b58:	4b0b      	ldr	r3, [pc, #44]	; (400b88 <Reset_Handler+0xc0>)
  400b5a:	4798      	blx	r3
        main();
  400b5c:	4b0b      	ldr	r3, [pc, #44]	; (400b8c <Reset_Handler+0xc4>)
  400b5e:	4798      	blx	r3
  400b60:	e7fe      	b.n	400b60 <Reset_Handler+0x98>
  400b62:	bf00      	nop
  400b64:	20400000 	.word	0x20400000
  400b68:	00408c24 	.word	0x00408c24
  400b6c:	204009b8 	.word	0x204009b8
  400b70:	20400c3c 	.word	0x20400c3c
  400b74:	204009b8 	.word	0x204009b8
  400b78:	e000ed00 	.word	0xe000ed00
  400b7c:	00400000 	.word	0x00400000
  400b80:	20400000 	.word	0x20400000
  400b84:	e000ed88 	.word	0xe000ed88
  400b88:	004032d9 	.word	0x004032d9
  400b8c:	00402e29 	.word	0x00402e29

00400b90 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b90:	4b3b      	ldr	r3, [pc, #236]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b94:	f003 0303 	and.w	r3, r3, #3
  400b98:	2b01      	cmp	r3, #1
  400b9a:	d01d      	beq.n	400bd8 <SystemCoreClockUpdate+0x48>
  400b9c:	b183      	cbz	r3, 400bc0 <SystemCoreClockUpdate+0x30>
  400b9e:	2b02      	cmp	r3, #2
  400ba0:	d036      	beq.n	400c10 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400ba2:	4b37      	ldr	r3, [pc, #220]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400baa:	2b70      	cmp	r3, #112	; 0x70
  400bac:	d05f      	beq.n	400c6e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400bae:	4b34      	ldr	r3, [pc, #208]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400bb2:	4934      	ldr	r1, [pc, #208]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400bb4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400bb8:	680b      	ldr	r3, [r1, #0]
  400bba:	40d3      	lsrs	r3, r2
  400bbc:	600b      	str	r3, [r1, #0]
  400bbe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400bc0:	4b31      	ldr	r3, [pc, #196]	; (400c88 <SystemCoreClockUpdate+0xf8>)
  400bc2:	695b      	ldr	r3, [r3, #20]
  400bc4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400bc8:	bf14      	ite	ne
  400bca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400bce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400bd2:	4b2c      	ldr	r3, [pc, #176]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400bd4:	601a      	str	r2, [r3, #0]
  400bd6:	e7e4      	b.n	400ba2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400bd8:	4b29      	ldr	r3, [pc, #164]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400bda:	6a1b      	ldr	r3, [r3, #32]
  400bdc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400be0:	d003      	beq.n	400bea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400be2:	4a2a      	ldr	r2, [pc, #168]	; (400c8c <SystemCoreClockUpdate+0xfc>)
  400be4:	4b27      	ldr	r3, [pc, #156]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400be6:	601a      	str	r2, [r3, #0]
  400be8:	e7db      	b.n	400ba2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bea:	4a29      	ldr	r2, [pc, #164]	; (400c90 <SystemCoreClockUpdate+0x100>)
  400bec:	4b25      	ldr	r3, [pc, #148]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400bee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400bf0:	4b23      	ldr	r3, [pc, #140]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400bf2:	6a1b      	ldr	r3, [r3, #32]
  400bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bf8:	2b10      	cmp	r3, #16
  400bfa:	d005      	beq.n	400c08 <SystemCoreClockUpdate+0x78>
  400bfc:	2b20      	cmp	r3, #32
  400bfe:	d1d0      	bne.n	400ba2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400c00:	4a22      	ldr	r2, [pc, #136]	; (400c8c <SystemCoreClockUpdate+0xfc>)
  400c02:	4b20      	ldr	r3, [pc, #128]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c04:	601a      	str	r2, [r3, #0]
          break;
  400c06:	e7cc      	b.n	400ba2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400c08:	4a22      	ldr	r2, [pc, #136]	; (400c94 <SystemCoreClockUpdate+0x104>)
  400c0a:	4b1e      	ldr	r3, [pc, #120]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c0c:	601a      	str	r2, [r3, #0]
          break;
  400c0e:	e7c8      	b.n	400ba2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c10:	4b1b      	ldr	r3, [pc, #108]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400c12:	6a1b      	ldr	r3, [r3, #32]
  400c14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c18:	d016      	beq.n	400c48 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400c1a:	4a1c      	ldr	r2, [pc, #112]	; (400c8c <SystemCoreClockUpdate+0xfc>)
  400c1c:	4b19      	ldr	r3, [pc, #100]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c1e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400c20:	4b17      	ldr	r3, [pc, #92]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c24:	f003 0303 	and.w	r3, r3, #3
  400c28:	2b02      	cmp	r3, #2
  400c2a:	d1ba      	bne.n	400ba2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c2c:	4a14      	ldr	r2, [pc, #80]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400c2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400c30:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400c32:	4814      	ldr	r0, [pc, #80]	; (400c84 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c34:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400c38:	6803      	ldr	r3, [r0, #0]
  400c3a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400c3e:	b2d2      	uxtb	r2, r2
  400c40:	fbb3 f3f2 	udiv	r3, r3, r2
  400c44:	6003      	str	r3, [r0, #0]
  400c46:	e7ac      	b.n	400ba2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c48:	4a11      	ldr	r2, [pc, #68]	; (400c90 <SystemCoreClockUpdate+0x100>)
  400c4a:	4b0e      	ldr	r3, [pc, #56]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c4c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c4e:	4b0c      	ldr	r3, [pc, #48]	; (400c80 <SystemCoreClockUpdate+0xf0>)
  400c50:	6a1b      	ldr	r3, [r3, #32]
  400c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c56:	2b10      	cmp	r3, #16
  400c58:	d005      	beq.n	400c66 <SystemCoreClockUpdate+0xd6>
  400c5a:	2b20      	cmp	r3, #32
  400c5c:	d1e0      	bne.n	400c20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400c5e:	4a0b      	ldr	r2, [pc, #44]	; (400c8c <SystemCoreClockUpdate+0xfc>)
  400c60:	4b08      	ldr	r3, [pc, #32]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c62:	601a      	str	r2, [r3, #0]
          break;
  400c64:	e7dc      	b.n	400c20 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400c66:	4a0b      	ldr	r2, [pc, #44]	; (400c94 <SystemCoreClockUpdate+0x104>)
  400c68:	4b06      	ldr	r3, [pc, #24]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c6a:	601a      	str	r2, [r3, #0]
          break;
  400c6c:	e7d8      	b.n	400c20 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400c6e:	4a05      	ldr	r2, [pc, #20]	; (400c84 <SystemCoreClockUpdate+0xf4>)
  400c70:	6813      	ldr	r3, [r2, #0]
  400c72:	4909      	ldr	r1, [pc, #36]	; (400c98 <SystemCoreClockUpdate+0x108>)
  400c74:	fba1 1303 	umull	r1, r3, r1, r3
  400c78:	085b      	lsrs	r3, r3, #1
  400c7a:	6013      	str	r3, [r2, #0]
  400c7c:	4770      	bx	lr
  400c7e:	bf00      	nop
  400c80:	400e0600 	.word	0x400e0600
  400c84:	20400004 	.word	0x20400004
  400c88:	400e1810 	.word	0x400e1810
  400c8c:	00b71b00 	.word	0x00b71b00
  400c90:	003d0900 	.word	0x003d0900
  400c94:	007a1200 	.word	0x007a1200
  400c98:	aaaaaaab 	.word	0xaaaaaaab

00400c9c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c9c:	4b16      	ldr	r3, [pc, #88]	; (400cf8 <system_init_flash+0x5c>)
  400c9e:	4298      	cmp	r0, r3
  400ca0:	d913      	bls.n	400cca <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400ca2:	4b16      	ldr	r3, [pc, #88]	; (400cfc <system_init_flash+0x60>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d915      	bls.n	400cd4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400ca8:	4b15      	ldr	r3, [pc, #84]	; (400d00 <system_init_flash+0x64>)
  400caa:	4298      	cmp	r0, r3
  400cac:	d916      	bls.n	400cdc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400cae:	4b15      	ldr	r3, [pc, #84]	; (400d04 <system_init_flash+0x68>)
  400cb0:	4298      	cmp	r0, r3
  400cb2:	d917      	bls.n	400ce4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400cb4:	4b14      	ldr	r3, [pc, #80]	; (400d08 <system_init_flash+0x6c>)
  400cb6:	4298      	cmp	r0, r3
  400cb8:	d918      	bls.n	400cec <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400cba:	4b14      	ldr	r3, [pc, #80]	; (400d0c <system_init_flash+0x70>)
  400cbc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cbe:	bf94      	ite	ls
  400cc0:	4a13      	ldrls	r2, [pc, #76]	; (400d10 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400cc2:	4a14      	ldrhi	r2, [pc, #80]	; (400d14 <system_init_flash+0x78>)
  400cc4:	4b14      	ldr	r3, [pc, #80]	; (400d18 <system_init_flash+0x7c>)
  400cc6:	601a      	str	r2, [r3, #0]
  400cc8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400cca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400cce:	4b12      	ldr	r3, [pc, #72]	; (400d18 <system_init_flash+0x7c>)
  400cd0:	601a      	str	r2, [r3, #0]
  400cd2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400cd4:	4a11      	ldr	r2, [pc, #68]	; (400d1c <system_init_flash+0x80>)
  400cd6:	4b10      	ldr	r3, [pc, #64]	; (400d18 <system_init_flash+0x7c>)
  400cd8:	601a      	str	r2, [r3, #0]
  400cda:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cdc:	4a10      	ldr	r2, [pc, #64]	; (400d20 <system_init_flash+0x84>)
  400cde:	4b0e      	ldr	r3, [pc, #56]	; (400d18 <system_init_flash+0x7c>)
  400ce0:	601a      	str	r2, [r3, #0]
  400ce2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ce4:	4a0f      	ldr	r2, [pc, #60]	; (400d24 <system_init_flash+0x88>)
  400ce6:	4b0c      	ldr	r3, [pc, #48]	; (400d18 <system_init_flash+0x7c>)
  400ce8:	601a      	str	r2, [r3, #0]
  400cea:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cf0:	4b09      	ldr	r3, [pc, #36]	; (400d18 <system_init_flash+0x7c>)
  400cf2:	601a      	str	r2, [r3, #0]
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop
  400cf8:	015ef3bf 	.word	0x015ef3bf
  400cfc:	02bde77f 	.word	0x02bde77f
  400d00:	041cdb3f 	.word	0x041cdb3f
  400d04:	057bceff 	.word	0x057bceff
  400d08:	06dac2bf 	.word	0x06dac2bf
  400d0c:	0839b67f 	.word	0x0839b67f
  400d10:	04000500 	.word	0x04000500
  400d14:	04000600 	.word	0x04000600
  400d18:	400e0c00 	.word	0x400e0c00
  400d1c:	04000100 	.word	0x04000100
  400d20:	04000200 	.word	0x04000200
  400d24:	04000300 	.word	0x04000300

00400d28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d28:	4b0a      	ldr	r3, [pc, #40]	; (400d54 <_sbrk+0x2c>)
  400d2a:	681b      	ldr	r3, [r3, #0]
  400d2c:	b153      	cbz	r3, 400d44 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d2e:	4b09      	ldr	r3, [pc, #36]	; (400d54 <_sbrk+0x2c>)
  400d30:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d32:	181a      	adds	r2, r3, r0
  400d34:	4908      	ldr	r1, [pc, #32]	; (400d58 <_sbrk+0x30>)
  400d36:	4291      	cmp	r1, r2
  400d38:	db08      	blt.n	400d4c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d3a:	4610      	mov	r0, r2
  400d3c:	4a05      	ldr	r2, [pc, #20]	; (400d54 <_sbrk+0x2c>)
  400d3e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d40:	4618      	mov	r0, r3
  400d42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d44:	4a05      	ldr	r2, [pc, #20]	; (400d5c <_sbrk+0x34>)
  400d46:	4b03      	ldr	r3, [pc, #12]	; (400d54 <_sbrk+0x2c>)
  400d48:	601a      	str	r2, [r3, #0]
  400d4a:	e7f0      	b.n	400d2e <_sbrk+0x6>
		return (caddr_t) -1;	
  400d4c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400d50:	4770      	bx	lr
  400d52:	bf00      	nop
  400d54:	20400a48 	.word	0x20400a48
  400d58:	2045fffc 	.word	0x2045fffc
  400d5c:	20402e40 	.word	0x20402e40

00400d60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d60:	f04f 30ff 	mov.w	r0, #4294967295
  400d64:	4770      	bx	lr

00400d66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d6a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d6c:	2000      	movs	r0, #0
  400d6e:	4770      	bx	lr

00400d70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d70:	2001      	movs	r0, #1
  400d72:	4770      	bx	lr

00400d74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d74:	2000      	movs	r0, #0
  400d76:	4770      	bx	lr

00400d78 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d78:	f100 0308 	add.w	r3, r0, #8
  400d7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d7e:	f04f 32ff 	mov.w	r2, #4294967295
  400d82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400d88:	2300      	movs	r3, #0
  400d8a:	6003      	str	r3, [r0, #0]
  400d8c:	4770      	bx	lr

00400d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400d8e:	2300      	movs	r3, #0
  400d90:	6103      	str	r3, [r0, #16]
  400d92:	4770      	bx	lr

00400d94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400d94:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400d96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400d98:	689a      	ldr	r2, [r3, #8]
  400d9a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400d9c:	689a      	ldr	r2, [r3, #8]
  400d9e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400da0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400da2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400da4:	6803      	ldr	r3, [r0, #0]
  400da6:	3301      	adds	r3, #1
  400da8:	6003      	str	r3, [r0, #0]
  400daa:	4770      	bx	lr

00400dac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400dac:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400dae:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400db0:	f1b5 3fff 	cmp.w	r5, #4294967295
  400db4:	d002      	beq.n	400dbc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400db6:	f100 0208 	add.w	r2, r0, #8
  400dba:	e002      	b.n	400dc2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400dbc:	6902      	ldr	r2, [r0, #16]
  400dbe:	e004      	b.n	400dca <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400dc0:	461a      	mov	r2, r3
  400dc2:	6853      	ldr	r3, [r2, #4]
  400dc4:	681c      	ldr	r4, [r3, #0]
  400dc6:	42a5      	cmp	r5, r4
  400dc8:	d2fa      	bcs.n	400dc0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400dca:	6853      	ldr	r3, [r2, #4]
  400dcc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400dce:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400dd0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400dd2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400dd4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400dd6:	6803      	ldr	r3, [r0, #0]
  400dd8:	3301      	adds	r3, #1
  400dda:	6003      	str	r3, [r0, #0]
}
  400ddc:	bc30      	pop	{r4, r5}
  400dde:	4770      	bx	lr

00400de0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400de0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400de2:	6842      	ldr	r2, [r0, #4]
  400de4:	6881      	ldr	r1, [r0, #8]
  400de6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400de8:	6882      	ldr	r2, [r0, #8]
  400dea:	6841      	ldr	r1, [r0, #4]
  400dec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400dee:	685a      	ldr	r2, [r3, #4]
  400df0:	4290      	cmp	r0, r2
  400df2:	d006      	beq.n	400e02 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400df4:	2200      	movs	r2, #0
  400df6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400df8:	681a      	ldr	r2, [r3, #0]
  400dfa:	3a01      	subs	r2, #1
  400dfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400dfe:	6818      	ldr	r0, [r3, #0]
}
  400e00:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400e02:	6882      	ldr	r2, [r0, #8]
  400e04:	605a      	str	r2, [r3, #4]
  400e06:	e7f5      	b.n	400df4 <uxListRemove+0x14>

00400e08 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400e08:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400e0a:	2300      	movs	r3, #0
  400e0c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400e0e:	4b0f      	ldr	r3, [pc, #60]	; (400e4c <prvTaskExitError+0x44>)
  400e10:	681b      	ldr	r3, [r3, #0]
  400e12:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e16:	d00a      	beq.n	400e2e <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e1c:	b672      	cpsid	i
  400e1e:	f383 8811 	msr	BASEPRI, r3
  400e22:	f3bf 8f6f 	isb	sy
  400e26:	f3bf 8f4f 	dsb	sy
  400e2a:	b662      	cpsie	i
  400e2c:	e7fe      	b.n	400e2c <prvTaskExitError+0x24>
  400e2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e32:	b672      	cpsid	i
  400e34:	f383 8811 	msr	BASEPRI, r3
  400e38:	f3bf 8f6f 	isb	sy
  400e3c:	f3bf 8f4f 	dsb	sy
  400e40:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  400e42:	9b01      	ldr	r3, [sp, #4]
  400e44:	2b00      	cmp	r3, #0
  400e46:	d0fc      	beq.n	400e42 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400e48:	b002      	add	sp, #8
  400e4a:	4770      	bx	lr
  400e4c:	20400008 	.word	0x20400008

00400e50 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400e50:	4808      	ldr	r0, [pc, #32]	; (400e74 <prvPortStartFirstTask+0x24>)
  400e52:	6800      	ldr	r0, [r0, #0]
  400e54:	6800      	ldr	r0, [r0, #0]
  400e56:	f380 8808 	msr	MSP, r0
  400e5a:	f04f 0000 	mov.w	r0, #0
  400e5e:	f380 8814 	msr	CONTROL, r0
  400e62:	b662      	cpsie	i
  400e64:	b661      	cpsie	f
  400e66:	f3bf 8f4f 	dsb	sy
  400e6a:	f3bf 8f6f 	isb	sy
  400e6e:	df00      	svc	0
  400e70:	bf00      	nop
  400e72:	0000      	.short	0x0000
  400e74:	e000ed08 	.word	0xe000ed08

00400e78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e88 <vPortEnableVFP+0x10>
  400e7c:	6801      	ldr	r1, [r0, #0]
  400e7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e82:	6001      	str	r1, [r0, #0]
  400e84:	4770      	bx	lr
  400e86:	0000      	.short	0x0000
  400e88:	e000ed88 	.word	0xe000ed88

00400e8c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400e90:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400e94:	f021 0101 	bic.w	r1, r1, #1
  400e98:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400e9c:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <pxPortInitialiseStack+0x28>)
  400e9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400ea2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400ea6:	f06f 0302 	mvn.w	r3, #2
  400eaa:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400eae:	3844      	subs	r0, #68	; 0x44
  400eb0:	4770      	bx	lr
  400eb2:	bf00      	nop
  400eb4:	00400e09 	.word	0x00400e09
	...

00400ec0 <SVC_Handler>:
	__asm volatile (
  400ec0:	4b07      	ldr	r3, [pc, #28]	; (400ee0 <pxCurrentTCBConst2>)
  400ec2:	6819      	ldr	r1, [r3, #0]
  400ec4:	6808      	ldr	r0, [r1, #0]
  400ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400eca:	f380 8809 	msr	PSP, r0
  400ece:	f3bf 8f6f 	isb	sy
  400ed2:	f04f 0000 	mov.w	r0, #0
  400ed6:	f380 8811 	msr	BASEPRI, r0
  400eda:	4770      	bx	lr
  400edc:	f3af 8000 	nop.w

00400ee0 <pxCurrentTCBConst2>:
  400ee0:	20400a54 	.word	0x20400a54

00400ee4 <vPortEnterCritical>:
  400ee4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ee8:	b672      	cpsid	i
  400eea:	f383 8811 	msr	BASEPRI, r3
  400eee:	f3bf 8f6f 	isb	sy
  400ef2:	f3bf 8f4f 	dsb	sy
  400ef6:	b662      	cpsie	i
	uxCriticalNesting++;
  400ef8:	4a0b      	ldr	r2, [pc, #44]	; (400f28 <vPortEnterCritical+0x44>)
  400efa:	6813      	ldr	r3, [r2, #0]
  400efc:	3301      	adds	r3, #1
  400efe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400f00:	2b01      	cmp	r3, #1
  400f02:	d10f      	bne.n	400f24 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400f04:	4b09      	ldr	r3, [pc, #36]	; (400f2c <vPortEnterCritical+0x48>)
  400f06:	681b      	ldr	r3, [r3, #0]
  400f08:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f0c:	d00a      	beq.n	400f24 <vPortEnterCritical+0x40>
  400f0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f12:	b672      	cpsid	i
  400f14:	f383 8811 	msr	BASEPRI, r3
  400f18:	f3bf 8f6f 	isb	sy
  400f1c:	f3bf 8f4f 	dsb	sy
  400f20:	b662      	cpsie	i
  400f22:	e7fe      	b.n	400f22 <vPortEnterCritical+0x3e>
  400f24:	4770      	bx	lr
  400f26:	bf00      	nop
  400f28:	20400008 	.word	0x20400008
  400f2c:	e000ed04 	.word	0xe000ed04

00400f30 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400f30:	4b0a      	ldr	r3, [pc, #40]	; (400f5c <vPortExitCritical+0x2c>)
  400f32:	681b      	ldr	r3, [r3, #0]
  400f34:	b953      	cbnz	r3, 400f4c <vPortExitCritical+0x1c>
  400f36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f3a:	b672      	cpsid	i
  400f3c:	f383 8811 	msr	BASEPRI, r3
  400f40:	f3bf 8f6f 	isb	sy
  400f44:	f3bf 8f4f 	dsb	sy
  400f48:	b662      	cpsie	i
  400f4a:	e7fe      	b.n	400f4a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400f4c:	3b01      	subs	r3, #1
  400f4e:	4a03      	ldr	r2, [pc, #12]	; (400f5c <vPortExitCritical+0x2c>)
  400f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400f52:	b90b      	cbnz	r3, 400f58 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f54:	f383 8811 	msr	BASEPRI, r3
  400f58:	4770      	bx	lr
  400f5a:	bf00      	nop
  400f5c:	20400008 	.word	0x20400008

00400f60 <PendSV_Handler>:
	__asm volatile
  400f60:	f3ef 8009 	mrs	r0, PSP
  400f64:	f3bf 8f6f 	isb	sy
  400f68:	4b15      	ldr	r3, [pc, #84]	; (400fc0 <pxCurrentTCBConst>)
  400f6a:	681a      	ldr	r2, [r3, #0]
  400f6c:	f01e 0f10 	tst.w	lr, #16
  400f70:	bf08      	it	eq
  400f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f7a:	6010      	str	r0, [r2, #0]
  400f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400f80:	f04f 0080 	mov.w	r0, #128	; 0x80
  400f84:	b672      	cpsid	i
  400f86:	f380 8811 	msr	BASEPRI, r0
  400f8a:	f3bf 8f4f 	dsb	sy
  400f8e:	f3bf 8f6f 	isb	sy
  400f92:	b662      	cpsie	i
  400f94:	f001 f882 	bl	40209c <vTaskSwitchContext>
  400f98:	f04f 0000 	mov.w	r0, #0
  400f9c:	f380 8811 	msr	BASEPRI, r0
  400fa0:	bc09      	pop	{r0, r3}
  400fa2:	6819      	ldr	r1, [r3, #0]
  400fa4:	6808      	ldr	r0, [r1, #0]
  400fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400faa:	f01e 0f10 	tst.w	lr, #16
  400fae:	bf08      	it	eq
  400fb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400fb4:	f380 8809 	msr	PSP, r0
  400fb8:	f3bf 8f6f 	isb	sy
  400fbc:	4770      	bx	lr
  400fbe:	bf00      	nop

00400fc0 <pxCurrentTCBConst>:
  400fc0:	20400a54 	.word	0x20400a54

00400fc4 <SysTick_Handler>:
{
  400fc4:	b508      	push	{r3, lr}
	__asm volatile
  400fc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fca:	b672      	cpsid	i
  400fcc:	f383 8811 	msr	BASEPRI, r3
  400fd0:	f3bf 8f6f 	isb	sy
  400fd4:	f3bf 8f4f 	dsb	sy
  400fd8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400fda:	4b05      	ldr	r3, [pc, #20]	; (400ff0 <SysTick_Handler+0x2c>)
  400fdc:	4798      	blx	r3
  400fde:	b118      	cbz	r0, 400fe8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fe4:	4b03      	ldr	r3, [pc, #12]	; (400ff4 <SysTick_Handler+0x30>)
  400fe6:	601a      	str	r2, [r3, #0]
	__asm volatile
  400fe8:	2300      	movs	r3, #0
  400fea:	f383 8811 	msr	BASEPRI, r3
  400fee:	bd08      	pop	{r3, pc}
  400ff0:	00401de1 	.word	0x00401de1
  400ff4:	e000ed04 	.word	0xe000ed04

00400ff8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  400ff8:	4b05      	ldr	r3, [pc, #20]	; (401010 <vPortSetupTimerInterrupt+0x18>)
  400ffa:	2200      	movs	r2, #0
  400ffc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  400ffe:	4905      	ldr	r1, [pc, #20]	; (401014 <vPortSetupTimerInterrupt+0x1c>)
  401000:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401002:	4905      	ldr	r1, [pc, #20]	; (401018 <vPortSetupTimerInterrupt+0x20>)
  401004:	4a05      	ldr	r2, [pc, #20]	; (40101c <vPortSetupTimerInterrupt+0x24>)
  401006:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401008:	2207      	movs	r2, #7
  40100a:	601a      	str	r2, [r3, #0]
  40100c:	4770      	bx	lr
  40100e:	bf00      	nop
  401010:	e000e010 	.word	0xe000e010
  401014:	e000e018 	.word	0xe000e018
  401018:	000927bf 	.word	0x000927bf
  40101c:	e000e014 	.word	0xe000e014

00401020 <xPortStartScheduler>:
{
  401020:	b510      	push	{r4, lr}
  401022:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401024:	4b2e      	ldr	r3, [pc, #184]	; (4010e0 <xPortStartScheduler+0xc0>)
  401026:	781a      	ldrb	r2, [r3, #0]
  401028:	b2d2      	uxtb	r2, r2
  40102a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40102c:	22ff      	movs	r2, #255	; 0xff
  40102e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401030:	781b      	ldrb	r3, [r3, #0]
  401032:	b2db      	uxtb	r3, r3
  401034:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401038:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401040:	4a28      	ldr	r2, [pc, #160]	; (4010e4 <xPortStartScheduler+0xc4>)
  401042:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401044:	2207      	movs	r2, #7
  401046:	4b28      	ldr	r3, [pc, #160]	; (4010e8 <xPortStartScheduler+0xc8>)
  401048:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40104a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40104e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401052:	d012      	beq.n	40107a <xPortStartScheduler+0x5a>
  401054:	2306      	movs	r3, #6
  401056:	e000      	b.n	40105a <xPortStartScheduler+0x3a>
  401058:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40105a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40105e:	0052      	lsls	r2, r2, #1
  401060:	b2d2      	uxtb	r2, r2
  401062:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401066:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40106a:	1e59      	subs	r1, r3, #1
  40106c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401070:	d1f2      	bne.n	401058 <xPortStartScheduler+0x38>
  401072:	4a1d      	ldr	r2, [pc, #116]	; (4010e8 <xPortStartScheduler+0xc8>)
  401074:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401076:	2b04      	cmp	r3, #4
  401078:	d00a      	beq.n	401090 <xPortStartScheduler+0x70>
	__asm volatile
  40107a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40107e:	b672      	cpsid	i
  401080:	f383 8811 	msr	BASEPRI, r3
  401084:	f3bf 8f6f 	isb	sy
  401088:	f3bf 8f4f 	dsb	sy
  40108c:	b662      	cpsie	i
  40108e:	e7fe      	b.n	40108e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401090:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401096:	4a14      	ldr	r2, [pc, #80]	; (4010e8 <xPortStartScheduler+0xc8>)
  401098:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40109a:	9b01      	ldr	r3, [sp, #4]
  40109c:	b2db      	uxtb	r3, r3
  40109e:	4a10      	ldr	r2, [pc, #64]	; (4010e0 <xPortStartScheduler+0xc0>)
  4010a0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4010a2:	4b12      	ldr	r3, [pc, #72]	; (4010ec <xPortStartScheduler+0xcc>)
  4010a4:	681a      	ldr	r2, [r3, #0]
  4010a6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4010aa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4010ac:	681a      	ldr	r2, [r3, #0]
  4010ae:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4010b2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4010b4:	4b0e      	ldr	r3, [pc, #56]	; (4010f0 <xPortStartScheduler+0xd0>)
  4010b6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4010b8:	2400      	movs	r4, #0
  4010ba:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <xPortStartScheduler+0xd4>)
  4010bc:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4010be:	4b0e      	ldr	r3, [pc, #56]	; (4010f8 <xPortStartScheduler+0xd8>)
  4010c0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4010c2:	4a0e      	ldr	r2, [pc, #56]	; (4010fc <xPortStartScheduler+0xdc>)
  4010c4:	6813      	ldr	r3, [r2, #0]
  4010c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4010ca:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4010cc:	4b0c      	ldr	r3, [pc, #48]	; (401100 <xPortStartScheduler+0xe0>)
  4010ce:	4798      	blx	r3
	vTaskSwitchContext();
  4010d0:	4b0c      	ldr	r3, [pc, #48]	; (401104 <xPortStartScheduler+0xe4>)
  4010d2:	4798      	blx	r3
	prvTaskExitError();
  4010d4:	4b0c      	ldr	r3, [pc, #48]	; (401108 <xPortStartScheduler+0xe8>)
  4010d6:	4798      	blx	r3
}
  4010d8:	4620      	mov	r0, r4
  4010da:	b002      	add	sp, #8
  4010dc:	bd10      	pop	{r4, pc}
  4010de:	bf00      	nop
  4010e0:	e000e400 	.word	0xe000e400
  4010e4:	20400a4c 	.word	0x20400a4c
  4010e8:	20400a50 	.word	0x20400a50
  4010ec:	e000ed20 	.word	0xe000ed20
  4010f0:	00400ff9 	.word	0x00400ff9
  4010f4:	20400008 	.word	0x20400008
  4010f8:	00400e79 	.word	0x00400e79
  4010fc:	e000ef34 	.word	0xe000ef34
  401100:	00400e51 	.word	0x00400e51
  401104:	0040209d 	.word	0x0040209d
  401108:	00400e09 	.word	0x00400e09

0040110c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  40110c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401110:	2b0f      	cmp	r3, #15
  401112:	d911      	bls.n	401138 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401114:	4a12      	ldr	r2, [pc, #72]	; (401160 <vPortValidateInterruptPriority+0x54>)
  401116:	5c9b      	ldrb	r3, [r3, r2]
  401118:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40111a:	4a12      	ldr	r2, [pc, #72]	; (401164 <vPortValidateInterruptPriority+0x58>)
  40111c:	7812      	ldrb	r2, [r2, #0]
  40111e:	429a      	cmp	r2, r3
  401120:	d90a      	bls.n	401138 <vPortValidateInterruptPriority+0x2c>
  401122:	f04f 0380 	mov.w	r3, #128	; 0x80
  401126:	b672      	cpsid	i
  401128:	f383 8811 	msr	BASEPRI, r3
  40112c:	f3bf 8f6f 	isb	sy
  401130:	f3bf 8f4f 	dsb	sy
  401134:	b662      	cpsie	i
  401136:	e7fe      	b.n	401136 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401138:	4b0b      	ldr	r3, [pc, #44]	; (401168 <vPortValidateInterruptPriority+0x5c>)
  40113a:	681b      	ldr	r3, [r3, #0]
  40113c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401140:	4a0a      	ldr	r2, [pc, #40]	; (40116c <vPortValidateInterruptPriority+0x60>)
  401142:	6812      	ldr	r2, [r2, #0]
  401144:	4293      	cmp	r3, r2
  401146:	d90a      	bls.n	40115e <vPortValidateInterruptPriority+0x52>
  401148:	f04f 0380 	mov.w	r3, #128	; 0x80
  40114c:	b672      	cpsid	i
  40114e:	f383 8811 	msr	BASEPRI, r3
  401152:	f3bf 8f6f 	isb	sy
  401156:	f3bf 8f4f 	dsb	sy
  40115a:	b662      	cpsie	i
  40115c:	e7fe      	b.n	40115c <vPortValidateInterruptPriority+0x50>
  40115e:	4770      	bx	lr
  401160:	e000e3f0 	.word	0xe000e3f0
  401164:	20400a4c 	.word	0x20400a4c
  401168:	e000ed0c 	.word	0xe000ed0c
  40116c:	20400a50 	.word	0x20400a50

00401170 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401170:	b510      	push	{r4, lr}
  401172:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401174:	4b06      	ldr	r3, [pc, #24]	; (401190 <pvPortMalloc+0x20>)
  401176:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401178:	4620      	mov	r0, r4
  40117a:	4b06      	ldr	r3, [pc, #24]	; (401194 <pvPortMalloc+0x24>)
  40117c:	4798      	blx	r3
  40117e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401180:	4b05      	ldr	r3, [pc, #20]	; (401198 <pvPortMalloc+0x28>)
  401182:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401184:	b10c      	cbz	r4, 40118a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401186:	4620      	mov	r0, r4
  401188:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40118a:	4b04      	ldr	r3, [pc, #16]	; (40119c <pvPortMalloc+0x2c>)
  40118c:	4798      	blx	r3
	return pvReturn;
  40118e:	e7fa      	b.n	401186 <pvPortMalloc+0x16>
  401190:	00401dc5 	.word	0x00401dc5
  401194:	00403329 	.word	0x00403329
  401198:	00401f29 	.word	0x00401f29
  40119c:	00402a35 	.word	0x00402a35

004011a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4011a0:	b148      	cbz	r0, 4011b6 <vPortFree+0x16>
{
  4011a2:	b510      	push	{r4, lr}
  4011a4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4011a6:	4b04      	ldr	r3, [pc, #16]	; (4011b8 <vPortFree+0x18>)
  4011a8:	4798      	blx	r3
		{
			free( pv );
  4011aa:	4620      	mov	r0, r4
  4011ac:	4b03      	ldr	r3, [pc, #12]	; (4011bc <vPortFree+0x1c>)
  4011ae:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4011b0:	4b03      	ldr	r3, [pc, #12]	; (4011c0 <vPortFree+0x20>)
  4011b2:	4798      	blx	r3
  4011b4:	bd10      	pop	{r4, pc}
  4011b6:	4770      	bx	lr
  4011b8:	00401dc5 	.word	0x00401dc5
  4011bc:	00403339 	.word	0x00403339
  4011c0:	00401f29 	.word	0x00401f29

004011c4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  4011c4:	b510      	push	{r4, lr}
  4011c6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4011c8:	4b04      	ldr	r3, [pc, #16]	; (4011dc <prvIsQueueEmpty+0x18>)
  4011ca:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4011cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4011ce:	4b04      	ldr	r3, [pc, #16]	; (4011e0 <prvIsQueueEmpty+0x1c>)
  4011d0:	4798      	blx	r3

	return xReturn;
}
  4011d2:	fab4 f084 	clz	r0, r4
  4011d6:	0940      	lsrs	r0, r0, #5
  4011d8:	bd10      	pop	{r4, pc}
  4011da:	bf00      	nop
  4011dc:	00400ee5 	.word	0x00400ee5
  4011e0:	00400f31 	.word	0x00400f31

004011e4 <prvCopyDataToQueue>:
{
  4011e4:	b570      	push	{r4, r5, r6, lr}
  4011e6:	4604      	mov	r4, r0
  4011e8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4011ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4011ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011ee:	b952      	cbnz	r2, 401206 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4011f0:	6803      	ldr	r3, [r0, #0]
  4011f2:	2b00      	cmp	r3, #0
  4011f4:	d12a      	bne.n	40124c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4011f6:	6840      	ldr	r0, [r0, #4]
  4011f8:	4b17      	ldr	r3, [pc, #92]	; (401258 <prvCopyDataToQueue+0x74>)
  4011fa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4011fc:	2300      	movs	r3, #0
  4011fe:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  401200:	3501      	adds	r5, #1
  401202:	63a5      	str	r5, [r4, #56]	; 0x38
}
  401204:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401206:	b96e      	cbnz	r6, 401224 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401208:	6880      	ldr	r0, [r0, #8]
  40120a:	4b14      	ldr	r3, [pc, #80]	; (40125c <prvCopyDataToQueue+0x78>)
  40120c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40120e:	68a3      	ldr	r3, [r4, #8]
  401210:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401212:	4413      	add	r3, r2
  401214:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401216:	6862      	ldr	r2, [r4, #4]
  401218:	4293      	cmp	r3, r2
  40121a:	d319      	bcc.n	401250 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40121c:	6823      	ldr	r3, [r4, #0]
  40121e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401220:	2000      	movs	r0, #0
  401222:	e7ed      	b.n	401200 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401224:	68c0      	ldr	r0, [r0, #12]
  401226:	4b0d      	ldr	r3, [pc, #52]	; (40125c <prvCopyDataToQueue+0x78>)
  401228:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40122a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40122c:	425b      	negs	r3, r3
  40122e:	68e2      	ldr	r2, [r4, #12]
  401230:	441a      	add	r2, r3
  401232:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401234:	6821      	ldr	r1, [r4, #0]
  401236:	428a      	cmp	r2, r1
  401238:	d202      	bcs.n	401240 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40123a:	6862      	ldr	r2, [r4, #4]
  40123c:	4413      	add	r3, r2
  40123e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401240:	b145      	cbz	r5, 401254 <prvCopyDataToQueue+0x70>
  401242:	2e02      	cmp	r6, #2
  401244:	d106      	bne.n	401254 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401246:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401248:	2000      	movs	r0, #0
  40124a:	e7d9      	b.n	401200 <prvCopyDataToQueue+0x1c>
  40124c:	2000      	movs	r0, #0
  40124e:	e7d7      	b.n	401200 <prvCopyDataToQueue+0x1c>
  401250:	2000      	movs	r0, #0
  401252:	e7d5      	b.n	401200 <prvCopyDataToQueue+0x1c>
  401254:	2000      	movs	r0, #0
  401256:	e7d3      	b.n	401200 <prvCopyDataToQueue+0x1c>
  401258:	00402361 	.word	0x00402361
  40125c:	004038a9 	.word	0x004038a9

00401260 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401260:	b570      	push	{r4, r5, r6, lr}
  401262:	b082      	sub	sp, #8
  401264:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401266:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401268:	b174      	cbz	r4, 401288 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40126a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40126c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40126e:	429a      	cmp	r2, r3
  401270:	d315      	bcc.n	40129e <prvNotifyQueueSetContainer+0x3e>
  401272:	f04f 0380 	mov.w	r3, #128	; 0x80
  401276:	b672      	cpsid	i
  401278:	f383 8811 	msr	BASEPRI, r3
  40127c:	f3bf 8f6f 	isb	sy
  401280:	f3bf 8f4f 	dsb	sy
  401284:	b662      	cpsie	i
  401286:	e7fe      	b.n	401286 <prvNotifyQueueSetContainer+0x26>
  401288:	f04f 0380 	mov.w	r3, #128	; 0x80
  40128c:	b672      	cpsid	i
  40128e:	f383 8811 	msr	BASEPRI, r3
  401292:	f3bf 8f6f 	isb	sy
  401296:	f3bf 8f4f 	dsb	sy
  40129a:	b662      	cpsie	i
  40129c:	e7fe      	b.n	40129c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40129e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012a0:	4293      	cmp	r3, r2
  4012a2:	d803      	bhi.n	4012ac <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4012a4:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4012a6:	4630      	mov	r0, r6
  4012a8:	b002      	add	sp, #8
  4012aa:	bd70      	pop	{r4, r5, r6, pc}
  4012ac:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  4012ae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4012b2:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4012b4:	a901      	add	r1, sp, #4
  4012b6:	4620      	mov	r0, r4
  4012b8:	4b0a      	ldr	r3, [pc, #40]	; (4012e4 <prvNotifyQueueSetContainer+0x84>)
  4012ba:	4798      	blx	r3
  4012bc:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  4012be:	f1b5 3fff 	cmp.w	r5, #4294967295
  4012c2:	d10a      	bne.n	4012da <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4012c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4012c6:	2b00      	cmp	r3, #0
  4012c8:	d0ed      	beq.n	4012a6 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4012ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012ce:	4b06      	ldr	r3, [pc, #24]	; (4012e8 <prvNotifyQueueSetContainer+0x88>)
  4012d0:	4798      	blx	r3
  4012d2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4012d4:	bf18      	it	ne
  4012d6:	2601      	movne	r6, #1
  4012d8:	e7e5      	b.n	4012a6 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4012da:	1c6b      	adds	r3, r5, #1
  4012dc:	b25b      	sxtb	r3, r3
  4012de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4012e2:	e7e0      	b.n	4012a6 <prvNotifyQueueSetContainer+0x46>
  4012e4:	004011e5 	.word	0x004011e5
  4012e8:	004021f1 	.word	0x004021f1

004012ec <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4012ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4012ee:	b172      	cbz	r2, 40130e <prvCopyDataFromQueue+0x22>
{
  4012f0:	b510      	push	{r4, lr}
  4012f2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4012f4:	68c4      	ldr	r4, [r0, #12]
  4012f6:	4414      	add	r4, r2
  4012f8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4012fa:	6840      	ldr	r0, [r0, #4]
  4012fc:	4284      	cmp	r4, r0
  4012fe:	d301      	bcc.n	401304 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401300:	6818      	ldr	r0, [r3, #0]
  401302:	60d8      	str	r0, [r3, #12]
  401304:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401306:	68d9      	ldr	r1, [r3, #12]
  401308:	4b01      	ldr	r3, [pc, #4]	; (401310 <prvCopyDataFromQueue+0x24>)
  40130a:	4798      	blx	r3
  40130c:	bd10      	pop	{r4, pc}
  40130e:	4770      	bx	lr
  401310:	004038a9 	.word	0x004038a9

00401314 <prvUnlockQueue>:
{
  401314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401318:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  40131a:	4b23      	ldr	r3, [pc, #140]	; (4013a8 <prvUnlockQueue+0x94>)
  40131c:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40131e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401322:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401324:	2c00      	cmp	r4, #0
  401326:	dd19      	ble.n	40135c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401328:	4e20      	ldr	r6, [pc, #128]	; (4013ac <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  40132a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4013b8 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40132e:	4f20      	ldr	r7, [pc, #128]	; (4013b0 <prvUnlockQueue+0x9c>)
  401330:	e008      	b.n	401344 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401334:	b193      	cbz	r3, 40135c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401336:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40133a:	47b8      	blx	r7
  40133c:	b960      	cbnz	r0, 401358 <prvUnlockQueue+0x44>
  40133e:	3c01      	subs	r4, #1
  401340:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401342:	b15c      	cbz	r4, 40135c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401344:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401346:	2b00      	cmp	r3, #0
  401348:	d0f3      	beq.n	401332 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40134a:	2100      	movs	r1, #0
  40134c:	4628      	mov	r0, r5
  40134e:	47b0      	blx	r6
  401350:	2800      	cmp	r0, #0
  401352:	d0f4      	beq.n	40133e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401354:	47c0      	blx	r8
  401356:	e7f2      	b.n	40133e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401358:	47c0      	blx	r8
  40135a:	e7f0      	b.n	40133e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40135c:	23ff      	movs	r3, #255	; 0xff
  40135e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401362:	4b14      	ldr	r3, [pc, #80]	; (4013b4 <prvUnlockQueue+0xa0>)
  401364:	4798      	blx	r3
	taskENTER_CRITICAL();
  401366:	4b10      	ldr	r3, [pc, #64]	; (4013a8 <prvUnlockQueue+0x94>)
  401368:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40136a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40136e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401370:	2c00      	cmp	r4, #0
  401372:	dd12      	ble.n	40139a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401374:	692b      	ldr	r3, [r5, #16]
  401376:	b183      	cbz	r3, 40139a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401378:	f105 0710 	add.w	r7, r5, #16
  40137c:	4e0c      	ldr	r6, [pc, #48]	; (4013b0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40137e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4013b8 <prvUnlockQueue+0xa4>
  401382:	e004      	b.n	40138e <prvUnlockQueue+0x7a>
  401384:	3c01      	subs	r4, #1
  401386:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401388:	b13c      	cbz	r4, 40139a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40138a:	692b      	ldr	r3, [r5, #16]
  40138c:	b12b      	cbz	r3, 40139a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40138e:	4638      	mov	r0, r7
  401390:	47b0      	blx	r6
  401392:	2800      	cmp	r0, #0
  401394:	d0f6      	beq.n	401384 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401396:	47c0      	blx	r8
  401398:	e7f4      	b.n	401384 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40139a:	23ff      	movs	r3, #255	; 0xff
  40139c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  4013a0:	4b04      	ldr	r3, [pc, #16]	; (4013b4 <prvUnlockQueue+0xa0>)
  4013a2:	4798      	blx	r3
  4013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013a8:	00400ee5 	.word	0x00400ee5
  4013ac:	00401261 	.word	0x00401261
  4013b0:	004021f1 	.word	0x004021f1
  4013b4:	00400f31 	.word	0x00400f31
  4013b8:	00402335 	.word	0x00402335

004013bc <xQueueGenericReset>:
{
  4013bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4013be:	b330      	cbz	r0, 40140e <xQueueGenericReset+0x52>
  4013c0:	4604      	mov	r4, r0
  4013c2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4013c4:	4b1d      	ldr	r3, [pc, #116]	; (40143c <xQueueGenericReset+0x80>)
  4013c6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4013c8:	6822      	ldr	r2, [r4, #0]
  4013ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4013cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013ce:	fb03 f301 	mul.w	r3, r3, r1
  4013d2:	18d0      	adds	r0, r2, r3
  4013d4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4013d6:	2000      	movs	r0, #0
  4013d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4013da:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4013dc:	1a5b      	subs	r3, r3, r1
  4013de:	4413      	add	r3, r2
  4013e0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4013e2:	23ff      	movs	r3, #255	; 0xff
  4013e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4013e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4013ec:	b9d5      	cbnz	r5, 401424 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013ee:	6923      	ldr	r3, [r4, #16]
  4013f0:	b1fb      	cbz	r3, 401432 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013f2:	f104 0010 	add.w	r0, r4, #16
  4013f6:	4b12      	ldr	r3, [pc, #72]	; (401440 <xQueueGenericReset+0x84>)
  4013f8:	4798      	blx	r3
  4013fa:	b1d0      	cbz	r0, 401432 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4013fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401400:	4b10      	ldr	r3, [pc, #64]	; (401444 <xQueueGenericReset+0x88>)
  401402:	601a      	str	r2, [r3, #0]
  401404:	f3bf 8f4f 	dsb	sy
  401408:	f3bf 8f6f 	isb	sy
  40140c:	e011      	b.n	401432 <xQueueGenericReset+0x76>
  40140e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401412:	b672      	cpsid	i
  401414:	f383 8811 	msr	BASEPRI, r3
  401418:	f3bf 8f6f 	isb	sy
  40141c:	f3bf 8f4f 	dsb	sy
  401420:	b662      	cpsie	i
  401422:	e7fe      	b.n	401422 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401424:	f104 0010 	add.w	r0, r4, #16
  401428:	4d07      	ldr	r5, [pc, #28]	; (401448 <xQueueGenericReset+0x8c>)
  40142a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40142c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401430:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401432:	4b06      	ldr	r3, [pc, #24]	; (40144c <xQueueGenericReset+0x90>)
  401434:	4798      	blx	r3
}
  401436:	2001      	movs	r0, #1
  401438:	bd38      	pop	{r3, r4, r5, pc}
  40143a:	bf00      	nop
  40143c:	00400ee5 	.word	0x00400ee5
  401440:	004021f1 	.word	0x004021f1
  401444:	e000ed04 	.word	0xe000ed04
  401448:	00400d79 	.word	0x00400d79
  40144c:	00400f31 	.word	0x00400f31

00401450 <xQueueGenericCreate>:
	{
  401450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401452:	b950      	cbnz	r0, 40146a <xQueueGenericCreate+0x1a>
  401454:	f04f 0380 	mov.w	r3, #128	; 0x80
  401458:	b672      	cpsid	i
  40145a:	f383 8811 	msr	BASEPRI, r3
  40145e:	f3bf 8f6f 	isb	sy
  401462:	f3bf 8f4f 	dsb	sy
  401466:	b662      	cpsie	i
  401468:	e7fe      	b.n	401468 <xQueueGenericCreate+0x18>
  40146a:	4606      	mov	r6, r0
  40146c:	4617      	mov	r7, r2
  40146e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401470:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401474:	3054      	adds	r0, #84	; 0x54
  401476:	4b0b      	ldr	r3, [pc, #44]	; (4014a4 <xQueueGenericCreate+0x54>)
  401478:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40147a:	4604      	mov	r4, r0
  40147c:	b178      	cbz	r0, 40149e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40147e:	b11d      	cbz	r5, 401488 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401480:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401484:	6003      	str	r3, [r0, #0]
  401486:	e000      	b.n	40148a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401488:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40148a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40148c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40148e:	2101      	movs	r1, #1
  401490:	4620      	mov	r0, r4
  401492:	4b05      	ldr	r3, [pc, #20]	; (4014a8 <xQueueGenericCreate+0x58>)
  401494:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401496:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40149a:	2300      	movs	r3, #0
  40149c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40149e:	4620      	mov	r0, r4
  4014a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4014a2:	bf00      	nop
  4014a4:	00401171 	.word	0x00401171
  4014a8:	004013bd 	.word	0x004013bd

004014ac <xQueueGenericSend>:
{
  4014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014b0:	b085      	sub	sp, #20
  4014b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4014b4:	b1b8      	cbz	r0, 4014e6 <xQueueGenericSend+0x3a>
  4014b6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014b8:	b301      	cbz	r1, 4014fc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4014ba:	2b02      	cmp	r3, #2
  4014bc:	d02c      	beq.n	401518 <xQueueGenericSend+0x6c>
  4014be:	461e      	mov	r6, r3
  4014c0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4014c2:	4b69      	ldr	r3, [pc, #420]	; (401668 <xQueueGenericSend+0x1bc>)
  4014c4:	4798      	blx	r3
  4014c6:	2800      	cmp	r0, #0
  4014c8:	d134      	bne.n	401534 <xQueueGenericSend+0x88>
  4014ca:	9b01      	ldr	r3, [sp, #4]
  4014cc:	2b00      	cmp	r3, #0
  4014ce:	d039      	beq.n	401544 <xQueueGenericSend+0x98>
  4014d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d4:	b672      	cpsid	i
  4014d6:	f383 8811 	msr	BASEPRI, r3
  4014da:	f3bf 8f6f 	isb	sy
  4014de:	f3bf 8f4f 	dsb	sy
  4014e2:	b662      	cpsie	i
  4014e4:	e7fe      	b.n	4014e4 <xQueueGenericSend+0x38>
  4014e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ea:	b672      	cpsid	i
  4014ec:	f383 8811 	msr	BASEPRI, r3
  4014f0:	f3bf 8f6f 	isb	sy
  4014f4:	f3bf 8f4f 	dsb	sy
  4014f8:	b662      	cpsie	i
  4014fa:	e7fe      	b.n	4014fa <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014fe:	2a00      	cmp	r2, #0
  401500:	d0db      	beq.n	4014ba <xQueueGenericSend+0xe>
  401502:	f04f 0380 	mov.w	r3, #128	; 0x80
  401506:	b672      	cpsid	i
  401508:	f383 8811 	msr	BASEPRI, r3
  40150c:	f3bf 8f6f 	isb	sy
  401510:	f3bf 8f4f 	dsb	sy
  401514:	b662      	cpsie	i
  401516:	e7fe      	b.n	401516 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401518:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40151a:	2a01      	cmp	r2, #1
  40151c:	d0cf      	beq.n	4014be <xQueueGenericSend+0x12>
  40151e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401522:	b672      	cpsid	i
  401524:	f383 8811 	msr	BASEPRI, r3
  401528:	f3bf 8f6f 	isb	sy
  40152c:	f3bf 8f4f 	dsb	sy
  401530:	b662      	cpsie	i
  401532:	e7fe      	b.n	401532 <xQueueGenericSend+0x86>
  401534:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401536:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401694 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40153a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401698 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40153e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401674 <xQueueGenericSend+0x1c8>
  401542:	e041      	b.n	4015c8 <xQueueGenericSend+0x11c>
  401544:	2500      	movs	r5, #0
  401546:	e7f6      	b.n	401536 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401548:	4632      	mov	r2, r6
  40154a:	4639      	mov	r1, r7
  40154c:	4620      	mov	r0, r4
  40154e:	4b47      	ldr	r3, [pc, #284]	; (40166c <xQueueGenericSend+0x1c0>)
  401550:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401552:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401554:	b193      	cbz	r3, 40157c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401556:	4631      	mov	r1, r6
  401558:	4620      	mov	r0, r4
  40155a:	4b45      	ldr	r3, [pc, #276]	; (401670 <xQueueGenericSend+0x1c4>)
  40155c:	4798      	blx	r3
  40155e:	b138      	cbz	r0, 401570 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401564:	4b43      	ldr	r3, [pc, #268]	; (401674 <xQueueGenericSend+0x1c8>)
  401566:	601a      	str	r2, [r3, #0]
  401568:	f3bf 8f4f 	dsb	sy
  40156c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401570:	4b41      	ldr	r3, [pc, #260]	; (401678 <xQueueGenericSend+0x1cc>)
  401572:	4798      	blx	r3
				return pdPASS;
  401574:	2001      	movs	r0, #1
}
  401576:	b005      	add	sp, #20
  401578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40157c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40157e:	b173      	cbz	r3, 40159e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401580:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401584:	4b3d      	ldr	r3, [pc, #244]	; (40167c <xQueueGenericSend+0x1d0>)
  401586:	4798      	blx	r3
  401588:	2800      	cmp	r0, #0
  40158a:	d0f1      	beq.n	401570 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40158c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401590:	4b38      	ldr	r3, [pc, #224]	; (401674 <xQueueGenericSend+0x1c8>)
  401592:	601a      	str	r2, [r3, #0]
  401594:	f3bf 8f4f 	dsb	sy
  401598:	f3bf 8f6f 	isb	sy
  40159c:	e7e8      	b.n	401570 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40159e:	2800      	cmp	r0, #0
  4015a0:	d0e6      	beq.n	401570 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4015a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015a6:	4b33      	ldr	r3, [pc, #204]	; (401674 <xQueueGenericSend+0x1c8>)
  4015a8:	601a      	str	r2, [r3, #0]
  4015aa:	f3bf 8f4f 	dsb	sy
  4015ae:	f3bf 8f6f 	isb	sy
  4015b2:	e7dd      	b.n	401570 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4015b4:	4b30      	ldr	r3, [pc, #192]	; (401678 <xQueueGenericSend+0x1cc>)
  4015b6:	4798      	blx	r3
					return errQUEUE_FULL;
  4015b8:	2000      	movs	r0, #0
  4015ba:	e7dc      	b.n	401576 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4015bc:	4620      	mov	r0, r4
  4015be:	4b30      	ldr	r3, [pc, #192]	; (401680 <xQueueGenericSend+0x1d4>)
  4015c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4015c2:	4b30      	ldr	r3, [pc, #192]	; (401684 <xQueueGenericSend+0x1d8>)
  4015c4:	4798      	blx	r3
  4015c6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  4015c8:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4015ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015ce:	429a      	cmp	r2, r3
  4015d0:	d3ba      	bcc.n	401548 <xQueueGenericSend+0x9c>
  4015d2:	2e02      	cmp	r6, #2
  4015d4:	d0b8      	beq.n	401548 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4015d6:	9b01      	ldr	r3, [sp, #4]
  4015d8:	2b00      	cmp	r3, #0
  4015da:	d0eb      	beq.n	4015b4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4015dc:	b90d      	cbnz	r5, 4015e2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4015de:	a802      	add	r0, sp, #8
  4015e0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4015e2:	4b25      	ldr	r3, [pc, #148]	; (401678 <xQueueGenericSend+0x1cc>)
  4015e4:	4798      	blx	r3
		vTaskSuspendAll();
  4015e6:	4b28      	ldr	r3, [pc, #160]	; (401688 <xQueueGenericSend+0x1dc>)
  4015e8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015ea:	47c0      	blx	r8
  4015ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4015f0:	b25b      	sxtb	r3, r3
  4015f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015f6:	d102      	bne.n	4015fe <xQueueGenericSend+0x152>
  4015f8:	2300      	movs	r3, #0
  4015fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4015fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401602:	b25b      	sxtb	r3, r3
  401604:	f1b3 3fff 	cmp.w	r3, #4294967295
  401608:	d102      	bne.n	401610 <xQueueGenericSend+0x164>
  40160a:	2300      	movs	r3, #0
  40160c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401610:	4b19      	ldr	r3, [pc, #100]	; (401678 <xQueueGenericSend+0x1cc>)
  401612:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401614:	a901      	add	r1, sp, #4
  401616:	a802      	add	r0, sp, #8
  401618:	4b1c      	ldr	r3, [pc, #112]	; (40168c <xQueueGenericSend+0x1e0>)
  40161a:	4798      	blx	r3
  40161c:	b9e0      	cbnz	r0, 401658 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  40161e:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401620:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401624:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401626:	4b14      	ldr	r3, [pc, #80]	; (401678 <xQueueGenericSend+0x1cc>)
  401628:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40162a:	45ab      	cmp	fp, r5
  40162c:	d1c6      	bne.n	4015bc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40162e:	9901      	ldr	r1, [sp, #4]
  401630:	f104 0010 	add.w	r0, r4, #16
  401634:	4b16      	ldr	r3, [pc, #88]	; (401690 <xQueueGenericSend+0x1e4>)
  401636:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401638:	4620      	mov	r0, r4
  40163a:	4b11      	ldr	r3, [pc, #68]	; (401680 <xQueueGenericSend+0x1d4>)
  40163c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40163e:	4b11      	ldr	r3, [pc, #68]	; (401684 <xQueueGenericSend+0x1d8>)
  401640:	4798      	blx	r3
  401642:	2800      	cmp	r0, #0
  401644:	d1bf      	bne.n	4015c6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40164a:	f8c9 3000 	str.w	r3, [r9]
  40164e:	f3bf 8f4f 	dsb	sy
  401652:	f3bf 8f6f 	isb	sy
  401656:	e7b6      	b.n	4015c6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401658:	4620      	mov	r0, r4
  40165a:	4b09      	ldr	r3, [pc, #36]	; (401680 <xQueueGenericSend+0x1d4>)
  40165c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40165e:	4b09      	ldr	r3, [pc, #36]	; (401684 <xQueueGenericSend+0x1d8>)
  401660:	4798      	blx	r3
			return errQUEUE_FULL;
  401662:	2000      	movs	r0, #0
  401664:	e787      	b.n	401576 <xQueueGenericSend+0xca>
  401666:	bf00      	nop
  401668:	00402341 	.word	0x00402341
  40166c:	004011e5 	.word	0x004011e5
  401670:	00401261 	.word	0x00401261
  401674:	e000ed04 	.word	0xe000ed04
  401678:	00400f31 	.word	0x00400f31
  40167c:	004021f1 	.word	0x004021f1
  401680:	00401315 	.word	0x00401315
  401684:	00401f29 	.word	0x00401f29
  401688:	00401dc5 	.word	0x00401dc5
  40168c:	004022a1 	.word	0x004022a1
  401690:	0040216d 	.word	0x0040216d
  401694:	00400ee5 	.word	0x00400ee5
  401698:	00402289 	.word	0x00402289

0040169c <xQueueGenericSendFromISR>:
{
  40169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  4016a0:	2800      	cmp	r0, #0
  4016a2:	d039      	beq.n	401718 <xQueueGenericSendFromISR+0x7c>
  4016a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016a6:	2900      	cmp	r1, #0
  4016a8:	d041      	beq.n	40172e <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016aa:	2b02      	cmp	r3, #2
  4016ac:	d04d      	beq.n	40174a <xQueueGenericSendFromISR+0xae>
  4016ae:	461f      	mov	r7, r3
  4016b0:	4690      	mov	r8, r2
  4016b2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4016b4:	4b3a      	ldr	r3, [pc, #232]	; (4017a0 <xQueueGenericSendFromISR+0x104>)
  4016b6:	4798      	blx	r3
	__asm volatile
  4016b8:	f3ef 8611 	mrs	r6, BASEPRI
  4016bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016c0:	b672      	cpsid	i
  4016c2:	f383 8811 	msr	BASEPRI, r3
  4016c6:	f3bf 8f6f 	isb	sy
  4016ca:	f3bf 8f4f 	dsb	sy
  4016ce:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4016d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4016d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4016d4:	429a      	cmp	r2, r3
  4016d6:	d301      	bcc.n	4016dc <xQueueGenericSendFromISR+0x40>
  4016d8:	2f02      	cmp	r7, #2
  4016da:	d158      	bne.n	40178e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4016dc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4016e0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4016e2:	463a      	mov	r2, r7
  4016e4:	4649      	mov	r1, r9
  4016e6:	4620      	mov	r0, r4
  4016e8:	4b2e      	ldr	r3, [pc, #184]	; (4017a4 <xQueueGenericSendFromISR+0x108>)
  4016ea:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4016ec:	f1b5 3fff 	cmp.w	r5, #4294967295
  4016f0:	d147      	bne.n	401782 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4016f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d036      	beq.n	401766 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4016f8:	4639      	mov	r1, r7
  4016fa:	4620      	mov	r0, r4
  4016fc:	4b2a      	ldr	r3, [pc, #168]	; (4017a8 <xQueueGenericSendFromISR+0x10c>)
  4016fe:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401700:	f1b8 0f00 	cmp.w	r8, #0
  401704:	d045      	beq.n	401792 <xQueueGenericSendFromISR+0xf6>
  401706:	2800      	cmp	r0, #0
  401708:	d043      	beq.n	401792 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40170a:	2001      	movs	r0, #1
  40170c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  401710:	f386 8811 	msr	BASEPRI, r6
}
  401714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  401718:	f04f 0380 	mov.w	r3, #128	; 0x80
  40171c:	b672      	cpsid	i
  40171e:	f383 8811 	msr	BASEPRI, r3
  401722:	f3bf 8f6f 	isb	sy
  401726:	f3bf 8f4f 	dsb	sy
  40172a:	b662      	cpsie	i
  40172c:	e7fe      	b.n	40172c <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40172e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401730:	2800      	cmp	r0, #0
  401732:	d0ba      	beq.n	4016aa <xQueueGenericSendFromISR+0xe>
  401734:	f04f 0380 	mov.w	r3, #128	; 0x80
  401738:	b672      	cpsid	i
  40173a:	f383 8811 	msr	BASEPRI, r3
  40173e:	f3bf 8f6f 	isb	sy
  401742:	f3bf 8f4f 	dsb	sy
  401746:	b662      	cpsie	i
  401748:	e7fe      	b.n	401748 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40174a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40174c:	2801      	cmp	r0, #1
  40174e:	d0ae      	beq.n	4016ae <xQueueGenericSendFromISR+0x12>
  401750:	f04f 0380 	mov.w	r3, #128	; 0x80
  401754:	b672      	cpsid	i
  401756:	f383 8811 	msr	BASEPRI, r3
  40175a:	f3bf 8f6f 	isb	sy
  40175e:	f3bf 8f4f 	dsb	sy
  401762:	b662      	cpsie	i
  401764:	e7fe      	b.n	401764 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401766:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401768:	b1ab      	cbz	r3, 401796 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40176a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40176e:	4b0f      	ldr	r3, [pc, #60]	; (4017ac <xQueueGenericSendFromISR+0x110>)
  401770:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401772:	f1b8 0f00 	cmp.w	r8, #0
  401776:	d010      	beq.n	40179a <xQueueGenericSendFromISR+0xfe>
  401778:	b178      	cbz	r0, 40179a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40177a:	2001      	movs	r0, #1
  40177c:	f8c8 0000 	str.w	r0, [r8]
  401780:	e7c6      	b.n	401710 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401782:	1c6b      	adds	r3, r5, #1
  401784:	b25b      	sxtb	r3, r3
  401786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40178a:	2001      	movs	r0, #1
  40178c:	e7c0      	b.n	401710 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40178e:	2000      	movs	r0, #0
  401790:	e7be      	b.n	401710 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401792:	2001      	movs	r0, #1
  401794:	e7bc      	b.n	401710 <xQueueGenericSendFromISR+0x74>
  401796:	2001      	movs	r0, #1
  401798:	e7ba      	b.n	401710 <xQueueGenericSendFromISR+0x74>
  40179a:	2001      	movs	r0, #1
  40179c:	e7b8      	b.n	401710 <xQueueGenericSendFromISR+0x74>
  40179e:	bf00      	nop
  4017a0:	0040110d 	.word	0x0040110d
  4017a4:	004011e5 	.word	0x004011e5
  4017a8:	00401261 	.word	0x00401261
  4017ac:	004021f1 	.word	0x004021f1

004017b0 <xQueueReceive>:
{
  4017b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017b4:	b084      	sub	sp, #16
  4017b6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  4017b8:	b190      	cbz	r0, 4017e0 <xQueueReceive+0x30>
  4017ba:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017bc:	b1d9      	cbz	r1, 4017f6 <xQueueReceive+0x46>
  4017be:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4017c0:	4b54      	ldr	r3, [pc, #336]	; (401914 <xQueueReceive+0x164>)
  4017c2:	4798      	blx	r3
  4017c4:	bb28      	cbnz	r0, 401812 <xQueueReceive+0x62>
  4017c6:	9b01      	ldr	r3, [sp, #4]
  4017c8:	b35b      	cbz	r3, 401822 <xQueueReceive+0x72>
  4017ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ce:	b672      	cpsid	i
  4017d0:	f383 8811 	msr	BASEPRI, r3
  4017d4:	f3bf 8f6f 	isb	sy
  4017d8:	f3bf 8f4f 	dsb	sy
  4017dc:	b662      	cpsie	i
  4017de:	e7fe      	b.n	4017de <xQueueReceive+0x2e>
  4017e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017e4:	b672      	cpsid	i
  4017e6:	f383 8811 	msr	BASEPRI, r3
  4017ea:	f3bf 8f6f 	isb	sy
  4017ee:	f3bf 8f4f 	dsb	sy
  4017f2:	b662      	cpsie	i
  4017f4:	e7fe      	b.n	4017f4 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4017f8:	2b00      	cmp	r3, #0
  4017fa:	d0e0      	beq.n	4017be <xQueueReceive+0xe>
  4017fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401800:	b672      	cpsid	i
  401802:	f383 8811 	msr	BASEPRI, r3
  401806:	f3bf 8f6f 	isb	sy
  40180a:	f3bf 8f4f 	dsb	sy
  40180e:	b662      	cpsie	i
  401810:	e7fe      	b.n	401810 <xQueueReceive+0x60>
  401812:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401814:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401940 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401818:	f8df a128 	ldr.w	sl, [pc, #296]	; 401944 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  40181c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401920 <xQueueReceive+0x170>
  401820:	e031      	b.n	401886 <xQueueReceive+0xd6>
  401822:	2700      	movs	r7, #0
  401824:	e7f6      	b.n	401814 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401826:	4631      	mov	r1, r6
  401828:	4620      	mov	r0, r4
  40182a:	4b3b      	ldr	r3, [pc, #236]	; (401918 <xQueueReceive+0x168>)
  40182c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  40182e:	3d01      	subs	r5, #1
  401830:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401832:	6923      	ldr	r3, [r4, #16]
  401834:	b163      	cbz	r3, 401850 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401836:	f104 0010 	add.w	r0, r4, #16
  40183a:	4b38      	ldr	r3, [pc, #224]	; (40191c <xQueueReceive+0x16c>)
  40183c:	4798      	blx	r3
  40183e:	b138      	cbz	r0, 401850 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401844:	4b36      	ldr	r3, [pc, #216]	; (401920 <xQueueReceive+0x170>)
  401846:	601a      	str	r2, [r3, #0]
  401848:	f3bf 8f4f 	dsb	sy
  40184c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401850:	4b34      	ldr	r3, [pc, #208]	; (401924 <xQueueReceive+0x174>)
  401852:	4798      	blx	r3
				return pdPASS;
  401854:	2001      	movs	r0, #1
}
  401856:	b004      	add	sp, #16
  401858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  40185c:	4b31      	ldr	r3, [pc, #196]	; (401924 <xQueueReceive+0x174>)
  40185e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401860:	2000      	movs	r0, #0
  401862:	e7f8      	b.n	401856 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401864:	a802      	add	r0, sp, #8
  401866:	47d0      	blx	sl
  401868:	e016      	b.n	401898 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  40186a:	2300      	movs	r3, #0
  40186c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401870:	e01d      	b.n	4018ae <xQueueReceive+0xfe>
  401872:	2300      	movs	r3, #0
  401874:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401878:	e01f      	b.n	4018ba <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  40187a:	4620      	mov	r0, r4
  40187c:	4b2a      	ldr	r3, [pc, #168]	; (401928 <xQueueReceive+0x178>)
  40187e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401880:	4b2a      	ldr	r3, [pc, #168]	; (40192c <xQueueReceive+0x17c>)
  401882:	4798      	blx	r3
  401884:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401886:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401888:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40188a:	2d00      	cmp	r5, #0
  40188c:	d1cb      	bne.n	401826 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40188e:	9b01      	ldr	r3, [sp, #4]
  401890:	2b00      	cmp	r3, #0
  401892:	d0e3      	beq.n	40185c <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401894:	2f00      	cmp	r7, #0
  401896:	d0e5      	beq.n	401864 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401898:	4b22      	ldr	r3, [pc, #136]	; (401924 <xQueueReceive+0x174>)
  40189a:	4798      	blx	r3
		vTaskSuspendAll();
  40189c:	4b24      	ldr	r3, [pc, #144]	; (401930 <xQueueReceive+0x180>)
  40189e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4018a0:	47c0      	blx	r8
  4018a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4018a6:	b25b      	sxtb	r3, r3
  4018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018ac:	d0dd      	beq.n	40186a <xQueueReceive+0xba>
  4018ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4018b2:	b25b      	sxtb	r3, r3
  4018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018b8:	d0db      	beq.n	401872 <xQueueReceive+0xc2>
  4018ba:	4b1a      	ldr	r3, [pc, #104]	; (401924 <xQueueReceive+0x174>)
  4018bc:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018be:	a901      	add	r1, sp, #4
  4018c0:	a802      	add	r0, sp, #8
  4018c2:	4b1c      	ldr	r3, [pc, #112]	; (401934 <xQueueReceive+0x184>)
  4018c4:	4798      	blx	r3
  4018c6:	b9c8      	cbnz	r0, 4018fc <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4018c8:	4620      	mov	r0, r4
  4018ca:	4b1b      	ldr	r3, [pc, #108]	; (401938 <xQueueReceive+0x188>)
  4018cc:	4798      	blx	r3
  4018ce:	2800      	cmp	r0, #0
  4018d0:	d0d3      	beq.n	40187a <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4018d2:	9901      	ldr	r1, [sp, #4]
  4018d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018d8:	4b18      	ldr	r3, [pc, #96]	; (40193c <xQueueReceive+0x18c>)
  4018da:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018dc:	4620      	mov	r0, r4
  4018de:	4b12      	ldr	r3, [pc, #72]	; (401928 <xQueueReceive+0x178>)
  4018e0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018e2:	4b12      	ldr	r3, [pc, #72]	; (40192c <xQueueReceive+0x17c>)
  4018e4:	4798      	blx	r3
  4018e6:	2800      	cmp	r0, #0
  4018e8:	d1cc      	bne.n	401884 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  4018ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018ee:	f8c9 3000 	str.w	r3, [r9]
  4018f2:	f3bf 8f4f 	dsb	sy
  4018f6:	f3bf 8f6f 	isb	sy
  4018fa:	e7c3      	b.n	401884 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  4018fc:	4620      	mov	r0, r4
  4018fe:	4b0a      	ldr	r3, [pc, #40]	; (401928 <xQueueReceive+0x178>)
  401900:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401902:	4b0a      	ldr	r3, [pc, #40]	; (40192c <xQueueReceive+0x17c>)
  401904:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401906:	4620      	mov	r0, r4
  401908:	4b0b      	ldr	r3, [pc, #44]	; (401938 <xQueueReceive+0x188>)
  40190a:	4798      	blx	r3
  40190c:	2800      	cmp	r0, #0
  40190e:	d0b9      	beq.n	401884 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401910:	2000      	movs	r0, #0
  401912:	e7a0      	b.n	401856 <xQueueReceive+0xa6>
  401914:	00402341 	.word	0x00402341
  401918:	004012ed 	.word	0x004012ed
  40191c:	004021f1 	.word	0x004021f1
  401920:	e000ed04 	.word	0xe000ed04
  401924:	00400f31 	.word	0x00400f31
  401928:	00401315 	.word	0x00401315
  40192c:	00401f29 	.word	0x00401f29
  401930:	00401dc5 	.word	0x00401dc5
  401934:	004022a1 	.word	0x004022a1
  401938:	004011c5 	.word	0x004011c5
  40193c:	0040216d 	.word	0x0040216d
  401940:	00400ee5 	.word	0x00400ee5
  401944:	00402289 	.word	0x00402289

00401948 <vQueueAddToRegistry>:
	{
  401948:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40194a:	4b0b      	ldr	r3, [pc, #44]	; (401978 <vQueueAddToRegistry+0x30>)
  40194c:	681b      	ldr	r3, [r3, #0]
  40194e:	b153      	cbz	r3, 401966 <vQueueAddToRegistry+0x1e>
  401950:	2301      	movs	r3, #1
  401952:	4c09      	ldr	r4, [pc, #36]	; (401978 <vQueueAddToRegistry+0x30>)
  401954:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401958:	b132      	cbz	r2, 401968 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40195a:	3301      	adds	r3, #1
  40195c:	2b08      	cmp	r3, #8
  40195e:	d1f9      	bne.n	401954 <vQueueAddToRegistry+0xc>
	}
  401960:	f85d 4b04 	ldr.w	r4, [sp], #4
  401964:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401966:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401968:	4a03      	ldr	r2, [pc, #12]	; (401978 <vQueueAddToRegistry+0x30>)
  40196a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40196e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401972:	6058      	str	r0, [r3, #4]
				break;
  401974:	e7f4      	b.n	401960 <vQueueAddToRegistry+0x18>
  401976:	bf00      	nop
  401978:	20400bd4 	.word	0x20400bd4

0040197c <vQueueWaitForMessageRestricted>:
	{
  40197c:	b570      	push	{r4, r5, r6, lr}
  40197e:	4604      	mov	r4, r0
  401980:	460d      	mov	r5, r1
  401982:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401984:	4b12      	ldr	r3, [pc, #72]	; (4019d0 <vQueueWaitForMessageRestricted+0x54>)
  401986:	4798      	blx	r3
  401988:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40198c:	b25b      	sxtb	r3, r3
  40198e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401992:	d00d      	beq.n	4019b0 <vQueueWaitForMessageRestricted+0x34>
  401994:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401998:	b25b      	sxtb	r3, r3
  40199a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40199e:	d00b      	beq.n	4019b8 <vQueueWaitForMessageRestricted+0x3c>
  4019a0:	4b0c      	ldr	r3, [pc, #48]	; (4019d4 <vQueueWaitForMessageRestricted+0x58>)
  4019a2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4019a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4019a6:	b15b      	cbz	r3, 4019c0 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  4019a8:	4620      	mov	r0, r4
  4019aa:	4b0b      	ldr	r3, [pc, #44]	; (4019d8 <vQueueWaitForMessageRestricted+0x5c>)
  4019ac:	4798      	blx	r3
  4019ae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4019b0:	2300      	movs	r3, #0
  4019b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4019b6:	e7ed      	b.n	401994 <vQueueWaitForMessageRestricted+0x18>
  4019b8:	2300      	movs	r3, #0
  4019ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4019be:	e7ef      	b.n	4019a0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4019c0:	4632      	mov	r2, r6
  4019c2:	4629      	mov	r1, r5
  4019c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019c8:	4b04      	ldr	r3, [pc, #16]	; (4019dc <vQueueWaitForMessageRestricted+0x60>)
  4019ca:	4798      	blx	r3
  4019cc:	e7ec      	b.n	4019a8 <vQueueWaitForMessageRestricted+0x2c>
  4019ce:	bf00      	nop
  4019d0:	00400ee5 	.word	0x00400ee5
  4019d4:	00400f31 	.word	0x00400f31
  4019d8:	00401315 	.word	0x00401315
  4019dc:	004021a9 	.word	0x004021a9

004019e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4019e0:	4b08      	ldr	r3, [pc, #32]	; (401a04 <prvResetNextTaskUnblockTime+0x24>)
  4019e2:	681b      	ldr	r3, [r3, #0]
  4019e4:	681b      	ldr	r3, [r3, #0]
  4019e6:	b13b      	cbz	r3, 4019f8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4019e8:	4b06      	ldr	r3, [pc, #24]	; (401a04 <prvResetNextTaskUnblockTime+0x24>)
  4019ea:	681b      	ldr	r3, [r3, #0]
  4019ec:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4019ee:	68db      	ldr	r3, [r3, #12]
  4019f0:	685a      	ldr	r2, [r3, #4]
  4019f2:	4b05      	ldr	r3, [pc, #20]	; (401a08 <prvResetNextTaskUnblockTime+0x28>)
  4019f4:	601a      	str	r2, [r3, #0]
  4019f6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4019f8:	f04f 32ff 	mov.w	r2, #4294967295
  4019fc:	4b02      	ldr	r3, [pc, #8]	; (401a08 <prvResetNextTaskUnblockTime+0x28>)
  4019fe:	601a      	str	r2, [r3, #0]
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	20400a58 	.word	0x20400a58
  401a08:	20400b08 	.word	0x20400b08

00401a0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401a0c:	b570      	push	{r4, r5, r6, lr}
  401a0e:	4604      	mov	r4, r0
  401a10:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401a12:	4b1c      	ldr	r3, [pc, #112]	; (401a84 <prvAddCurrentTaskToDelayedList+0x78>)
  401a14:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401a16:	4b1c      	ldr	r3, [pc, #112]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a18:	6818      	ldr	r0, [r3, #0]
  401a1a:	3004      	adds	r0, #4
  401a1c:	4b1b      	ldr	r3, [pc, #108]	; (401a8c <prvAddCurrentTaskToDelayedList+0x80>)
  401a1e:	4798      	blx	r3
  401a20:	b948      	cbnz	r0, 401a36 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a22:	4b19      	ldr	r3, [pc, #100]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a24:	681a      	ldr	r2, [r3, #0]
  401a26:	491a      	ldr	r1, [pc, #104]	; (401a90 <prvAddCurrentTaskToDelayedList+0x84>)
  401a28:	680b      	ldr	r3, [r1, #0]
  401a2a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a2c:	2201      	movs	r2, #1
  401a2e:	4082      	lsls	r2, r0
  401a30:	ea23 0302 	bic.w	r3, r3, r2
  401a34:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401a36:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a3a:	d100      	bne.n	401a3e <prvAddCurrentTaskToDelayedList+0x32>
  401a3c:	b99e      	cbnz	r6, 401a66 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401a3e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401a40:	4b11      	ldr	r3, [pc, #68]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401a46:	42a5      	cmp	r5, r4
  401a48:	d814      	bhi.n	401a74 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a4a:	4b12      	ldr	r3, [pc, #72]	; (401a94 <prvAddCurrentTaskToDelayedList+0x88>)
  401a4c:	6818      	ldr	r0, [r3, #0]
  401a4e:	4b0e      	ldr	r3, [pc, #56]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a50:	6819      	ldr	r1, [r3, #0]
  401a52:	3104      	adds	r1, #4
  401a54:	4b10      	ldr	r3, [pc, #64]	; (401a98 <prvAddCurrentTaskToDelayedList+0x8c>)
  401a56:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401a58:	4b10      	ldr	r3, [pc, #64]	; (401a9c <prvAddCurrentTaskToDelayedList+0x90>)
  401a5a:	681b      	ldr	r3, [r3, #0]
  401a5c:	429c      	cmp	r4, r3
  401a5e:	d201      	bcs.n	401a64 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401a60:	4b0e      	ldr	r3, [pc, #56]	; (401a9c <prvAddCurrentTaskToDelayedList+0x90>)
  401a62:	601c      	str	r4, [r3, #0]
  401a64:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a66:	4b08      	ldr	r3, [pc, #32]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a68:	6819      	ldr	r1, [r3, #0]
  401a6a:	3104      	adds	r1, #4
  401a6c:	480c      	ldr	r0, [pc, #48]	; (401aa0 <prvAddCurrentTaskToDelayedList+0x94>)
  401a6e:	4b0d      	ldr	r3, [pc, #52]	; (401aa4 <prvAddCurrentTaskToDelayedList+0x98>)
  401a70:	4798      	blx	r3
  401a72:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a74:	4b0c      	ldr	r3, [pc, #48]	; (401aa8 <prvAddCurrentTaskToDelayedList+0x9c>)
  401a76:	6818      	ldr	r0, [r3, #0]
  401a78:	4b03      	ldr	r3, [pc, #12]	; (401a88 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a7a:	6819      	ldr	r1, [r3, #0]
  401a7c:	3104      	adds	r1, #4
  401a7e:	4b06      	ldr	r3, [pc, #24]	; (401a98 <prvAddCurrentTaskToDelayedList+0x8c>)
  401a80:	4798      	blx	r3
  401a82:	bd70      	pop	{r4, r5, r6, pc}
  401a84:	20400b50 	.word	0x20400b50
  401a88:	20400a54 	.word	0x20400a54
  401a8c:	00400de1 	.word	0x00400de1
  401a90:	20400ad8 	.word	0x20400ad8
  401a94:	20400a58 	.word	0x20400a58
  401a98:	00400dad 	.word	0x00400dad
  401a9c:	20400b08 	.word	0x20400b08
  401aa0:	20400b28 	.word	0x20400b28
  401aa4:	00400d95 	.word	0x00400d95
  401aa8:	20400a5c 	.word	0x20400a5c

00401aac <prvIdleTask>:
{
  401aac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401aae:	4d18      	ldr	r5, [pc, #96]	; (401b10 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401ab0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401b2c <prvIdleTask+0x80>
				taskYIELD();
  401ab4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401b30 <prvIdleTask+0x84>
  401ab8:	e001      	b.n	401abe <prvIdleTask+0x12>
			vApplicationIdleHook();
  401aba:	4b16      	ldr	r3, [pc, #88]	; (401b14 <prvIdleTask+0x68>)
  401abc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401abe:	682b      	ldr	r3, [r5, #0]
  401ac0:	b1c3      	cbz	r3, 401af4 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401ac2:	4f15      	ldr	r7, [pc, #84]	; (401b18 <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401ac4:	4e15      	ldr	r6, [pc, #84]	; (401b1c <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401ac6:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401ac8:	68fb      	ldr	r3, [r7, #12]
  401aca:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401acc:	1d20      	adds	r0, r4, #4
  401ace:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401ad0:	4a13      	ldr	r2, [pc, #76]	; (401b20 <prvIdleTask+0x74>)
  401ad2:	6813      	ldr	r3, [r2, #0]
  401ad4:	3b01      	subs	r3, #1
  401ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401ad8:	682b      	ldr	r3, [r5, #0]
  401ada:	3b01      	subs	r3, #1
  401adc:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401ade:	4b11      	ldr	r3, [pc, #68]	; (401b24 <prvIdleTask+0x78>)
  401ae0:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401ae2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401ae4:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401b34 <prvIdleTask+0x88>
  401ae8:	47d0      	blx	sl
			vPortFree( pxTCB );
  401aea:	4620      	mov	r0, r4
  401aec:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401aee:	682b      	ldr	r3, [r5, #0]
  401af0:	2b00      	cmp	r3, #0
  401af2:	d1e8      	bne.n	401ac6 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401af4:	4b0c      	ldr	r3, [pc, #48]	; (401b28 <prvIdleTask+0x7c>)
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	2b01      	cmp	r3, #1
  401afa:	d9de      	bls.n	401aba <prvIdleTask+0xe>
				taskYIELD();
  401afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401b00:	f8c9 3000 	str.w	r3, [r9]
  401b04:	f3bf 8f4f 	dsb	sy
  401b08:	f3bf 8f6f 	isb	sy
  401b0c:	e7d5      	b.n	401aba <prvIdleTask+0xe>
  401b0e:	bf00      	nop
  401b10:	20400ac8 	.word	0x20400ac8
  401b14:	00402a31 	.word	0x00402a31
  401b18:	20400b3c 	.word	0x20400b3c
  401b1c:	00400de1 	.word	0x00400de1
  401b20:	20400ac4 	.word	0x20400ac4
  401b24:	00400f31 	.word	0x00400f31
  401b28:	20400a60 	.word	0x20400a60
  401b2c:	00400ee5 	.word	0x00400ee5
  401b30:	e000ed04 	.word	0xe000ed04
  401b34:	004011a1 	.word	0x004011a1

00401b38 <xTaskCreate>:
	{
  401b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b3c:	b083      	sub	sp, #12
  401b3e:	4683      	mov	fp, r0
  401b40:	460d      	mov	r5, r1
  401b42:	9301      	str	r3, [sp, #4]
  401b44:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b48:	0096      	lsls	r6, r2, #2
  401b4a:	4630      	mov	r0, r6
  401b4c:	4b60      	ldr	r3, [pc, #384]	; (401cd0 <xTaskCreate+0x198>)
  401b4e:	4798      	blx	r3
			if( pxStack != NULL )
  401b50:	2800      	cmp	r0, #0
  401b52:	f000 808d 	beq.w	401c70 <xTaskCreate+0x138>
  401b56:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401b58:	2058      	movs	r0, #88	; 0x58
  401b5a:	4b5d      	ldr	r3, [pc, #372]	; (401cd0 <xTaskCreate+0x198>)
  401b5c:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401b5e:	4604      	mov	r4, r0
  401b60:	2800      	cmp	r0, #0
  401b62:	f000 8082 	beq.w	401c6a <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  401b66:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401b68:	4632      	mov	r2, r6
  401b6a:	21a5      	movs	r1, #165	; 0xa5
  401b6c:	4638      	mov	r0, r7
  401b6e:	4b59      	ldr	r3, [pc, #356]	; (401cd4 <xTaskCreate+0x19c>)
  401b70:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401b72:	3e04      	subs	r6, #4
  401b74:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b76:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401b78:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401b7c:	782b      	ldrb	r3, [r5, #0]
  401b7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401b82:	782b      	ldrb	r3, [r5, #0]
  401b84:	b163      	cbz	r3, 401ba0 <xTaskCreate+0x68>
  401b86:	462b      	mov	r3, r5
  401b88:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401b8c:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401b90:	7858      	ldrb	r0, [r3, #1]
  401b92:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401b96:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401b9a:	b108      	cbz	r0, 401ba0 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401b9c:	428b      	cmp	r3, r1
  401b9e:	d1f7      	bne.n	401b90 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401ba0:	2700      	movs	r7, #0
  401ba2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401ba8:	2d04      	cmp	r5, #4
  401baa:	bf28      	it	cs
  401bac:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401bae:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401bb0:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401bb2:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401bb4:	f104 0804 	add.w	r8, r4, #4
  401bb8:	4640      	mov	r0, r8
  401bba:	f8df 916c 	ldr.w	r9, [pc, #364]	; 401d28 <xTaskCreate+0x1f0>
  401bbe:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401bc0:	f104 0018 	add.w	r0, r4, #24
  401bc4:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401bc6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401bc8:	f1c5 0505 	rsb	r5, r5, #5
  401bcc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401bce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401bd0:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401bd2:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401bd6:	9a01      	ldr	r2, [sp, #4]
  401bd8:	4659      	mov	r1, fp
  401bda:	4630      	mov	r0, r6
  401bdc:	4b3e      	ldr	r3, [pc, #248]	; (401cd8 <xTaskCreate+0x1a0>)
  401bde:	4798      	blx	r3
  401be0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401be2:	f1ba 0f00 	cmp.w	sl, #0
  401be6:	d001      	beq.n	401bec <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401be8:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401bec:	4b3b      	ldr	r3, [pc, #236]	; (401cdc <xTaskCreate+0x1a4>)
  401bee:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401bf0:	4a3b      	ldr	r2, [pc, #236]	; (401ce0 <xTaskCreate+0x1a8>)
  401bf2:	6813      	ldr	r3, [r2, #0]
  401bf4:	3301      	adds	r3, #1
  401bf6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401bf8:	4b3a      	ldr	r3, [pc, #232]	; (401ce4 <xTaskCreate+0x1ac>)
  401bfa:	681b      	ldr	r3, [r3, #0]
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d03a      	beq.n	401c76 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401c00:	4b39      	ldr	r3, [pc, #228]	; (401ce8 <xTaskCreate+0x1b0>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	b93b      	cbnz	r3, 401c16 <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401c06:	4b37      	ldr	r3, [pc, #220]	; (401ce4 <xTaskCreate+0x1ac>)
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c0e:	429a      	cmp	r2, r3
  401c10:	d801      	bhi.n	401c16 <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401c12:	4b34      	ldr	r3, [pc, #208]	; (401ce4 <xTaskCreate+0x1ac>)
  401c14:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401c16:	4a35      	ldr	r2, [pc, #212]	; (401cec <xTaskCreate+0x1b4>)
  401c18:	6813      	ldr	r3, [r2, #0]
  401c1a:	3301      	adds	r3, #1
  401c1c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401c1e:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401c20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c22:	4a33      	ldr	r2, [pc, #204]	; (401cf0 <xTaskCreate+0x1b8>)
  401c24:	6811      	ldr	r1, [r2, #0]
  401c26:	2301      	movs	r3, #1
  401c28:	4083      	lsls	r3, r0
  401c2a:	430b      	orrs	r3, r1
  401c2c:	6013      	str	r3, [r2, #0]
  401c2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c32:	4641      	mov	r1, r8
  401c34:	4b2f      	ldr	r3, [pc, #188]	; (401cf4 <xTaskCreate+0x1bc>)
  401c36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c3a:	4b2f      	ldr	r3, [pc, #188]	; (401cf8 <xTaskCreate+0x1c0>)
  401c3c:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401c3e:	4b2f      	ldr	r3, [pc, #188]	; (401cfc <xTaskCreate+0x1c4>)
  401c40:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401c42:	4b29      	ldr	r3, [pc, #164]	; (401ce8 <xTaskCreate+0x1b0>)
  401c44:	681b      	ldr	r3, [r3, #0]
  401c46:	2b00      	cmp	r3, #0
  401c48:	d03b      	beq.n	401cc2 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401c4a:	4b26      	ldr	r3, [pc, #152]	; (401ce4 <xTaskCreate+0x1ac>)
  401c4c:	681b      	ldr	r3, [r3, #0]
  401c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c52:	429a      	cmp	r2, r3
  401c54:	d239      	bcs.n	401cca <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  401c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c5a:	4b29      	ldr	r3, [pc, #164]	; (401d00 <xTaskCreate+0x1c8>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401c66:	2001      	movs	r0, #1
  401c68:	e02c      	b.n	401cc4 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  401c6a:	4638      	mov	r0, r7
  401c6c:	4b25      	ldr	r3, [pc, #148]	; (401d04 <xTaskCreate+0x1cc>)
  401c6e:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401c70:	f04f 30ff 	mov.w	r0, #4294967295
  401c74:	e026      	b.n	401cc4 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  401c76:	4b1b      	ldr	r3, [pc, #108]	; (401ce4 <xTaskCreate+0x1ac>)
  401c78:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401c7a:	6813      	ldr	r3, [r2, #0]
  401c7c:	2b01      	cmp	r3, #1
  401c7e:	d1ca      	bne.n	401c16 <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401c80:	4e1c      	ldr	r6, [pc, #112]	; (401cf4 <xTaskCreate+0x1bc>)
  401c82:	4630      	mov	r0, r6
  401c84:	4d20      	ldr	r5, [pc, #128]	; (401d08 <xTaskCreate+0x1d0>)
  401c86:	47a8      	blx	r5
  401c88:	f106 0014 	add.w	r0, r6, #20
  401c8c:	47a8      	blx	r5
  401c8e:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401c92:	47a8      	blx	r5
  401c94:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  401c98:	47a8      	blx	r5
  401c9a:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401c9e:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401ca0:	4f1a      	ldr	r7, [pc, #104]	; (401d0c <xTaskCreate+0x1d4>)
  401ca2:	4638      	mov	r0, r7
  401ca4:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401ca6:	4e1a      	ldr	r6, [pc, #104]	; (401d10 <xTaskCreate+0x1d8>)
  401ca8:	4630      	mov	r0, r6
  401caa:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401cac:	4819      	ldr	r0, [pc, #100]	; (401d14 <xTaskCreate+0x1dc>)
  401cae:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401cb0:	4819      	ldr	r0, [pc, #100]	; (401d18 <xTaskCreate+0x1e0>)
  401cb2:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401cb4:	4819      	ldr	r0, [pc, #100]	; (401d1c <xTaskCreate+0x1e4>)
  401cb6:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401cb8:	4b19      	ldr	r3, [pc, #100]	; (401d20 <xTaskCreate+0x1e8>)
  401cba:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401cbc:	4b19      	ldr	r3, [pc, #100]	; (401d24 <xTaskCreate+0x1ec>)
  401cbe:	601e      	str	r6, [r3, #0]
  401cc0:	e7a9      	b.n	401c16 <xTaskCreate+0xde>
			xReturn = pdPASS;
  401cc2:	2001      	movs	r0, #1
	}
  401cc4:	b003      	add	sp, #12
  401cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401cca:	2001      	movs	r0, #1
		return xReturn;
  401ccc:	e7fa      	b.n	401cc4 <xTaskCreate+0x18c>
  401cce:	bf00      	nop
  401cd0:	00401171 	.word	0x00401171
  401cd4:	004039dd 	.word	0x004039dd
  401cd8:	00400e8d 	.word	0x00400e8d
  401cdc:	00400ee5 	.word	0x00400ee5
  401ce0:	20400ac4 	.word	0x20400ac4
  401ce4:	20400a54 	.word	0x20400a54
  401ce8:	20400b24 	.word	0x20400b24
  401cec:	20400ad4 	.word	0x20400ad4
  401cf0:	20400ad8 	.word	0x20400ad8
  401cf4:	20400a60 	.word	0x20400a60
  401cf8:	00400d95 	.word	0x00400d95
  401cfc:	00400f31 	.word	0x00400f31
  401d00:	e000ed04 	.word	0xe000ed04
  401d04:	004011a1 	.word	0x004011a1
  401d08:	00400d79 	.word	0x00400d79
  401d0c:	20400adc 	.word	0x20400adc
  401d10:	20400af0 	.word	0x20400af0
  401d14:	20400b10 	.word	0x20400b10
  401d18:	20400b3c 	.word	0x20400b3c
  401d1c:	20400b28 	.word	0x20400b28
  401d20:	20400a58 	.word	0x20400a58
  401d24:	20400a5c 	.word	0x20400a5c
  401d28:	00400d8f 	.word	0x00400d8f

00401d2c <vTaskStartScheduler>:
{
  401d2c:	b510      	push	{r4, lr}
  401d2e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401d30:	4b1b      	ldr	r3, [pc, #108]	; (401da0 <vTaskStartScheduler+0x74>)
  401d32:	9301      	str	r3, [sp, #4]
  401d34:	2300      	movs	r3, #0
  401d36:	9300      	str	r3, [sp, #0]
  401d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d3c:	4919      	ldr	r1, [pc, #100]	; (401da4 <vTaskStartScheduler+0x78>)
  401d3e:	481a      	ldr	r0, [pc, #104]	; (401da8 <vTaskStartScheduler+0x7c>)
  401d40:	4c1a      	ldr	r4, [pc, #104]	; (401dac <vTaskStartScheduler+0x80>)
  401d42:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401d44:	2801      	cmp	r0, #1
  401d46:	d004      	beq.n	401d52 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401d48:	f1b0 3fff 	cmp.w	r0, #4294967295
  401d4c:	d01c      	beq.n	401d88 <vTaskStartScheduler+0x5c>
}
  401d4e:	b002      	add	sp, #8
  401d50:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401d52:	4b17      	ldr	r3, [pc, #92]	; (401db0 <vTaskStartScheduler+0x84>)
  401d54:	4798      	blx	r3
	if( xReturn == pdPASS )
  401d56:	2801      	cmp	r0, #1
  401d58:	d1f6      	bne.n	401d48 <vTaskStartScheduler+0x1c>
  401d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d5e:	b672      	cpsid	i
  401d60:	f383 8811 	msr	BASEPRI, r3
  401d64:	f3bf 8f6f 	isb	sy
  401d68:	f3bf 8f4f 	dsb	sy
  401d6c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401d6e:	f04f 32ff 	mov.w	r2, #4294967295
  401d72:	4b10      	ldr	r3, [pc, #64]	; (401db4 <vTaskStartScheduler+0x88>)
  401d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401d76:	2201      	movs	r2, #1
  401d78:	4b0f      	ldr	r3, [pc, #60]	; (401db8 <vTaskStartScheduler+0x8c>)
  401d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401d7c:	2200      	movs	r2, #0
  401d7e:	4b0f      	ldr	r3, [pc, #60]	; (401dbc <vTaskStartScheduler+0x90>)
  401d80:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401d82:	4b0f      	ldr	r3, [pc, #60]	; (401dc0 <vTaskStartScheduler+0x94>)
  401d84:	4798      	blx	r3
  401d86:	e7e2      	b.n	401d4e <vTaskStartScheduler+0x22>
  401d88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8c:	b672      	cpsid	i
  401d8e:	f383 8811 	msr	BASEPRI, r3
  401d92:	f3bf 8f6f 	isb	sy
  401d96:	f3bf 8f4f 	dsb	sy
  401d9a:	b662      	cpsie	i
  401d9c:	e7fe      	b.n	401d9c <vTaskStartScheduler+0x70>
  401d9e:	bf00      	nop
  401da0:	20400b04 	.word	0x20400b04
  401da4:	00408790 	.word	0x00408790
  401da8:	00401aad 	.word	0x00401aad
  401dac:	00401b39 	.word	0x00401b39
  401db0:	004024d9 	.word	0x004024d9
  401db4:	20400b08 	.word	0x20400b08
  401db8:	20400b24 	.word	0x20400b24
  401dbc:	20400b50 	.word	0x20400b50
  401dc0:	00401021 	.word	0x00401021

00401dc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401dc4:	4a02      	ldr	r2, [pc, #8]	; (401dd0 <vTaskSuspendAll+0xc>)
  401dc6:	6813      	ldr	r3, [r2, #0]
  401dc8:	3301      	adds	r3, #1
  401dca:	6013      	str	r3, [r2, #0]
  401dcc:	4770      	bx	lr
  401dce:	bf00      	nop
  401dd0:	20400ad0 	.word	0x20400ad0

00401dd4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401dd4:	4b01      	ldr	r3, [pc, #4]	; (401ddc <xTaskGetTickCount+0x8>)
  401dd6:	6818      	ldr	r0, [r3, #0]
}
  401dd8:	4770      	bx	lr
  401dda:	bf00      	nop
  401ddc:	20400b50 	.word	0x20400b50

00401de0 <xTaskIncrementTick>:
{
  401de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401de4:	4b41      	ldr	r3, [pc, #260]	; (401eec <xTaskIncrementTick+0x10c>)
  401de6:	681b      	ldr	r3, [r3, #0]
  401de8:	2b00      	cmp	r3, #0
  401dea:	d177      	bne.n	401edc <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401dec:	4b40      	ldr	r3, [pc, #256]	; (401ef0 <xTaskIncrementTick+0x110>)
  401dee:	681d      	ldr	r5, [r3, #0]
  401df0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  401df2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401df4:	b9d5      	cbnz	r5, 401e2c <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  401df6:	4b3f      	ldr	r3, [pc, #252]	; (401ef4 <xTaskIncrementTick+0x114>)
  401df8:	681b      	ldr	r3, [r3, #0]
  401dfa:	681b      	ldr	r3, [r3, #0]
  401dfc:	b153      	cbz	r3, 401e14 <xTaskIncrementTick+0x34>
  401dfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e02:	b672      	cpsid	i
  401e04:	f383 8811 	msr	BASEPRI, r3
  401e08:	f3bf 8f6f 	isb	sy
  401e0c:	f3bf 8f4f 	dsb	sy
  401e10:	b662      	cpsie	i
  401e12:	e7fe      	b.n	401e12 <xTaskIncrementTick+0x32>
  401e14:	4a37      	ldr	r2, [pc, #220]	; (401ef4 <xTaskIncrementTick+0x114>)
  401e16:	6811      	ldr	r1, [r2, #0]
  401e18:	4b37      	ldr	r3, [pc, #220]	; (401ef8 <xTaskIncrementTick+0x118>)
  401e1a:	6818      	ldr	r0, [r3, #0]
  401e1c:	6010      	str	r0, [r2, #0]
  401e1e:	6019      	str	r1, [r3, #0]
  401e20:	4a36      	ldr	r2, [pc, #216]	; (401efc <xTaskIncrementTick+0x11c>)
  401e22:	6813      	ldr	r3, [r2, #0]
  401e24:	3301      	adds	r3, #1
  401e26:	6013      	str	r3, [r2, #0]
  401e28:	4b35      	ldr	r3, [pc, #212]	; (401f00 <xTaskIncrementTick+0x120>)
  401e2a:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  401e2c:	4b35      	ldr	r3, [pc, #212]	; (401f04 <xTaskIncrementTick+0x124>)
  401e2e:	681b      	ldr	r3, [r3, #0]
  401e30:	429d      	cmp	r5, r3
  401e32:	d218      	bcs.n	401e66 <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  401e34:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401e36:	4b34      	ldr	r3, [pc, #208]	; (401f08 <xTaskIncrementTick+0x128>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401e3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e40:	009b      	lsls	r3, r3, #2
  401e42:	4a32      	ldr	r2, [pc, #200]	; (401f0c <xTaskIncrementTick+0x12c>)
  401e44:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  401e46:	2b02      	cmp	r3, #2
  401e48:	bf28      	it	cs
  401e4a:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401e4c:	4b30      	ldr	r3, [pc, #192]	; (401f10 <xTaskIncrementTick+0x130>)
  401e4e:	681b      	ldr	r3, [r3, #0]
  401e50:	b90b      	cbnz	r3, 401e56 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  401e52:	4b30      	ldr	r3, [pc, #192]	; (401f14 <xTaskIncrementTick+0x134>)
  401e54:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401e56:	4b30      	ldr	r3, [pc, #192]	; (401f18 <xTaskIncrementTick+0x138>)
  401e58:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401e5a:	2b00      	cmp	r3, #0
}
  401e5c:	bf0c      	ite	eq
  401e5e:	4620      	moveq	r0, r4
  401e60:	2001      	movne	r0, #1
  401e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e66:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e68:	f8df 9088 	ldr.w	r9, [pc, #136]	; 401ef4 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401e6c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 401f24 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  401e70:	4f2a      	ldr	r7, [pc, #168]	; (401f1c <xTaskIncrementTick+0x13c>)
  401e72:	e01f      	b.n	401eb4 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e74:	f04f 32ff 	mov.w	r2, #4294967295
  401e78:	4b22      	ldr	r3, [pc, #136]	; (401f04 <xTaskIncrementTick+0x124>)
  401e7a:	601a      	str	r2, [r3, #0]
					break;
  401e7c:	e7db      	b.n	401e36 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  401e7e:	4a21      	ldr	r2, [pc, #132]	; (401f04 <xTaskIncrementTick+0x124>)
  401e80:	6013      	str	r3, [r2, #0]
						break;
  401e82:	e7d8      	b.n	401e36 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e84:	f106 0018 	add.w	r0, r6, #24
  401e88:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401e8a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  401e8c:	683a      	ldr	r2, [r7, #0]
  401e8e:	2301      	movs	r3, #1
  401e90:	4083      	lsls	r3, r0
  401e92:	4313      	orrs	r3, r2
  401e94:	603b      	str	r3, [r7, #0]
  401e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e9a:	4651      	mov	r1, sl
  401e9c:	4b1b      	ldr	r3, [pc, #108]	; (401f0c <xTaskIncrementTick+0x12c>)
  401e9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ea2:	4b1f      	ldr	r3, [pc, #124]	; (401f20 <xTaskIncrementTick+0x140>)
  401ea4:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401ea6:	4b18      	ldr	r3, [pc, #96]	; (401f08 <xTaskIncrementTick+0x128>)
  401ea8:	681b      	ldr	r3, [r3, #0]
  401eaa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  401eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  401eae:	429a      	cmp	r2, r3
  401eb0:	bf28      	it	cs
  401eb2:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401eb4:	f8d9 3000 	ldr.w	r3, [r9]
  401eb8:	681b      	ldr	r3, [r3, #0]
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d0da      	beq.n	401e74 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ebe:	f8d9 3000 	ldr.w	r3, [r9]
  401ec2:	68db      	ldr	r3, [r3, #12]
  401ec4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401ec6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  401ec8:	429d      	cmp	r5, r3
  401eca:	d3d8      	bcc.n	401e7e <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401ecc:	f106 0a04 	add.w	sl, r6, #4
  401ed0:	4650      	mov	r0, sl
  401ed2:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401ed4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  401ed6:	2b00      	cmp	r3, #0
  401ed8:	d1d4      	bne.n	401e84 <xTaskIncrementTick+0xa4>
  401eda:	e7d6      	b.n	401e8a <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  401edc:	4a0c      	ldr	r2, [pc, #48]	; (401f10 <xTaskIncrementTick+0x130>)
  401ede:	6813      	ldr	r3, [r2, #0]
  401ee0:	3301      	adds	r3, #1
  401ee2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401ee4:	4b0b      	ldr	r3, [pc, #44]	; (401f14 <xTaskIncrementTick+0x134>)
  401ee6:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401ee8:	2400      	movs	r4, #0
  401eea:	e7b4      	b.n	401e56 <xTaskIncrementTick+0x76>
  401eec:	20400ad0 	.word	0x20400ad0
  401ef0:	20400b50 	.word	0x20400b50
  401ef4:	20400a58 	.word	0x20400a58
  401ef8:	20400a5c 	.word	0x20400a5c
  401efc:	20400b0c 	.word	0x20400b0c
  401f00:	004019e1 	.word	0x004019e1
  401f04:	20400b08 	.word	0x20400b08
  401f08:	20400a54 	.word	0x20400a54
  401f0c:	20400a60 	.word	0x20400a60
  401f10:	20400acc 	.word	0x20400acc
  401f14:	00402a33 	.word	0x00402a33
  401f18:	20400b54 	.word	0x20400b54
  401f1c:	20400ad8 	.word	0x20400ad8
  401f20:	00400d95 	.word	0x00400d95
  401f24:	00400de1 	.word	0x00400de1

00401f28 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  401f28:	4b36      	ldr	r3, [pc, #216]	; (402004 <xTaskResumeAll+0xdc>)
  401f2a:	681b      	ldr	r3, [r3, #0]
  401f2c:	b953      	cbnz	r3, 401f44 <xTaskResumeAll+0x1c>
  401f2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f32:	b672      	cpsid	i
  401f34:	f383 8811 	msr	BASEPRI, r3
  401f38:	f3bf 8f6f 	isb	sy
  401f3c:	f3bf 8f4f 	dsb	sy
  401f40:	b662      	cpsie	i
  401f42:	e7fe      	b.n	401f42 <xTaskResumeAll+0x1a>
{
  401f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  401f48:	4b2f      	ldr	r3, [pc, #188]	; (402008 <xTaskResumeAll+0xe0>)
  401f4a:	4798      	blx	r3
		--uxSchedulerSuspended;
  401f4c:	4b2d      	ldr	r3, [pc, #180]	; (402004 <xTaskResumeAll+0xdc>)
  401f4e:	681a      	ldr	r2, [r3, #0]
  401f50:	3a01      	subs	r2, #1
  401f52:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f54:	681b      	ldr	r3, [r3, #0]
  401f56:	2b00      	cmp	r3, #0
  401f58:	d150      	bne.n	401ffc <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401f5a:	4b2c      	ldr	r3, [pc, #176]	; (40200c <xTaskResumeAll+0xe4>)
  401f5c:	681b      	ldr	r3, [r3, #0]
  401f5e:	b92b      	cbnz	r3, 401f6c <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  401f60:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401f62:	4b2b      	ldr	r3, [pc, #172]	; (402010 <xTaskResumeAll+0xe8>)
  401f64:	4798      	blx	r3
}
  401f66:	4620      	mov	r0, r4
  401f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f6c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f6e:	4f29      	ldr	r7, [pc, #164]	; (402014 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f70:	4e29      	ldr	r6, [pc, #164]	; (402018 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  401f72:	4d2a      	ldr	r5, [pc, #168]	; (40201c <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f74:	683b      	ldr	r3, [r7, #0]
  401f76:	b303      	cbz	r3, 401fba <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401f78:	68fb      	ldr	r3, [r7, #12]
  401f7a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f7c:	f104 0018 	add.w	r0, r4, #24
  401f80:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f82:	f104 0804 	add.w	r8, r4, #4
  401f86:	4640      	mov	r0, r8
  401f88:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401f8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f8c:	682a      	ldr	r2, [r5, #0]
  401f8e:	2301      	movs	r3, #1
  401f90:	4083      	lsls	r3, r0
  401f92:	4313      	orrs	r3, r2
  401f94:	602b      	str	r3, [r5, #0]
  401f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f9a:	4641      	mov	r1, r8
  401f9c:	4b20      	ldr	r3, [pc, #128]	; (402020 <xTaskResumeAll+0xf8>)
  401f9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401fa2:	4b20      	ldr	r3, [pc, #128]	; (402024 <xTaskResumeAll+0xfc>)
  401fa4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401fa6:	4b20      	ldr	r3, [pc, #128]	; (402028 <xTaskResumeAll+0x100>)
  401fa8:	681b      	ldr	r3, [r3, #0]
  401faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fae:	429a      	cmp	r2, r3
  401fb0:	d3e0      	bcc.n	401f74 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  401fb2:	2201      	movs	r2, #1
  401fb4:	4b1d      	ldr	r3, [pc, #116]	; (40202c <xTaskResumeAll+0x104>)
  401fb6:	601a      	str	r2, [r3, #0]
  401fb8:	e7dc      	b.n	401f74 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  401fba:	b10c      	cbz	r4, 401fc0 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  401fbc:	4b1c      	ldr	r3, [pc, #112]	; (402030 <xTaskResumeAll+0x108>)
  401fbe:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401fc0:	4b1c      	ldr	r3, [pc, #112]	; (402034 <xTaskResumeAll+0x10c>)
  401fc2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401fc4:	b16c      	cbz	r4, 401fe2 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  401fc6:	4f1c      	ldr	r7, [pc, #112]	; (402038 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  401fc8:	4e18      	ldr	r6, [pc, #96]	; (40202c <xTaskResumeAll+0x104>)
  401fca:	2501      	movs	r5, #1
  401fcc:	e001      	b.n	401fd2 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401fce:	3c01      	subs	r4, #1
  401fd0:	d004      	beq.n	401fdc <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  401fd2:	47b8      	blx	r7
  401fd4:	2800      	cmp	r0, #0
  401fd6:	d0fa      	beq.n	401fce <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  401fd8:	6035      	str	r5, [r6, #0]
  401fda:	e7f8      	b.n	401fce <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  401fdc:	2200      	movs	r2, #0
  401fde:	4b15      	ldr	r3, [pc, #84]	; (402034 <xTaskResumeAll+0x10c>)
  401fe0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  401fe2:	4b12      	ldr	r3, [pc, #72]	; (40202c <xTaskResumeAll+0x104>)
  401fe4:	681b      	ldr	r3, [r3, #0]
  401fe6:	b15b      	cbz	r3, 402000 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  401fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fec:	4b13      	ldr	r3, [pc, #76]	; (40203c <xTaskResumeAll+0x114>)
  401fee:	601a      	str	r2, [r3, #0]
  401ff0:	f3bf 8f4f 	dsb	sy
  401ff4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401ff8:	2401      	movs	r4, #1
  401ffa:	e7b2      	b.n	401f62 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  401ffc:	2400      	movs	r4, #0
  401ffe:	e7b0      	b.n	401f62 <xTaskResumeAll+0x3a>
  402000:	2400      	movs	r4, #0
  402002:	e7ae      	b.n	401f62 <xTaskResumeAll+0x3a>
  402004:	20400ad0 	.word	0x20400ad0
  402008:	00400ee5 	.word	0x00400ee5
  40200c:	20400ac4 	.word	0x20400ac4
  402010:	00400f31 	.word	0x00400f31
  402014:	20400b10 	.word	0x20400b10
  402018:	00400de1 	.word	0x00400de1
  40201c:	20400ad8 	.word	0x20400ad8
  402020:	20400a60 	.word	0x20400a60
  402024:	00400d95 	.word	0x00400d95
  402028:	20400a54 	.word	0x20400a54
  40202c:	20400b54 	.word	0x20400b54
  402030:	004019e1 	.word	0x004019e1
  402034:	20400acc 	.word	0x20400acc
  402038:	00401de1 	.word	0x00401de1
  40203c:	e000ed04 	.word	0xe000ed04

00402040 <vTaskDelay>:
	{
  402040:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402042:	b1b8      	cbz	r0, 402074 <vTaskDelay+0x34>
  402044:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402046:	4b10      	ldr	r3, [pc, #64]	; (402088 <vTaskDelay+0x48>)
  402048:	681b      	ldr	r3, [r3, #0]
  40204a:	b153      	cbz	r3, 402062 <vTaskDelay+0x22>
  40204c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402050:	b672      	cpsid	i
  402052:	f383 8811 	msr	BASEPRI, r3
  402056:	f3bf 8f6f 	isb	sy
  40205a:	f3bf 8f4f 	dsb	sy
  40205e:	b662      	cpsie	i
  402060:	e7fe      	b.n	402060 <vTaskDelay+0x20>
			vTaskSuspendAll();
  402062:	4b0a      	ldr	r3, [pc, #40]	; (40208c <vTaskDelay+0x4c>)
  402064:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  402066:	2100      	movs	r1, #0
  402068:	4620      	mov	r0, r4
  40206a:	4b09      	ldr	r3, [pc, #36]	; (402090 <vTaskDelay+0x50>)
  40206c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40206e:	4b09      	ldr	r3, [pc, #36]	; (402094 <vTaskDelay+0x54>)
  402070:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402072:	b938      	cbnz	r0, 402084 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  402074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402078:	4b07      	ldr	r3, [pc, #28]	; (402098 <vTaskDelay+0x58>)
  40207a:	601a      	str	r2, [r3, #0]
  40207c:	f3bf 8f4f 	dsb	sy
  402080:	f3bf 8f6f 	isb	sy
  402084:	bd10      	pop	{r4, pc}
  402086:	bf00      	nop
  402088:	20400ad0 	.word	0x20400ad0
  40208c:	00401dc5 	.word	0x00401dc5
  402090:	00401a0d 	.word	0x00401a0d
  402094:	00401f29 	.word	0x00401f29
  402098:	e000ed04 	.word	0xe000ed04

0040209c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40209c:	4b2d      	ldr	r3, [pc, #180]	; (402154 <vTaskSwitchContext+0xb8>)
  40209e:	681b      	ldr	r3, [r3, #0]
  4020a0:	2b00      	cmp	r3, #0
  4020a2:	d12c      	bne.n	4020fe <vTaskSwitchContext+0x62>
{
  4020a4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4020a6:	2200      	movs	r2, #0
  4020a8:	4b2b      	ldr	r3, [pc, #172]	; (402158 <vTaskSwitchContext+0xbc>)
  4020aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4020ac:	4b2b      	ldr	r3, [pc, #172]	; (40215c <vTaskSwitchContext+0xc0>)
  4020ae:	681b      	ldr	r3, [r3, #0]
  4020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020b2:	681a      	ldr	r2, [r3, #0]
  4020b4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020b8:	d103      	bne.n	4020c2 <vTaskSwitchContext+0x26>
  4020ba:	685a      	ldr	r2, [r3, #4]
  4020bc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020c0:	d021      	beq.n	402106 <vTaskSwitchContext+0x6a>
  4020c2:	4b26      	ldr	r3, [pc, #152]	; (40215c <vTaskSwitchContext+0xc0>)
  4020c4:	6818      	ldr	r0, [r3, #0]
  4020c6:	6819      	ldr	r1, [r3, #0]
  4020c8:	3134      	adds	r1, #52	; 0x34
  4020ca:	4b25      	ldr	r3, [pc, #148]	; (402160 <vTaskSwitchContext+0xc4>)
  4020cc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020ce:	4b25      	ldr	r3, [pc, #148]	; (402164 <vTaskSwitchContext+0xc8>)
  4020d0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4020d2:	fab3 f383 	clz	r3, r3
  4020d6:	b2db      	uxtb	r3, r3
  4020d8:	f1c3 031f 	rsb	r3, r3, #31
  4020dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4020e0:	0092      	lsls	r2, r2, #2
  4020e2:	4921      	ldr	r1, [pc, #132]	; (402168 <vTaskSwitchContext+0xcc>)
  4020e4:	588a      	ldr	r2, [r1, r2]
  4020e6:	b9ba      	cbnz	r2, 402118 <vTaskSwitchContext+0x7c>
	__asm volatile
  4020e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ec:	b672      	cpsid	i
  4020ee:	f383 8811 	msr	BASEPRI, r3
  4020f2:	f3bf 8f6f 	isb	sy
  4020f6:	f3bf 8f4f 	dsb	sy
  4020fa:	b662      	cpsie	i
  4020fc:	e7fe      	b.n	4020fc <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4020fe:	2201      	movs	r2, #1
  402100:	4b15      	ldr	r3, [pc, #84]	; (402158 <vTaskSwitchContext+0xbc>)
  402102:	601a      	str	r2, [r3, #0]
  402104:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402106:	689a      	ldr	r2, [r3, #8]
  402108:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40210c:	d1d9      	bne.n	4020c2 <vTaskSwitchContext+0x26>
  40210e:	68db      	ldr	r3, [r3, #12]
  402110:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402114:	d1d5      	bne.n	4020c2 <vTaskSwitchContext+0x26>
  402116:	e7da      	b.n	4020ce <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402118:	4a13      	ldr	r2, [pc, #76]	; (402168 <vTaskSwitchContext+0xcc>)
  40211a:	0099      	lsls	r1, r3, #2
  40211c:	18c8      	adds	r0, r1, r3
  40211e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402122:	6844      	ldr	r4, [r0, #4]
  402124:	6864      	ldr	r4, [r4, #4]
  402126:	6044      	str	r4, [r0, #4]
  402128:	4419      	add	r1, r3
  40212a:	4602      	mov	r2, r0
  40212c:	3208      	adds	r2, #8
  40212e:	4294      	cmp	r4, r2
  402130:	d009      	beq.n	402146 <vTaskSwitchContext+0xaa>
  402132:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402136:	4a0c      	ldr	r2, [pc, #48]	; (402168 <vTaskSwitchContext+0xcc>)
  402138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40213c:	685b      	ldr	r3, [r3, #4]
  40213e:	68da      	ldr	r2, [r3, #12]
  402140:	4b06      	ldr	r3, [pc, #24]	; (40215c <vTaskSwitchContext+0xc0>)
  402142:	601a      	str	r2, [r3, #0]
  402144:	bd10      	pop	{r4, pc}
  402146:	6860      	ldr	r0, [r4, #4]
  402148:	4a07      	ldr	r2, [pc, #28]	; (402168 <vTaskSwitchContext+0xcc>)
  40214a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40214e:	6050      	str	r0, [r2, #4]
  402150:	e7ef      	b.n	402132 <vTaskSwitchContext+0x96>
  402152:	bf00      	nop
  402154:	20400ad0 	.word	0x20400ad0
  402158:	20400b54 	.word	0x20400b54
  40215c:	20400a54 	.word	0x20400a54
  402160:	00402a19 	.word	0x00402a19
  402164:	20400ad8 	.word	0x20400ad8
  402168:	20400a60 	.word	0x20400a60

0040216c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  40216c:	b950      	cbnz	r0, 402184 <vTaskPlaceOnEventList+0x18>
  40216e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402172:	b672      	cpsid	i
  402174:	f383 8811 	msr	BASEPRI, r3
  402178:	f3bf 8f6f 	isb	sy
  40217c:	f3bf 8f4f 	dsb	sy
  402180:	b662      	cpsie	i
  402182:	e7fe      	b.n	402182 <vTaskPlaceOnEventList+0x16>
{
  402184:	b510      	push	{r4, lr}
  402186:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402188:	4b04      	ldr	r3, [pc, #16]	; (40219c <vTaskPlaceOnEventList+0x30>)
  40218a:	6819      	ldr	r1, [r3, #0]
  40218c:	3118      	adds	r1, #24
  40218e:	4b04      	ldr	r3, [pc, #16]	; (4021a0 <vTaskPlaceOnEventList+0x34>)
  402190:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402192:	2101      	movs	r1, #1
  402194:	4620      	mov	r0, r4
  402196:	4b03      	ldr	r3, [pc, #12]	; (4021a4 <vTaskPlaceOnEventList+0x38>)
  402198:	4798      	blx	r3
  40219a:	bd10      	pop	{r4, pc}
  40219c:	20400a54 	.word	0x20400a54
  4021a0:	00400dad 	.word	0x00400dad
  4021a4:	00401a0d 	.word	0x00401a0d

004021a8 <vTaskPlaceOnEventListRestricted>:
	{
  4021a8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  4021aa:	b178      	cbz	r0, 4021cc <vTaskPlaceOnEventListRestricted+0x24>
  4021ac:	4614      	mov	r4, r2
  4021ae:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4021b0:	4b0c      	ldr	r3, [pc, #48]	; (4021e4 <vTaskPlaceOnEventListRestricted+0x3c>)
  4021b2:	6819      	ldr	r1, [r3, #0]
  4021b4:	3118      	adds	r1, #24
  4021b6:	4b0c      	ldr	r3, [pc, #48]	; (4021e8 <vTaskPlaceOnEventListRestricted+0x40>)
  4021b8:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  4021ba:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  4021bc:	4621      	mov	r1, r4
  4021be:	bf0c      	ite	eq
  4021c0:	4628      	moveq	r0, r5
  4021c2:	f04f 30ff 	movne.w	r0, #4294967295
  4021c6:	4b09      	ldr	r3, [pc, #36]	; (4021ec <vTaskPlaceOnEventListRestricted+0x44>)
  4021c8:	4798      	blx	r3
  4021ca:	bd38      	pop	{r3, r4, r5, pc}
  4021cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d0:	b672      	cpsid	i
  4021d2:	f383 8811 	msr	BASEPRI, r3
  4021d6:	f3bf 8f6f 	isb	sy
  4021da:	f3bf 8f4f 	dsb	sy
  4021de:	b662      	cpsie	i
  4021e0:	e7fe      	b.n	4021e0 <vTaskPlaceOnEventListRestricted+0x38>
  4021e2:	bf00      	nop
  4021e4:	20400a54 	.word	0x20400a54
  4021e8:	00400d95 	.word	0x00400d95
  4021ec:	00401a0d 	.word	0x00401a0d

004021f0 <xTaskRemoveFromEventList>:
{
  4021f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4021f2:	68c3      	ldr	r3, [r0, #12]
  4021f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4021f6:	b324      	cbz	r4, 402242 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4021f8:	f104 0518 	add.w	r5, r4, #24
  4021fc:	4628      	mov	r0, r5
  4021fe:	4b1a      	ldr	r3, [pc, #104]	; (402268 <xTaskRemoveFromEventList+0x78>)
  402200:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402202:	4b1a      	ldr	r3, [pc, #104]	; (40226c <xTaskRemoveFromEventList+0x7c>)
  402204:	681b      	ldr	r3, [r3, #0]
  402206:	bb3b      	cbnz	r3, 402258 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  402208:	1d25      	adds	r5, r4, #4
  40220a:	4628      	mov	r0, r5
  40220c:	4b16      	ldr	r3, [pc, #88]	; (402268 <xTaskRemoveFromEventList+0x78>)
  40220e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402210:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402212:	4a17      	ldr	r2, [pc, #92]	; (402270 <xTaskRemoveFromEventList+0x80>)
  402214:	6811      	ldr	r1, [r2, #0]
  402216:	2301      	movs	r3, #1
  402218:	4083      	lsls	r3, r0
  40221a:	430b      	orrs	r3, r1
  40221c:	6013      	str	r3, [r2, #0]
  40221e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402222:	4629      	mov	r1, r5
  402224:	4b13      	ldr	r3, [pc, #76]	; (402274 <xTaskRemoveFromEventList+0x84>)
  402226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40222a:	4b13      	ldr	r3, [pc, #76]	; (402278 <xTaskRemoveFromEventList+0x88>)
  40222c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40222e:	4b13      	ldr	r3, [pc, #76]	; (40227c <xTaskRemoveFromEventList+0x8c>)
  402230:	681b      	ldr	r3, [r3, #0]
  402232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402236:	429a      	cmp	r2, r3
  402238:	d913      	bls.n	402262 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40223a:	2001      	movs	r0, #1
  40223c:	4b10      	ldr	r3, [pc, #64]	; (402280 <xTaskRemoveFromEventList+0x90>)
  40223e:	6018      	str	r0, [r3, #0]
  402240:	bd38      	pop	{r3, r4, r5, pc}
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
  402256:	e7fe      	b.n	402256 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402258:	4629      	mov	r1, r5
  40225a:	480a      	ldr	r0, [pc, #40]	; (402284 <xTaskRemoveFromEventList+0x94>)
  40225c:	4b06      	ldr	r3, [pc, #24]	; (402278 <xTaskRemoveFromEventList+0x88>)
  40225e:	4798      	blx	r3
  402260:	e7e5      	b.n	40222e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402262:	2000      	movs	r0, #0
}
  402264:	bd38      	pop	{r3, r4, r5, pc}
  402266:	bf00      	nop
  402268:	00400de1 	.word	0x00400de1
  40226c:	20400ad0 	.word	0x20400ad0
  402270:	20400ad8 	.word	0x20400ad8
  402274:	20400a60 	.word	0x20400a60
  402278:	00400d95 	.word	0x00400d95
  40227c:	20400a54 	.word	0x20400a54
  402280:	20400b54 	.word	0x20400b54
  402284:	20400b10 	.word	0x20400b10

00402288 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402288:	4b03      	ldr	r3, [pc, #12]	; (402298 <vTaskInternalSetTimeOutState+0x10>)
  40228a:	681b      	ldr	r3, [r3, #0]
  40228c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40228e:	4b03      	ldr	r3, [pc, #12]	; (40229c <vTaskInternalSetTimeOutState+0x14>)
  402290:	681b      	ldr	r3, [r3, #0]
  402292:	6043      	str	r3, [r0, #4]
  402294:	4770      	bx	lr
  402296:	bf00      	nop
  402298:	20400b0c 	.word	0x20400b0c
  40229c:	20400b50 	.word	0x20400b50

004022a0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  4022a0:	b1a8      	cbz	r0, 4022ce <xTaskCheckForTimeOut+0x2e>
{
  4022a2:	b570      	push	{r4, r5, r6, lr}
  4022a4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  4022a6:	b1e9      	cbz	r1, 4022e4 <xTaskCheckForTimeOut+0x44>
  4022a8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  4022aa:	4b1d      	ldr	r3, [pc, #116]	; (402320 <xTaskCheckForTimeOut+0x80>)
  4022ac:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4022ae:	4b1d      	ldr	r3, [pc, #116]	; (402324 <xTaskCheckForTimeOut+0x84>)
  4022b0:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4022b2:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  4022b4:	6823      	ldr	r3, [r4, #0]
  4022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022ba:	d02f      	beq.n	40231c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4022bc:	481a      	ldr	r0, [pc, #104]	; (402328 <xTaskCheckForTimeOut+0x88>)
  4022be:	6800      	ldr	r0, [r0, #0]
  4022c0:	682e      	ldr	r6, [r5, #0]
  4022c2:	4286      	cmp	r6, r0
  4022c4:	d019      	beq.n	4022fa <xTaskCheckForTimeOut+0x5a>
  4022c6:	428a      	cmp	r2, r1
  4022c8:	d317      	bcc.n	4022fa <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  4022ca:	2401      	movs	r4, #1
  4022cc:	e01b      	b.n	402306 <xTaskCheckForTimeOut+0x66>
  4022ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022d2:	b672      	cpsid	i
  4022d4:	f383 8811 	msr	BASEPRI, r3
  4022d8:	f3bf 8f6f 	isb	sy
  4022dc:	f3bf 8f4f 	dsb	sy
  4022e0:	b662      	cpsie	i
  4022e2:	e7fe      	b.n	4022e2 <xTaskCheckForTimeOut+0x42>
  4022e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e8:	b672      	cpsid	i
  4022ea:	f383 8811 	msr	BASEPRI, r3
  4022ee:	f3bf 8f6f 	isb	sy
  4022f2:	f3bf 8f4f 	dsb	sy
  4022f6:	b662      	cpsie	i
  4022f8:	e7fe      	b.n	4022f8 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4022fa:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4022fc:	429a      	cmp	r2, r3
  4022fe:	d306      	bcc.n	40230e <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  402300:	2300      	movs	r3, #0
  402302:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  402304:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  402306:	4b09      	ldr	r3, [pc, #36]	; (40232c <xTaskCheckForTimeOut+0x8c>)
  402308:	4798      	blx	r3
}
  40230a:	4620      	mov	r0, r4
  40230c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  40230e:	1a9b      	subs	r3, r3, r2
  402310:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  402312:	4628      	mov	r0, r5
  402314:	4b06      	ldr	r3, [pc, #24]	; (402330 <xTaskCheckForTimeOut+0x90>)
  402316:	4798      	blx	r3
			xReturn = pdFALSE;
  402318:	2400      	movs	r4, #0
  40231a:	e7f4      	b.n	402306 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  40231c:	2400      	movs	r4, #0
  40231e:	e7f2      	b.n	402306 <xTaskCheckForTimeOut+0x66>
  402320:	00400ee5 	.word	0x00400ee5
  402324:	20400b50 	.word	0x20400b50
  402328:	20400b0c 	.word	0x20400b0c
  40232c:	00400f31 	.word	0x00400f31
  402330:	00402289 	.word	0x00402289

00402334 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402334:	2201      	movs	r2, #1
  402336:	4b01      	ldr	r3, [pc, #4]	; (40233c <vTaskMissedYield+0x8>)
  402338:	601a      	str	r2, [r3, #0]
  40233a:	4770      	bx	lr
  40233c:	20400b54 	.word	0x20400b54

00402340 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402340:	4b05      	ldr	r3, [pc, #20]	; (402358 <xTaskGetSchedulerState+0x18>)
  402342:	681b      	ldr	r3, [r3, #0]
  402344:	b133      	cbz	r3, 402354 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402346:	4b05      	ldr	r3, [pc, #20]	; (40235c <xTaskGetSchedulerState+0x1c>)
  402348:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  40234a:	2b00      	cmp	r3, #0
  40234c:	bf0c      	ite	eq
  40234e:	2002      	moveq	r0, #2
  402350:	2000      	movne	r0, #0
  402352:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402354:	2001      	movs	r0, #1
	}
  402356:	4770      	bx	lr
  402358:	20400b24 	.word	0x20400b24
  40235c:	20400ad0 	.word	0x20400ad0

00402360 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402360:	2800      	cmp	r0, #0
  402362:	d04d      	beq.n	402400 <xTaskPriorityDisinherit+0xa0>
	{
  402364:	b538      	push	{r3, r4, r5, lr}
  402366:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402368:	4a27      	ldr	r2, [pc, #156]	; (402408 <xTaskPriorityDisinherit+0xa8>)
  40236a:	6812      	ldr	r2, [r2, #0]
  40236c:	4290      	cmp	r0, r2
  40236e:	d00a      	beq.n	402386 <xTaskPriorityDisinherit+0x26>
  402370:	f04f 0380 	mov.w	r3, #128	; 0x80
  402374:	b672      	cpsid	i
  402376:	f383 8811 	msr	BASEPRI, r3
  40237a:	f3bf 8f6f 	isb	sy
  40237e:	f3bf 8f4f 	dsb	sy
  402382:	b662      	cpsie	i
  402384:	e7fe      	b.n	402384 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402386:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402388:	b952      	cbnz	r2, 4023a0 <xTaskPriorityDisinherit+0x40>
  40238a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40238e:	b672      	cpsid	i
  402390:	f383 8811 	msr	BASEPRI, r3
  402394:	f3bf 8f6f 	isb	sy
  402398:	f3bf 8f4f 	dsb	sy
  40239c:	b662      	cpsie	i
  40239e:	e7fe      	b.n	40239e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4023a0:	3a01      	subs	r2, #1
  4023a2:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4023a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4023a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4023a8:	4288      	cmp	r0, r1
  4023aa:	d02b      	beq.n	402404 <xTaskPriorityDisinherit+0xa4>
  4023ac:	bb52      	cbnz	r2, 402404 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4023ae:	1d25      	adds	r5, r4, #4
  4023b0:	4628      	mov	r0, r5
  4023b2:	4b16      	ldr	r3, [pc, #88]	; (40240c <xTaskPriorityDisinherit+0xac>)
  4023b4:	4798      	blx	r3
  4023b6:	b968      	cbnz	r0, 4023d4 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4023b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4023ba:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4023be:	009b      	lsls	r3, r3, #2
  4023c0:	4a13      	ldr	r2, [pc, #76]	; (402410 <xTaskPriorityDisinherit+0xb0>)
  4023c2:	58d3      	ldr	r3, [r2, r3]
  4023c4:	b933      	cbnz	r3, 4023d4 <xTaskPriorityDisinherit+0x74>
  4023c6:	4813      	ldr	r0, [pc, #76]	; (402414 <xTaskPriorityDisinherit+0xb4>)
  4023c8:	6803      	ldr	r3, [r0, #0]
  4023ca:	2201      	movs	r2, #1
  4023cc:	408a      	lsls	r2, r1
  4023ce:	ea23 0302 	bic.w	r3, r3, r2
  4023d2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4023d6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023d8:	f1c0 0305 	rsb	r3, r0, #5
  4023dc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4023de:	4a0d      	ldr	r2, [pc, #52]	; (402414 <xTaskPriorityDisinherit+0xb4>)
  4023e0:	6811      	ldr	r1, [r2, #0]
  4023e2:	2401      	movs	r4, #1
  4023e4:	fa04 f300 	lsl.w	r3, r4, r0
  4023e8:	430b      	orrs	r3, r1
  4023ea:	6013      	str	r3, [r2, #0]
  4023ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023f0:	4629      	mov	r1, r5
  4023f2:	4b07      	ldr	r3, [pc, #28]	; (402410 <xTaskPriorityDisinherit+0xb0>)
  4023f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023f8:	4b07      	ldr	r3, [pc, #28]	; (402418 <xTaskPriorityDisinherit+0xb8>)
  4023fa:	4798      	blx	r3
					xReturn = pdTRUE;
  4023fc:	4620      	mov	r0, r4
  4023fe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402400:	2000      	movs	r0, #0
  402402:	4770      	bx	lr
  402404:	2000      	movs	r0, #0
	}
  402406:	bd38      	pop	{r3, r4, r5, pc}
  402408:	20400a54 	.word	0x20400a54
  40240c:	00400de1 	.word	0x00400de1
  402410:	20400a60 	.word	0x20400a60
  402414:	20400ad8 	.word	0x20400ad8
  402418:	00400d95 	.word	0x00400d95

0040241c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  40241c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40241e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402420:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402422:	4291      	cmp	r1, r2
  402424:	d80c      	bhi.n	402440 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402426:	1ad2      	subs	r2, r2, r3
  402428:	6983      	ldr	r3, [r0, #24]
  40242a:	429a      	cmp	r2, r3
  40242c:	d301      	bcc.n	402432 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40242e:	2001      	movs	r0, #1
  402430:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402432:	1d01      	adds	r1, r0, #4
  402434:	4b09      	ldr	r3, [pc, #36]	; (40245c <prvInsertTimerInActiveList+0x40>)
  402436:	6818      	ldr	r0, [r3, #0]
  402438:	4b09      	ldr	r3, [pc, #36]	; (402460 <prvInsertTimerInActiveList+0x44>)
  40243a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40243c:	2000      	movs	r0, #0
  40243e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402440:	429a      	cmp	r2, r3
  402442:	d203      	bcs.n	40244c <prvInsertTimerInActiveList+0x30>
  402444:	4299      	cmp	r1, r3
  402446:	d301      	bcc.n	40244c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402448:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40244a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40244c:	1d01      	adds	r1, r0, #4
  40244e:	4b05      	ldr	r3, [pc, #20]	; (402464 <prvInsertTimerInActiveList+0x48>)
  402450:	6818      	ldr	r0, [r3, #0]
  402452:	4b03      	ldr	r3, [pc, #12]	; (402460 <prvInsertTimerInActiveList+0x44>)
  402454:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402456:	2000      	movs	r0, #0
  402458:	bd08      	pop	{r3, pc}
  40245a:	bf00      	nop
  40245c:	20400b5c 	.word	0x20400b5c
  402460:	00400dad 	.word	0x00400dad
  402464:	20400b58 	.word	0x20400b58

00402468 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402468:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40246a:	4b10      	ldr	r3, [pc, #64]	; (4024ac <prvCheckForValidListAndQueue+0x44>)
  40246c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40246e:	4b10      	ldr	r3, [pc, #64]	; (4024b0 <prvCheckForValidListAndQueue+0x48>)
  402470:	681b      	ldr	r3, [r3, #0]
  402472:	b113      	cbz	r3, 40247a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402474:	4b0f      	ldr	r3, [pc, #60]	; (4024b4 <prvCheckForValidListAndQueue+0x4c>)
  402476:	4798      	blx	r3
  402478:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40247a:	4d0f      	ldr	r5, [pc, #60]	; (4024b8 <prvCheckForValidListAndQueue+0x50>)
  40247c:	4628      	mov	r0, r5
  40247e:	4e0f      	ldr	r6, [pc, #60]	; (4024bc <prvCheckForValidListAndQueue+0x54>)
  402480:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402482:	4c0f      	ldr	r4, [pc, #60]	; (4024c0 <prvCheckForValidListAndQueue+0x58>)
  402484:	4620      	mov	r0, r4
  402486:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402488:	4b0e      	ldr	r3, [pc, #56]	; (4024c4 <prvCheckForValidListAndQueue+0x5c>)
  40248a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40248c:	4b0e      	ldr	r3, [pc, #56]	; (4024c8 <prvCheckForValidListAndQueue+0x60>)
  40248e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402490:	2200      	movs	r2, #0
  402492:	2110      	movs	r1, #16
  402494:	2005      	movs	r0, #5
  402496:	4b0d      	ldr	r3, [pc, #52]	; (4024cc <prvCheckForValidListAndQueue+0x64>)
  402498:	4798      	blx	r3
  40249a:	4b05      	ldr	r3, [pc, #20]	; (4024b0 <prvCheckForValidListAndQueue+0x48>)
  40249c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  40249e:	2800      	cmp	r0, #0
  4024a0:	d0e8      	beq.n	402474 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4024a2:	490b      	ldr	r1, [pc, #44]	; (4024d0 <prvCheckForValidListAndQueue+0x68>)
  4024a4:	4b0b      	ldr	r3, [pc, #44]	; (4024d4 <prvCheckForValidListAndQueue+0x6c>)
  4024a6:	4798      	blx	r3
  4024a8:	e7e4      	b.n	402474 <prvCheckForValidListAndQueue+0xc>
  4024aa:	bf00      	nop
  4024ac:	00400ee5 	.word	0x00400ee5
  4024b0:	20400b8c 	.word	0x20400b8c
  4024b4:	00400f31 	.word	0x00400f31
  4024b8:	20400b60 	.word	0x20400b60
  4024bc:	00400d79 	.word	0x00400d79
  4024c0:	20400b74 	.word	0x20400b74
  4024c4:	20400b58 	.word	0x20400b58
  4024c8:	20400b5c 	.word	0x20400b5c
  4024cc:	00401451 	.word	0x00401451
  4024d0:	00408798 	.word	0x00408798
  4024d4:	00401949 	.word	0x00401949

004024d8 <xTimerCreateTimerTask>:
{
  4024d8:	b510      	push	{r4, lr}
  4024da:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  4024dc:	4b0e      	ldr	r3, [pc, #56]	; (402518 <xTimerCreateTimerTask+0x40>)
  4024de:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4024e0:	4b0e      	ldr	r3, [pc, #56]	; (40251c <xTimerCreateTimerTask+0x44>)
  4024e2:	681b      	ldr	r3, [r3, #0]
  4024e4:	b16b      	cbz	r3, 402502 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  4024e6:	4b0e      	ldr	r3, [pc, #56]	; (402520 <xTimerCreateTimerTask+0x48>)
  4024e8:	9301      	str	r3, [sp, #4]
  4024ea:	2304      	movs	r3, #4
  4024ec:	9300      	str	r3, [sp, #0]
  4024ee:	2300      	movs	r3, #0
  4024f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4024f4:	490b      	ldr	r1, [pc, #44]	; (402524 <xTimerCreateTimerTask+0x4c>)
  4024f6:	480c      	ldr	r0, [pc, #48]	; (402528 <xTimerCreateTimerTask+0x50>)
  4024f8:	4c0c      	ldr	r4, [pc, #48]	; (40252c <xTimerCreateTimerTask+0x54>)
  4024fa:	47a0      	blx	r4
	configASSERT( xReturn );
  4024fc:	b108      	cbz	r0, 402502 <xTimerCreateTimerTask+0x2a>
}
  4024fe:	b002      	add	sp, #8
  402500:	bd10      	pop	{r4, pc}
  402502:	f04f 0380 	mov.w	r3, #128	; 0x80
  402506:	b672      	cpsid	i
  402508:	f383 8811 	msr	BASEPRI, r3
  40250c:	f3bf 8f6f 	isb	sy
  402510:	f3bf 8f4f 	dsb	sy
  402514:	b662      	cpsie	i
  402516:	e7fe      	b.n	402516 <xTimerCreateTimerTask+0x3e>
  402518:	00402469 	.word	0x00402469
  40251c:	20400b8c 	.word	0x20400b8c
  402520:	20400b90 	.word	0x20400b90
  402524:	004087a0 	.word	0x004087a0
  402528:	00402659 	.word	0x00402659
  40252c:	00401b39 	.word	0x00401b39

00402530 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402530:	b1d8      	cbz	r0, 40256a <xTimerGenericCommand+0x3a>
{
  402532:	b530      	push	{r4, r5, lr}
  402534:	b085      	sub	sp, #20
  402536:	4615      	mov	r5, r2
  402538:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40253a:	4a15      	ldr	r2, [pc, #84]	; (402590 <xTimerGenericCommand+0x60>)
  40253c:	6810      	ldr	r0, [r2, #0]
  40253e:	b320      	cbz	r0, 40258a <xTimerGenericCommand+0x5a>
  402540:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402542:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402544:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402546:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402548:	2905      	cmp	r1, #5
  40254a:	dc19      	bgt.n	402580 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40254c:	4b11      	ldr	r3, [pc, #68]	; (402594 <xTimerGenericCommand+0x64>)
  40254e:	4798      	blx	r3
  402550:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402552:	f04f 0300 	mov.w	r3, #0
  402556:	bf0c      	ite	eq
  402558:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40255a:	461a      	movne	r2, r3
  40255c:	4669      	mov	r1, sp
  40255e:	480c      	ldr	r0, [pc, #48]	; (402590 <xTimerGenericCommand+0x60>)
  402560:	6800      	ldr	r0, [r0, #0]
  402562:	4c0d      	ldr	r4, [pc, #52]	; (402598 <xTimerGenericCommand+0x68>)
  402564:	47a0      	blx	r4
}
  402566:	b005      	add	sp, #20
  402568:	bd30      	pop	{r4, r5, pc}
  40256a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40256e:	b672      	cpsid	i
  402570:	f383 8811 	msr	BASEPRI, r3
  402574:	f3bf 8f6f 	isb	sy
  402578:	f3bf 8f4f 	dsb	sy
  40257c:	b662      	cpsie	i
  40257e:	e7fe      	b.n	40257e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402580:	2300      	movs	r3, #0
  402582:	4669      	mov	r1, sp
  402584:	4c05      	ldr	r4, [pc, #20]	; (40259c <xTimerGenericCommand+0x6c>)
  402586:	47a0      	blx	r4
  402588:	e7ed      	b.n	402566 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40258a:	2000      	movs	r0, #0
	return xReturn;
  40258c:	e7eb      	b.n	402566 <xTimerGenericCommand+0x36>
  40258e:	bf00      	nop
  402590:	20400b8c 	.word	0x20400b8c
  402594:	00402341 	.word	0x00402341
  402598:	004014ad 	.word	0x004014ad
  40259c:	0040169d 	.word	0x0040169d

004025a0 <prvSampleTimeNow>:
{
  4025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4025a4:	b082      	sub	sp, #8
  4025a6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4025a8:	4b24      	ldr	r3, [pc, #144]	; (40263c <prvSampleTimeNow+0x9c>)
  4025aa:	4798      	blx	r3
  4025ac:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4025ae:	4b24      	ldr	r3, [pc, #144]	; (402640 <prvSampleTimeNow+0xa0>)
  4025b0:	681b      	ldr	r3, [r3, #0]
  4025b2:	4298      	cmp	r0, r3
  4025b4:	d31b      	bcc.n	4025ee <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4025b6:	2300      	movs	r3, #0
  4025b8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4025bc:	4b20      	ldr	r3, [pc, #128]	; (402640 <prvSampleTimeNow+0xa0>)
  4025be:	601f      	str	r7, [r3, #0]
}
  4025c0:	4638      	mov	r0, r7
  4025c2:	b002      	add	sp, #8
  4025c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4025c8:	2100      	movs	r1, #0
  4025ca:	9100      	str	r1, [sp, #0]
  4025cc:	460b      	mov	r3, r1
  4025ce:	4652      	mov	r2, sl
  4025d0:	4620      	mov	r0, r4
  4025d2:	4c1c      	ldr	r4, [pc, #112]	; (402644 <prvSampleTimeNow+0xa4>)
  4025d4:	47a0      	blx	r4
				configASSERT( xResult );
  4025d6:	b960      	cbnz	r0, 4025f2 <prvSampleTimeNow+0x52>
  4025d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025dc:	b672      	cpsid	i
  4025de:	f383 8811 	msr	BASEPRI, r3
  4025e2:	f3bf 8f6f 	isb	sy
  4025e6:	f3bf 8f4f 	dsb	sy
  4025ea:	b662      	cpsie	i
  4025ec:	e7fe      	b.n	4025ec <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025ee:	4d16      	ldr	r5, [pc, #88]	; (402648 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025f0:	4e16      	ldr	r6, [pc, #88]	; (40264c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025f2:	682b      	ldr	r3, [r5, #0]
  4025f4:	681a      	ldr	r2, [r3, #0]
  4025f6:	b1c2      	cbz	r2, 40262a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025f8:	68db      	ldr	r3, [r3, #12]
  4025fa:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025fe:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402600:	f104 0904 	add.w	r9, r4, #4
  402604:	4648      	mov	r0, r9
  402606:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402608:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40260a:	4620      	mov	r0, r4
  40260c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40260e:	69e3      	ldr	r3, [r4, #28]
  402610:	2b01      	cmp	r3, #1
  402612:	d1ee      	bne.n	4025f2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402614:	69a3      	ldr	r3, [r4, #24]
  402616:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402618:	459a      	cmp	sl, r3
  40261a:	d2d5      	bcs.n	4025c8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40261c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40261e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402620:	4649      	mov	r1, r9
  402622:	6828      	ldr	r0, [r5, #0]
  402624:	4b0a      	ldr	r3, [pc, #40]	; (402650 <prvSampleTimeNow+0xb0>)
  402626:	4798      	blx	r3
  402628:	e7e3      	b.n	4025f2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40262a:	4a0a      	ldr	r2, [pc, #40]	; (402654 <prvSampleTimeNow+0xb4>)
  40262c:	6810      	ldr	r0, [r2, #0]
  40262e:	4906      	ldr	r1, [pc, #24]	; (402648 <prvSampleTimeNow+0xa8>)
  402630:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402632:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402634:	2301      	movs	r3, #1
  402636:	f8c8 3000 	str.w	r3, [r8]
  40263a:	e7bf      	b.n	4025bc <prvSampleTimeNow+0x1c>
  40263c:	00401dd5 	.word	0x00401dd5
  402640:	20400b88 	.word	0x20400b88
  402644:	00402531 	.word	0x00402531
  402648:	20400b58 	.word	0x20400b58
  40264c:	00400de1 	.word	0x00400de1
  402650:	00400dad 	.word	0x00400dad
  402654:	20400b5c 	.word	0x20400b5c

00402658 <prvTimerTask>:
{
  402658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40265c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40265e:	4e75      	ldr	r6, [pc, #468]	; (402834 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402660:	4f75      	ldr	r7, [pc, #468]	; (402838 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402662:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402860 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402666:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402864 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40266a:	6833      	ldr	r3, [r6, #0]
  40266c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40266e:	2a00      	cmp	r2, #0
  402670:	f000 80ce 	beq.w	402810 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402674:	68db      	ldr	r3, [r3, #12]
  402676:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402678:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40267a:	a804      	add	r0, sp, #16
  40267c:	4b6f      	ldr	r3, [pc, #444]	; (40283c <prvTimerTask+0x1e4>)
  40267e:	4798      	blx	r3
  402680:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402682:	9b04      	ldr	r3, [sp, #16]
  402684:	2b00      	cmp	r3, #0
  402686:	d144      	bne.n	402712 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402688:	42a0      	cmp	r0, r4
  40268a:	d212      	bcs.n	4026b2 <prvTimerTask+0x5a>
  40268c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40268e:	1b61      	subs	r1, r4, r5
  402690:	4b6b      	ldr	r3, [pc, #428]	; (402840 <prvTimerTask+0x1e8>)
  402692:	6818      	ldr	r0, [r3, #0]
  402694:	4b6b      	ldr	r3, [pc, #428]	; (402844 <prvTimerTask+0x1ec>)
  402696:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402698:	4b6b      	ldr	r3, [pc, #428]	; (402848 <prvTimerTask+0x1f0>)
  40269a:	4798      	blx	r3
  40269c:	2800      	cmp	r0, #0
  40269e:	d13a      	bne.n	402716 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4026a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4026a4:	f8c9 3000 	str.w	r3, [r9]
  4026a8:	f3bf 8f4f 	dsb	sy
  4026ac:	f3bf 8f6f 	isb	sy
  4026b0:	e031      	b.n	402716 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4026b2:	4b65      	ldr	r3, [pc, #404]	; (402848 <prvTimerTask+0x1f0>)
  4026b4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026b6:	6833      	ldr	r3, [r6, #0]
  4026b8:	68db      	ldr	r3, [r3, #12]
  4026ba:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026be:	f10a 0004 	add.w	r0, sl, #4
  4026c2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4026c4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4026c8:	2b01      	cmp	r3, #1
  4026ca:	d004      	beq.n	4026d6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4026cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4026d0:	4650      	mov	r0, sl
  4026d2:	4798      	blx	r3
  4026d4:	e01f      	b.n	402716 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  4026d6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4026da:	4623      	mov	r3, r4
  4026dc:	462a      	mov	r2, r5
  4026de:	4421      	add	r1, r4
  4026e0:	4650      	mov	r0, sl
  4026e2:	4d5a      	ldr	r5, [pc, #360]	; (40284c <prvTimerTask+0x1f4>)
  4026e4:	47a8      	blx	r5
  4026e6:	2800      	cmp	r0, #0
  4026e8:	d0f0      	beq.n	4026cc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026ea:	2100      	movs	r1, #0
  4026ec:	9100      	str	r1, [sp, #0]
  4026ee:	460b      	mov	r3, r1
  4026f0:	4622      	mov	r2, r4
  4026f2:	4650      	mov	r0, sl
  4026f4:	4c56      	ldr	r4, [pc, #344]	; (402850 <prvTimerTask+0x1f8>)
  4026f6:	47a0      	blx	r4
			configASSERT( xResult );
  4026f8:	2800      	cmp	r0, #0
  4026fa:	d1e7      	bne.n	4026cc <prvTimerTask+0x74>
  4026fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402700:	b672      	cpsid	i
  402702:	f383 8811 	msr	BASEPRI, r3
  402706:	f3bf 8f6f 	isb	sy
  40270a:	f3bf 8f4f 	dsb	sy
  40270e:	b662      	cpsie	i
  402710:	e7fe      	b.n	402710 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402712:	4b4d      	ldr	r3, [pc, #308]	; (402848 <prvTimerTask+0x1f0>)
  402714:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402716:	4d4a      	ldr	r5, [pc, #296]	; (402840 <prvTimerTask+0x1e8>)
  402718:	4c4e      	ldr	r4, [pc, #312]	; (402854 <prvTimerTask+0x1fc>)
  40271a:	e006      	b.n	40272a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40271c:	9907      	ldr	r1, [sp, #28]
  40271e:	9806      	ldr	r0, [sp, #24]
  402720:	9b05      	ldr	r3, [sp, #20]
  402722:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402724:	9b04      	ldr	r3, [sp, #16]
  402726:	2b00      	cmp	r3, #0
  402728:	da08      	bge.n	40273c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40272a:	2200      	movs	r2, #0
  40272c:	a904      	add	r1, sp, #16
  40272e:	6828      	ldr	r0, [r5, #0]
  402730:	47a0      	blx	r4
  402732:	2800      	cmp	r0, #0
  402734:	d099      	beq.n	40266a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402736:	9b04      	ldr	r3, [sp, #16]
  402738:	2b00      	cmp	r3, #0
  40273a:	dbef      	blt.n	40271c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40273c:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402740:	f8da 3014 	ldr.w	r3, [sl, #20]
  402744:	b113      	cbz	r3, 40274c <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402746:	f10a 0004 	add.w	r0, sl, #4
  40274a:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40274c:	a803      	add	r0, sp, #12
  40274e:	4b3b      	ldr	r3, [pc, #236]	; (40283c <prvTimerTask+0x1e4>)
  402750:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402752:	9b04      	ldr	r3, [sp, #16]
  402754:	2b09      	cmp	r3, #9
  402756:	d8e8      	bhi.n	40272a <prvTimerTask+0xd2>
  402758:	a201      	add	r2, pc, #4	; (adr r2, 402760 <prvTimerTask+0x108>)
  40275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40275e:	bf00      	nop
  402760:	00402789 	.word	0x00402789
  402764:	00402789 	.word	0x00402789
  402768:	00402789 	.word	0x00402789
  40276c:	0040272b 	.word	0x0040272b
  402770:	004027dd 	.word	0x004027dd
  402774:	00402809 	.word	0x00402809
  402778:	00402789 	.word	0x00402789
  40277c:	00402789 	.word	0x00402789
  402780:	0040272b 	.word	0x0040272b
  402784:	004027dd 	.word	0x004027dd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402788:	9c05      	ldr	r4, [sp, #20]
  40278a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40278e:	4623      	mov	r3, r4
  402790:	4602      	mov	r2, r0
  402792:	4421      	add	r1, r4
  402794:	4650      	mov	r0, sl
  402796:	4c2d      	ldr	r4, [pc, #180]	; (40284c <prvTimerTask+0x1f4>)
  402798:	47a0      	blx	r4
  40279a:	2800      	cmp	r0, #0
  40279c:	d0bc      	beq.n	402718 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40279e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4027a2:	4650      	mov	r0, sl
  4027a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4027a6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4027aa:	2b01      	cmp	r3, #1
  4027ac:	d1b4      	bne.n	402718 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4027ae:	f8da 2018 	ldr.w	r2, [sl, #24]
  4027b2:	2100      	movs	r1, #0
  4027b4:	9100      	str	r1, [sp, #0]
  4027b6:	460b      	mov	r3, r1
  4027b8:	9805      	ldr	r0, [sp, #20]
  4027ba:	4402      	add	r2, r0
  4027bc:	4650      	mov	r0, sl
  4027be:	4c24      	ldr	r4, [pc, #144]	; (402850 <prvTimerTask+0x1f8>)
  4027c0:	47a0      	blx	r4
							configASSERT( xResult );
  4027c2:	2800      	cmp	r0, #0
  4027c4:	d1a8      	bne.n	402718 <prvTimerTask+0xc0>
  4027c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027ca:	b672      	cpsid	i
  4027cc:	f383 8811 	msr	BASEPRI, r3
  4027d0:	f3bf 8f6f 	isb	sy
  4027d4:	f3bf 8f4f 	dsb	sy
  4027d8:	b662      	cpsie	i
  4027da:	e7fe      	b.n	4027da <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4027dc:	9905      	ldr	r1, [sp, #20]
  4027de:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4027e2:	b131      	cbz	r1, 4027f2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4027e4:	4603      	mov	r3, r0
  4027e6:	4602      	mov	r2, r0
  4027e8:	4401      	add	r1, r0
  4027ea:	4650      	mov	r0, sl
  4027ec:	4c17      	ldr	r4, [pc, #92]	; (40284c <prvTimerTask+0x1f4>)
  4027ee:	47a0      	blx	r4
  4027f0:	e792      	b.n	402718 <prvTimerTask+0xc0>
  4027f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f6:	b672      	cpsid	i
  4027f8:	f383 8811 	msr	BASEPRI, r3
  4027fc:	f3bf 8f6f 	isb	sy
  402800:	f3bf 8f4f 	dsb	sy
  402804:	b662      	cpsie	i
  402806:	e7fe      	b.n	402806 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  402808:	4650      	mov	r0, sl
  40280a:	4b13      	ldr	r3, [pc, #76]	; (402858 <prvTimerTask+0x200>)
  40280c:	4798      	blx	r3
  40280e:	e783      	b.n	402718 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402810:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402812:	a804      	add	r0, sp, #16
  402814:	4b09      	ldr	r3, [pc, #36]	; (40283c <prvTimerTask+0x1e4>)
  402816:	4798      	blx	r3
  402818:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40281a:	9b04      	ldr	r3, [sp, #16]
  40281c:	2b00      	cmp	r3, #0
  40281e:	f47f af78 	bne.w	402712 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402822:	4b0e      	ldr	r3, [pc, #56]	; (40285c <prvTimerTask+0x204>)
  402824:	681b      	ldr	r3, [r3, #0]
  402826:	681a      	ldr	r2, [r3, #0]
  402828:	fab2 f282 	clz	r2, r2
  40282c:	0952      	lsrs	r2, r2, #5
  40282e:	2400      	movs	r4, #0
  402830:	e72d      	b.n	40268e <prvTimerTask+0x36>
  402832:	bf00      	nop
  402834:	20400b58 	.word	0x20400b58
  402838:	00401dc5 	.word	0x00401dc5
  40283c:	004025a1 	.word	0x004025a1
  402840:	20400b8c 	.word	0x20400b8c
  402844:	0040197d 	.word	0x0040197d
  402848:	00401f29 	.word	0x00401f29
  40284c:	0040241d 	.word	0x0040241d
  402850:	00402531 	.word	0x00402531
  402854:	004017b1 	.word	0x004017b1
  402858:	004011a1 	.word	0x004011a1
  40285c:	20400b5c 	.word	0x20400b5c
  402860:	e000ed04 	.word	0xe000ed04
  402864:	00400de1 	.word	0x00400de1

00402868 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402868:	b5f0      	push	{r4, r5, r6, r7, lr}
  40286a:	b083      	sub	sp, #12
  40286c:	4605      	mov	r5, r0
  40286e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402870:	2300      	movs	r3, #0
  402872:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402874:	4b2a      	ldr	r3, [pc, #168]	; (402920 <usart_serial_getchar+0xb8>)
  402876:	4298      	cmp	r0, r3
  402878:	d013      	beq.n	4028a2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40287a:	4b2a      	ldr	r3, [pc, #168]	; (402924 <usart_serial_getchar+0xbc>)
  40287c:	4298      	cmp	r0, r3
  40287e:	d018      	beq.n	4028b2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402880:	4b29      	ldr	r3, [pc, #164]	; (402928 <usart_serial_getchar+0xc0>)
  402882:	4298      	cmp	r0, r3
  402884:	d01d      	beq.n	4028c2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402886:	4b29      	ldr	r3, [pc, #164]	; (40292c <usart_serial_getchar+0xc4>)
  402888:	429d      	cmp	r5, r3
  40288a:	d022      	beq.n	4028d2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40288c:	4b28      	ldr	r3, [pc, #160]	; (402930 <usart_serial_getchar+0xc8>)
  40288e:	429d      	cmp	r5, r3
  402890:	d027      	beq.n	4028e2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402892:	4b28      	ldr	r3, [pc, #160]	; (402934 <usart_serial_getchar+0xcc>)
  402894:	429d      	cmp	r5, r3
  402896:	d02e      	beq.n	4028f6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402898:	4b27      	ldr	r3, [pc, #156]	; (402938 <usart_serial_getchar+0xd0>)
  40289a:	429d      	cmp	r5, r3
  40289c:	d035      	beq.n	40290a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40289e:	b003      	add	sp, #12
  4028a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4028a2:	461f      	mov	r7, r3
  4028a4:	4e25      	ldr	r6, [pc, #148]	; (40293c <usart_serial_getchar+0xd4>)
  4028a6:	4621      	mov	r1, r4
  4028a8:	4638      	mov	r0, r7
  4028aa:	47b0      	blx	r6
  4028ac:	2800      	cmp	r0, #0
  4028ae:	d1fa      	bne.n	4028a6 <usart_serial_getchar+0x3e>
  4028b0:	e7e9      	b.n	402886 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4028b2:	461f      	mov	r7, r3
  4028b4:	4e21      	ldr	r6, [pc, #132]	; (40293c <usart_serial_getchar+0xd4>)
  4028b6:	4621      	mov	r1, r4
  4028b8:	4638      	mov	r0, r7
  4028ba:	47b0      	blx	r6
  4028bc:	2800      	cmp	r0, #0
  4028be:	d1fa      	bne.n	4028b6 <usart_serial_getchar+0x4e>
  4028c0:	e7e4      	b.n	40288c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4028c2:	461f      	mov	r7, r3
  4028c4:	4e1d      	ldr	r6, [pc, #116]	; (40293c <usart_serial_getchar+0xd4>)
  4028c6:	4621      	mov	r1, r4
  4028c8:	4638      	mov	r0, r7
  4028ca:	47b0      	blx	r6
  4028cc:	2800      	cmp	r0, #0
  4028ce:	d1fa      	bne.n	4028c6 <usart_serial_getchar+0x5e>
  4028d0:	e7df      	b.n	402892 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4028d2:	461f      	mov	r7, r3
  4028d4:	4e19      	ldr	r6, [pc, #100]	; (40293c <usart_serial_getchar+0xd4>)
  4028d6:	4621      	mov	r1, r4
  4028d8:	4638      	mov	r0, r7
  4028da:	47b0      	blx	r6
  4028dc:	2800      	cmp	r0, #0
  4028de:	d1fa      	bne.n	4028d6 <usart_serial_getchar+0x6e>
  4028e0:	e7da      	b.n	402898 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4028e2:	461e      	mov	r6, r3
  4028e4:	4d16      	ldr	r5, [pc, #88]	; (402940 <usart_serial_getchar+0xd8>)
  4028e6:	a901      	add	r1, sp, #4
  4028e8:	4630      	mov	r0, r6
  4028ea:	47a8      	blx	r5
  4028ec:	2800      	cmp	r0, #0
  4028ee:	d1fa      	bne.n	4028e6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4028f0:	9b01      	ldr	r3, [sp, #4]
  4028f2:	7023      	strb	r3, [r4, #0]
  4028f4:	e7d3      	b.n	40289e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4028f6:	461e      	mov	r6, r3
  4028f8:	4d11      	ldr	r5, [pc, #68]	; (402940 <usart_serial_getchar+0xd8>)
  4028fa:	a901      	add	r1, sp, #4
  4028fc:	4630      	mov	r0, r6
  4028fe:	47a8      	blx	r5
  402900:	2800      	cmp	r0, #0
  402902:	d1fa      	bne.n	4028fa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402904:	9b01      	ldr	r3, [sp, #4]
  402906:	7023      	strb	r3, [r4, #0]
  402908:	e7c9      	b.n	40289e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40290a:	461e      	mov	r6, r3
  40290c:	4d0c      	ldr	r5, [pc, #48]	; (402940 <usart_serial_getchar+0xd8>)
  40290e:	a901      	add	r1, sp, #4
  402910:	4630      	mov	r0, r6
  402912:	47a8      	blx	r5
  402914:	2800      	cmp	r0, #0
  402916:	d1fa      	bne.n	40290e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402918:	9b01      	ldr	r3, [sp, #4]
  40291a:	7023      	strb	r3, [r4, #0]
}
  40291c:	e7bf      	b.n	40289e <usart_serial_getchar+0x36>
  40291e:	bf00      	nop
  402920:	400e0800 	.word	0x400e0800
  402924:	400e0a00 	.word	0x400e0a00
  402928:	400e1a00 	.word	0x400e1a00
  40292c:	400e1c00 	.word	0x400e1c00
  402930:	40024000 	.word	0x40024000
  402934:	40028000 	.word	0x40028000
  402938:	4002c000 	.word	0x4002c000
  40293c:	004009a3 	.word	0x004009a3
  402940:	00400aaf 	.word	0x00400aaf

00402944 <usart_serial_putchar>:
{
  402944:	b570      	push	{r4, r5, r6, lr}
  402946:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402948:	4b2a      	ldr	r3, [pc, #168]	; (4029f4 <usart_serial_putchar+0xb0>)
  40294a:	4298      	cmp	r0, r3
  40294c:	d013      	beq.n	402976 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40294e:	4b2a      	ldr	r3, [pc, #168]	; (4029f8 <usart_serial_putchar+0xb4>)
  402950:	4298      	cmp	r0, r3
  402952:	d019      	beq.n	402988 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402954:	4b29      	ldr	r3, [pc, #164]	; (4029fc <usart_serial_putchar+0xb8>)
  402956:	4298      	cmp	r0, r3
  402958:	d01f      	beq.n	40299a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40295a:	4b29      	ldr	r3, [pc, #164]	; (402a00 <usart_serial_putchar+0xbc>)
  40295c:	4298      	cmp	r0, r3
  40295e:	d025      	beq.n	4029ac <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402960:	4b28      	ldr	r3, [pc, #160]	; (402a04 <usart_serial_putchar+0xc0>)
  402962:	4298      	cmp	r0, r3
  402964:	d02b      	beq.n	4029be <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402966:	4b28      	ldr	r3, [pc, #160]	; (402a08 <usart_serial_putchar+0xc4>)
  402968:	4298      	cmp	r0, r3
  40296a:	d031      	beq.n	4029d0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40296c:	4b27      	ldr	r3, [pc, #156]	; (402a0c <usart_serial_putchar+0xc8>)
  40296e:	4298      	cmp	r0, r3
  402970:	d037      	beq.n	4029e2 <usart_serial_putchar+0x9e>
	return 0;
  402972:	2000      	movs	r0, #0
}
  402974:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402976:	461e      	mov	r6, r3
  402978:	4d25      	ldr	r5, [pc, #148]	; (402a10 <usart_serial_putchar+0xcc>)
  40297a:	4621      	mov	r1, r4
  40297c:	4630      	mov	r0, r6
  40297e:	47a8      	blx	r5
  402980:	2800      	cmp	r0, #0
  402982:	d1fa      	bne.n	40297a <usart_serial_putchar+0x36>
		return 1;
  402984:	2001      	movs	r0, #1
  402986:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402988:	461e      	mov	r6, r3
  40298a:	4d21      	ldr	r5, [pc, #132]	; (402a10 <usart_serial_putchar+0xcc>)
  40298c:	4621      	mov	r1, r4
  40298e:	4630      	mov	r0, r6
  402990:	47a8      	blx	r5
  402992:	2800      	cmp	r0, #0
  402994:	d1fa      	bne.n	40298c <usart_serial_putchar+0x48>
		return 1;
  402996:	2001      	movs	r0, #1
  402998:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40299a:	461e      	mov	r6, r3
  40299c:	4d1c      	ldr	r5, [pc, #112]	; (402a10 <usart_serial_putchar+0xcc>)
  40299e:	4621      	mov	r1, r4
  4029a0:	4630      	mov	r0, r6
  4029a2:	47a8      	blx	r5
  4029a4:	2800      	cmp	r0, #0
  4029a6:	d1fa      	bne.n	40299e <usart_serial_putchar+0x5a>
		return 1;
  4029a8:	2001      	movs	r0, #1
  4029aa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4029ac:	461e      	mov	r6, r3
  4029ae:	4d18      	ldr	r5, [pc, #96]	; (402a10 <usart_serial_putchar+0xcc>)
  4029b0:	4621      	mov	r1, r4
  4029b2:	4630      	mov	r0, r6
  4029b4:	47a8      	blx	r5
  4029b6:	2800      	cmp	r0, #0
  4029b8:	d1fa      	bne.n	4029b0 <usart_serial_putchar+0x6c>
		return 1;
  4029ba:	2001      	movs	r0, #1
  4029bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4029be:	461e      	mov	r6, r3
  4029c0:	4d14      	ldr	r5, [pc, #80]	; (402a14 <usart_serial_putchar+0xd0>)
  4029c2:	4621      	mov	r1, r4
  4029c4:	4630      	mov	r0, r6
  4029c6:	47a8      	blx	r5
  4029c8:	2800      	cmp	r0, #0
  4029ca:	d1fa      	bne.n	4029c2 <usart_serial_putchar+0x7e>
		return 1;
  4029cc:	2001      	movs	r0, #1
  4029ce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4029d0:	461e      	mov	r6, r3
  4029d2:	4d10      	ldr	r5, [pc, #64]	; (402a14 <usart_serial_putchar+0xd0>)
  4029d4:	4621      	mov	r1, r4
  4029d6:	4630      	mov	r0, r6
  4029d8:	47a8      	blx	r5
  4029da:	2800      	cmp	r0, #0
  4029dc:	d1fa      	bne.n	4029d4 <usart_serial_putchar+0x90>
		return 1;
  4029de:	2001      	movs	r0, #1
  4029e0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4029e2:	461e      	mov	r6, r3
  4029e4:	4d0b      	ldr	r5, [pc, #44]	; (402a14 <usart_serial_putchar+0xd0>)
  4029e6:	4621      	mov	r1, r4
  4029e8:	4630      	mov	r0, r6
  4029ea:	47a8      	blx	r5
  4029ec:	2800      	cmp	r0, #0
  4029ee:	d1fa      	bne.n	4029e6 <usart_serial_putchar+0xa2>
		return 1;
  4029f0:	2001      	movs	r0, #1
  4029f2:	bd70      	pop	{r4, r5, r6, pc}
  4029f4:	400e0800 	.word	0x400e0800
  4029f8:	400e0a00 	.word	0x400e0a00
  4029fc:	400e1a00 	.word	0x400e1a00
  402a00:	400e1c00 	.word	0x400e1c00
  402a04:	40024000 	.word	0x40024000
  402a08:	40028000 	.word	0x40028000
  402a0c:	4002c000 	.word	0x4002c000
  402a10:	00400991 	.word	0x00400991
  402a14:	00400a99 	.word	0x00400a99

00402a18 <vApplicationStackOverflowHook>:
extern void vApplicationTickHook(void);
extern void vApplicationMallocFailedHook(void);
extern void xPortSysTickHandler(void);

extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
                                          signed char *pcTaskName) {
  402a18:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402a1a:	460a      	mov	r2, r1
  402a1c:	4601      	mov	r1, r0
  402a1e:	4802      	ldr	r0, [pc, #8]	; (402a28 <vApplicationStackOverflowHook+0x10>)
  402a20:	4b02      	ldr	r3, [pc, #8]	; (402a2c <vApplicationStackOverflowHook+0x14>)
  402a22:	4798      	blx	r3
  402a24:	e7fe      	b.n	402a24 <vApplicationStackOverflowHook+0xc>
  402a26:	bf00      	nop
  402a28:	00408954 	.word	0x00408954
  402a2c:	00403a91 	.word	0x00403a91

00402a30 <vApplicationIdleHook>:
  for (;;) {
  }
}

extern void vApplicationIdleHook(void) {}
  402a30:	4770      	bx	lr

00402a32 <vApplicationTickHook>:

extern void vApplicationTickHook(void) {}
  402a32:	4770      	bx	lr

00402a34 <vApplicationMallocFailedHook>:
  402a34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a38:	b672      	cpsid	i
  402a3a:	f383 8811 	msr	BASEPRI, r3
  402a3e:	f3bf 8f6f 	isb	sy
  402a42:	f3bf 8f4f 	dsb	sy
  402a46:	b662      	cpsie	i
  402a48:	e7fe      	b.n	402a48 <vApplicationMallocFailedHook+0x14>
	...

00402a4c <pin_toggle>:

/************************************************************************/
/* Funcoes                                                              */
/************************************************************************/

void pin_toggle(Pio *pio, uint32_t mask) {
  402a4c:	b538      	push	{r3, r4, r5, lr}
  402a4e:	4604      	mov	r4, r0
  402a50:	460d      	mov	r5, r1
  if (pio_get_output_data_status(pio, mask))
  402a52:	4b06      	ldr	r3, [pc, #24]	; (402a6c <pin_toggle+0x20>)
  402a54:	4798      	blx	r3
  402a56:	b920      	cbnz	r0, 402a62 <pin_toggle+0x16>
    pio_clear(pio, mask);
  else
    pio_set(pio, mask);
  402a58:	4629      	mov	r1, r5
  402a5a:	4620      	mov	r0, r4
  402a5c:	4b04      	ldr	r3, [pc, #16]	; (402a70 <pin_toggle+0x24>)
  402a5e:	4798      	blx	r3
  402a60:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  402a62:	4629      	mov	r1, r5
  402a64:	4620      	mov	r0, r4
  402a66:	4b03      	ldr	r3, [pc, #12]	; (402a74 <pin_toggle+0x28>)
  402a68:	4798      	blx	r3
  402a6a:	bd38      	pop	{r3, r4, r5, pc}
  402a6c:	00400527 	.word	0x00400527
  402a70:	00400465 	.word	0x00400465
  402a74:	00400469 	.word	0x00400469

00402a78 <mcu6050_i2c_bus_init>:
}

void mcu6050_i2c_bus_init(void)
{
  402a78:	b530      	push	{r4, r5, lr}
  402a7a:	b085      	sub	sp, #20
    twihs_options_t mcu6050_option;
    pmc_enable_periph_clk(ID_TWIHS2);
  402a7c:	2029      	movs	r0, #41	; 0x29
  402a7e:	4c0e      	ldr	r4, [pc, #56]	; (402ab8 <mcu6050_i2c_bus_init+0x40>)
  402a80:	47a0      	blx	r4

    /* Configure the options of TWI driver */
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  402a82:	4b0e      	ldr	r3, [pc, #56]	; (402abc <mcu6050_i2c_bus_init+0x44>)
  402a84:	9301      	str	r3, [sp, #4]
    mcu6050_option.speed      = 40000;
  402a86:	f649 4340 	movw	r3, #40000	; 0x9c40
  402a8a:	9302      	str	r3, [sp, #8]
    twihs_master_init(TWIHS2, &mcu6050_option);
  402a8c:	a901      	add	r1, sp, #4
  402a8e:	480c      	ldr	r0, [pc, #48]	; (402ac0 <mcu6050_i2c_bus_init+0x48>)
  402a90:	4b0c      	ldr	r3, [pc, #48]	; (402ac4 <mcu6050_i2c_bus_init+0x4c>)
  402a92:	4798      	blx	r3

    /** Enable TWIHS port to control PIO pins */
    pmc_enable_periph_clk(ID_PIOD);
  402a94:	2010      	movs	r0, #16
  402a96:	47a0      	blx	r4
    pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  402a98:	4d0b      	ldr	r5, [pc, #44]	; (402ac8 <mcu6050_i2c_bus_init+0x50>)
  402a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a9e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402aa2:	4628      	mov	r0, r5
  402aa4:	4c09      	ldr	r4, [pc, #36]	; (402acc <mcu6050_i2c_bus_init+0x54>)
  402aa6:	47a0      	blx	r4
    pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  402aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402aac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402ab0:	4628      	mov	r0, r5
  402ab2:	47a0      	blx	r4
}
  402ab4:	b005      	add	sp, #20
  402ab6:	bd30      	pop	{r4, r5, pc}
  402ab8:	00400711 	.word	0x00400711
  402abc:	11e1a300 	.word	0x11e1a300
  402ac0:	40060000 	.word	0x40060000
  402ac4:	004007e1 	.word	0x004007e1
  402ac8:	400e1400 	.word	0x400e1400
  402acc:	0040046d 	.word	0x0040046d

00402ad0 <mcu6050_i2c_bus_write>:


int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  402ad0:	b500      	push	{lr}
  402ad2:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  402ad4:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402ad8:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402adc:	2101      	movs	r1, #1
  402ade:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402ae0:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402ae2:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_write(TWIHS2, &p_packet);
  402ae4:	a901      	add	r1, sp, #4
  402ae6:	4803      	ldr	r0, [pc, #12]	; (402af4 <mcu6050_i2c_bus_write+0x24>)
  402ae8:	4b03      	ldr	r3, [pc, #12]	; (402af8 <mcu6050_i2c_bus_write+0x28>)
  402aea:	4798      	blx	r3

    return (int8_t)ierror;
}
  402aec:	b240      	sxtb	r0, r0
  402aee:	b007      	add	sp, #28
  402af0:	f85d fb04 	ldr.w	pc, [sp], #4
  402af4:	40060000 	.word	0x40060000
  402af8:	004008c3 	.word	0x004008c3

00402afc <mcu6050_i2c_bus_read>:


int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
  402afc:	b500      	push	{lr}
  402afe:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  402b00:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402b04:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402b08:	2101      	movs	r1, #1
  402b0a:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402b0c:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402b0e:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_read(TWIHS2, &p_packet);
  402b10:	a901      	add	r1, sp, #4
  402b12:	4803      	ldr	r0, [pc, #12]	; (402b20 <mcu6050_i2c_bus_read+0x24>)
  402b14:	4b03      	ldr	r3, [pc, #12]	; (402b24 <mcu6050_i2c_bus_read+0x28>)
  402b16:	4798      	blx	r3

    return (int8_t)ierror;
}
  402b18:	b240      	sxtb	r0, r0
  402b1a:	b007      	add	sp, #28
  402b1c:	f85d fb04 	ldr.w	pc, [sp], #4
  402b20:	40060000 	.word	0x40060000
  402b24:	00400815 	.word	0x00400815

00402b28 <task_imu>:
    pin_toggle(LED_PIO, LED_IDX_MASK);
    vTaskDelay(1000);
  }
}

task_imu ( void * pvParameters ) {
  402b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b2c:	ed2d 8b04 	vpush	{d8-d9}
  402b30:	b093      	sub	sp, #76	; 0x4c
    mcu6050_i2c_bus_init();
  402b32:	4b93      	ldr	r3, [pc, #588]	; (402d80 <task_imu+0x258>)
  402b34:	4798      	blx	r3

    /* resultado da função */
    uint8_t rtn;

    /* Probing */
    rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  402b36:	2168      	movs	r1, #104	; 0x68
  402b38:	4892      	ldr	r0, [pc, #584]	; (402d84 <task_imu+0x25c>)
  402b3a:	4b93      	ldr	r3, [pc, #588]	; (402d88 <task_imu+0x260>)
  402b3c:	4798      	blx	r3
    if(rtn != TWIHS_SUCCESS){
  402b3e:	b2c0      	uxtb	r0, r0
  402b40:	2800      	cmp	r0, #0
  402b42:	f000 8109 	beq.w	402d58 <task_imu+0x230>
        printf("[ERRO] [i2c] [probe] \n");
  402b46:	4891      	ldr	r0, [pc, #580]	; (402d8c <task_imu+0x264>)
  402b48:	4b91      	ldr	r3, [pc, #580]	; (402d90 <task_imu+0x268>)
  402b4a:	4798      	blx	r3
    } else {
        printf("[DADO] [i2c] probe OK\n" );
    }

    /* Leitura do registrador WHO_AM_I */
    rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  402b4c:	2301      	movs	r3, #1
  402b4e:	aa0f      	add	r2, sp, #60	; 0x3c
  402b50:	2175      	movs	r1, #117	; 0x75
  402b52:	2068      	movs	r0, #104	; 0x68
  402b54:	4c8f      	ldr	r4, [pc, #572]	; (402d94 <task_imu+0x26c>)
  402b56:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS){
  402b58:	2800      	cmp	r0, #0
  402b5a:	f040 8101 	bne.w	402d60 <task_imu+0x238>
        printf("[ERRO] [i2c] [read] \n");
    } else {
        /* Verifica o conteúdo do bufferRX */
        if (bufferRX[0] == 0x68) {  // Substitua 0x68 pelo valor correto do manual
  402b5e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
  402b62:	2968      	cmp	r1, #104	; 0x68
            printf("[SUCESSO] Valor lido é correto: %x\n", bufferRX[0]);
  402b64:	bf0c      	ite	eq
  402b66:	488c      	ldreq	r0, [pc, #560]	; (402d98 <task_imu+0x270>)
        } else {
            printf("[ERRO] Valor lido é incorreto: %x\n", bufferRX[0]);
  402b68:	488c      	ldrne	r0, [pc, #560]	; (402d9c <task_imu+0x274>)
  402b6a:	4b8d      	ldr	r3, [pc, #564]	; (402da0 <task_imu+0x278>)
  402b6c:	4798      	blx	r3
        }
    }
    // Set Clock source
    bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  402b6e:	2301      	movs	r3, #1
  402b70:	aa12      	add	r2, sp, #72	; 0x48
  402b72:	f802 3d18 	strb.w	r3, [r2, #-24]!
    rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  402b76:	216b      	movs	r1, #107	; 0x6b
  402b78:	2068      	movs	r0, #104	; 0x68
  402b7a:	4c8a      	ldr	r4, [pc, #552]	; (402da4 <task_imu+0x27c>)
  402b7c:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS)
  402b7e:	2800      	cmp	r0, #0
  402b80:	f040 80f2 	bne.w	402d68 <task_imu+0x240>
        printf("[ERRO] [i2c] [write] \n");

    // Aceletromtro em 2G
    bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  402b84:	aa12      	add	r2, sp, #72	; 0x48
  402b86:	2300      	movs	r3, #0
  402b88:	f802 3d18 	strb.w	r3, [r2, #-24]!
    rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  402b8c:	2301      	movs	r3, #1
  402b8e:	211c      	movs	r1, #28
  402b90:	2068      	movs	r0, #104	; 0x68
  402b92:	4c84      	ldr	r4, [pc, #528]	; (402da4 <task_imu+0x27c>)
  402b94:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS)
  402b96:	2800      	cmp	r0, #0
  402b98:	f040 80ea 	bne.w	402d70 <task_imu+0x248>
        printf("[ERRO] [i2c] [write] \n");

    // Configura range giroscopio para operar com 250 °/s
    bufferTX[0] = 0x00; // 250 °/s
  402b9c:	aa12      	add	r2, sp, #72	; 0x48
  402b9e:	2300      	movs	r3, #0
  402ba0:	f802 3d18 	strb.w	r3, [r2, #-24]!
    rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  402ba4:	2301      	movs	r3, #1
  402ba6:	211b      	movs	r1, #27
  402ba8:	2068      	movs	r0, #104	; 0x68
  402baa:	4c7e      	ldr	r4, [pc, #504]	; (402da4 <task_imu+0x27c>)
  402bac:	47a0      	blx	r4
    if(rtn != TWIHS_SUCCESS)
  402bae:	2800      	cmp	r0, #0
  402bb0:	f040 80e2 	bne.w	402d78 <task_imu+0x250>
    volatile uint8_t  raw_gyr_xHigh, raw_gyr_yHigh, raw_gyr_zHigh;
    volatile uint8_t  raw_gyr_xLow,  raw_gyr_yLow,  raw_gyr_zLow;
    float proc_gyr_x, proc_gyr_y, proc_gyr_z;
    while(1) {
      // Le valor do acc X High e Low
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  402bb4:	4d77      	ldr	r5, [pc, #476]	; (402d94 <task_imu+0x26c>)
      raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
      raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
      raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);

      // Dados em escala real
      proc_acc_x = (float)raw_acc_x/16384;
  402bb6:	ed9f 9a7c 	vldr	s18, [pc, #496]	; 402da8 <task_imu+0x280>
      proc_acc_y = (float)raw_acc_y/16384;
      proc_acc_z = (float)raw_acc_z/16384;

      proc_gyr_x = (float)raw_gyr_x/131;
  402bba:	eddf 8a7c 	vldr	s17, [pc, #496]	; 402dac <task_imu+0x284>
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  402bbe:	2301      	movs	r3, #1
  402bc0:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
  402bc4:	213b      	movs	r1, #59	; 0x3b
  402bc6:	2068      	movs	r0, #104	; 0x68
  402bc8:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  402bca:	2301      	movs	r3, #1
  402bcc:	aa0b      	add	r2, sp, #44	; 0x2c
  402bce:	213c      	movs	r1, #60	; 0x3c
  402bd0:	2068      	movs	r0, #104	; 0x68
  402bd2:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  402bd4:	2301      	movs	r3, #1
  402bd6:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
  402bda:	213d      	movs	r1, #61	; 0x3d
  402bdc:	2068      	movs	r0, #104	; 0x68
  402bde:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  402be0:	2301      	movs	r3, #1
  402be2:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
  402be6:	2140      	movs	r1, #64	; 0x40
  402be8:	2068      	movs	r0, #104	; 0x68
  402bea:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  402bec:	2301      	movs	r3, #1
  402bee:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
  402bf2:	213f      	movs	r1, #63	; 0x3f
  402bf4:	2068      	movs	r0, #104	; 0x68
  402bf6:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  402bf8:	2301      	movs	r3, #1
  402bfa:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
  402bfe:	2140      	movs	r1, #64	; 0x40
  402c00:	2068      	movs	r0, #104	; 0x68
  402c02:	47a8      	blx	r5
      raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  402c04:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
  402c08:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  402c0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c10:	b21e      	sxth	r6, r3
      raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  402c12:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
  402c16:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
  402c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c1e:	fa0f fb83 	sxth.w	fp, r3
      raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  402c22:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
  402c26:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  402c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402c2e:	b21b      	sxth	r3, r3
  402c30:	ee08 3a10 	vmov	s16, r3
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  402c34:	2301      	movs	r3, #1
  402c36:	f10d 0229 	add.w	r2, sp, #41	; 0x29
  402c3a:	2143      	movs	r1, #67	; 0x43
  402c3c:	2068      	movs	r0, #104	; 0x68
  402c3e:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  402c40:	2301      	movs	r3, #1
  402c42:	f10d 0226 	add.w	r2, sp, #38	; 0x26
  402c46:	2144      	movs	r1, #68	; 0x44
  402c48:	2068      	movs	r0, #104	; 0x68
  402c4a:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  402c4c:	2301      	movs	r3, #1
  402c4e:	aa0a      	add	r2, sp, #40	; 0x28
  402c50:	2145      	movs	r1, #69	; 0x45
  402c52:	2068      	movs	r0, #104	; 0x68
  402c54:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  402c56:	2301      	movs	r3, #1
  402c58:	f10d 0225 	add.w	r2, sp, #37	; 0x25
  402c5c:	2148      	movs	r1, #72	; 0x48
  402c5e:	2068      	movs	r0, #104	; 0x68
  402c60:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  402c62:	2301      	movs	r3, #1
  402c64:	f10d 0227 	add.w	r2, sp, #39	; 0x27
  402c68:	2147      	movs	r1, #71	; 0x47
  402c6a:	2068      	movs	r0, #104	; 0x68
  402c6c:	47a8      	blx	r5
      mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  402c6e:	2301      	movs	r3, #1
  402c70:	aa09      	add	r2, sp, #36	; 0x24
  402c72:	2148      	movs	r1, #72	; 0x48
  402c74:	2068      	movs	r0, #104	; 0x68
  402c76:	47a8      	blx	r5
      raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  402c78:	f89d 9029 	ldrb.w	r9, [sp, #41]	; 0x29
  402c7c:	fa5f f989 	uxtb.w	r9, r9
  402c80:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
  402c84:	fa5f f888 	uxtb.w	r8, r8
      raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  402c88:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
  402c8c:	b2ff      	uxtb	r7, r7
  402c8e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
  402c92:	b2db      	uxtb	r3, r3
  402c94:	9305      	str	r3, [sp, #20]
      raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  402c96:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
  402c9a:	fa5f fa8a 	uxtb.w	sl, sl
  402c9e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
  402ca2:	b2e4      	uxtb	r4, r4
      proc_acc_x = (float)raw_acc_x/16384;
  402ca4:	ee07 6a90 	vmov	s15, r6
  402ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      proc_gyr_y = (float)raw_gyr_y/131;
      proc_gyr_z = (float)raw_gyr_z/131;
      printf("Aceleracao: X = %.2f, Y = %.2f, Z = %.2f\n", proc_acc_x, proc_acc_y, proc_acc_z);
  402cac:	4e40      	ldr	r6, [pc, #256]	; (402db0 <task_imu+0x288>)
  402cae:	ee67 7a89 	vmul.f32	s15, s15, s18
  402cb2:	ee17 0a90 	vmov	r0, s15
  402cb6:	47b0      	blx	r6
  402cb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
      proc_acc_z = (float)raw_acc_z/16384;
  402cbc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
      printf("Aceleracao: X = %.2f, Y = %.2f, Z = %.2f\n", proc_acc_x, proc_acc_y, proc_acc_z);
  402cc0:	ee68 7a09 	vmul.f32	s15, s16, s18
  402cc4:	ee17 0a90 	vmov	r0, s15
  402cc8:	47b0      	blx	r6
  402cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
      proc_acc_y = (float)raw_acc_y/16384;
  402cce:	ee07 ba90 	vmov	s15, fp
  402cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      printf("Aceleracao: X = %.2f, Y = %.2f, Z = %.2f\n", proc_acc_x, proc_acc_y, proc_acc_z);
  402cd6:	ee67 7a89 	vmul.f32	s15, s15, s18
  402cda:	ee17 0a90 	vmov	r0, s15
  402cde:	47b0      	blx	r6
  402ce0:	e9cd 0100 	strd	r0, r1, [sp]
  402ce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402ce8:	4832      	ldr	r0, [pc, #200]	; (402db4 <task_imu+0x28c>)
  402cea:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 402da0 <task_imu+0x278>
  402cee:	47d8      	blx	fp
      raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  402cf0:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
      proc_gyr_x = (float)raw_gyr_x/131;
  402cf4:	fa0f f888 	sxth.w	r8, r8
  402cf8:	ee07 8a90 	vmov	s15, r8
  402cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      printf("Giroscopio: X = %.2f, Y = %.2f, Z = %.2f\n", proc_gyr_x, proc_gyr_y, proc_gyr_z);
  402d00:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  402d04:	ee17 0a10 	vmov	r0, s14
  402d08:	47b0      	blx	r6
  402d0a:	4680      	mov	r8, r0
  402d0c:	4689      	mov	r9, r1
      raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  402d0e:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
      proc_gyr_z = (float)raw_gyr_z/131;
  402d12:	b224      	sxth	r4, r4
  402d14:	ee07 4a90 	vmov	s15, r4
  402d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      printf("Giroscopio: X = %.2f, Y = %.2f, Z = %.2f\n", proc_gyr_x, proc_gyr_y, proc_gyr_z);
  402d1c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  402d20:	ee17 0a10 	vmov	r0, s14
  402d24:	47b0      	blx	r6
  402d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
      raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  402d2a:	9b05      	ldr	r3, [sp, #20]
  402d2c:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
      proc_gyr_y = (float)raw_gyr_y/131;
  402d30:	b23f      	sxth	r7, r7
  402d32:	ee07 7a90 	vmov	s15, r7
  402d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      printf("Giroscopio: X = %.2f, Y = %.2f, Z = %.2f\n", proc_gyr_x, proc_gyr_y, proc_gyr_z);
  402d3a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  402d3e:	ee17 0a10 	vmov	r0, s14
  402d42:	47b0      	blx	r6
  402d44:	e9cd 0100 	strd	r0, r1, [sp]
  402d48:	4642      	mov	r2, r8
  402d4a:	464b      	mov	r3, r9
  402d4c:	481a      	ldr	r0, [pc, #104]	; (402db8 <task_imu+0x290>)
  402d4e:	47d8      	blx	fp

      // uma amostra a cada 1ms
      vTaskDelay(1);
  402d50:	2001      	movs	r0, #1
  402d52:	4b1a      	ldr	r3, [pc, #104]	; (402dbc <task_imu+0x294>)
  402d54:	4798      	blx	r3
  402d56:	e732      	b.n	402bbe <task_imu+0x96>
        printf("[DADO] [i2c] probe OK\n" );
  402d58:	4819      	ldr	r0, [pc, #100]	; (402dc0 <task_imu+0x298>)
  402d5a:	4b0d      	ldr	r3, [pc, #52]	; (402d90 <task_imu+0x268>)
  402d5c:	4798      	blx	r3
  402d5e:	e6f5      	b.n	402b4c <task_imu+0x24>
        printf("[ERRO] [i2c] [read] \n");
  402d60:	4818      	ldr	r0, [pc, #96]	; (402dc4 <task_imu+0x29c>)
  402d62:	4b0b      	ldr	r3, [pc, #44]	; (402d90 <task_imu+0x268>)
  402d64:	4798      	blx	r3
  402d66:	e702      	b.n	402b6e <task_imu+0x46>
        printf("[ERRO] [i2c] [write] \n");
  402d68:	4817      	ldr	r0, [pc, #92]	; (402dc8 <task_imu+0x2a0>)
  402d6a:	4b09      	ldr	r3, [pc, #36]	; (402d90 <task_imu+0x268>)
  402d6c:	4798      	blx	r3
  402d6e:	e709      	b.n	402b84 <task_imu+0x5c>
        printf("[ERRO] [i2c] [write] \n");
  402d70:	4815      	ldr	r0, [pc, #84]	; (402dc8 <task_imu+0x2a0>)
  402d72:	4b07      	ldr	r3, [pc, #28]	; (402d90 <task_imu+0x268>)
  402d74:	4798      	blx	r3
  402d76:	e711      	b.n	402b9c <task_imu+0x74>
        printf("[ERRO] [i2c] [write] \n");
  402d78:	4813      	ldr	r0, [pc, #76]	; (402dc8 <task_imu+0x2a0>)
  402d7a:	4b05      	ldr	r3, [pc, #20]	; (402d90 <task_imu+0x268>)
  402d7c:	4798      	blx	r3
  402d7e:	e719      	b.n	402bb4 <task_imu+0x8c>
  402d80:	00402a79 	.word	0x00402a79
  402d84:	40060000 	.word	0x40060000
  402d88:	00400965 	.word	0x00400965
  402d8c:	00408850 	.word	0x00408850
  402d90:	00403b55 	.word	0x00403b55
  402d94:	00402afd 	.word	0x00402afd
  402d98:	00408898 	.word	0x00408898
  402d9c:	004088c0 	.word	0x004088c0
  402da0:	00403a91 	.word	0x00403a91
  402da4:	00402ad1 	.word	0x00402ad1
  402da8:	38800000 	.word	0x38800000
  402dac:	43030000 	.word	0x43030000
  402db0:	00403231 	.word	0x00403231
  402db4:	004088fc 	.word	0x004088fc
  402db8:	00408928 	.word	0x00408928
  402dbc:	00402041 	.word	0x00402041
  402dc0:	00408868 	.word	0x00408868
  402dc4:	00408880 	.word	0x00408880
  402dc8:	004088e4 	.word	0x004088e4

00402dcc <LED_init>:
void LED_init(int estado) {
  402dcc:	b510      	push	{r4, lr}
  402dce:	b082      	sub	sp, #8
  402dd0:	4604      	mov	r4, r0
  pmc_enable_periph_clk(LED_PIO_ID);
  402dd2:	200c      	movs	r0, #12
  402dd4:	4b05      	ldr	r3, [pc, #20]	; (402dec <LED_init+0x20>)
  402dd6:	4798      	blx	r3
  pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0);
  402dd8:	2300      	movs	r3, #0
  402dda:	9300      	str	r3, [sp, #0]
  402ddc:	4622      	mov	r2, r4
  402dde:	f44f 7180 	mov.w	r1, #256	; 0x100
  402de2:	4803      	ldr	r0, [pc, #12]	; (402df0 <LED_init+0x24>)
  402de4:	4c03      	ldr	r4, [pc, #12]	; (402df4 <LED_init+0x28>)
  402de6:	47a0      	blx	r4
};
  402de8:	b002      	add	sp, #8
  402dea:	bd10      	pop	{r4, pc}
  402dec:	00400711 	.word	0x00400711
  402df0:	400e1200 	.word	0x400e1200
  402df4:	004004ff 	.word	0x004004ff

00402df8 <task_led>:
static void task_led(void *pvParameters) {
  402df8:	b508      	push	{r3, lr}
  LED_init(1);
  402dfa:	2001      	movs	r0, #1
  402dfc:	4b06      	ldr	r3, [pc, #24]	; (402e18 <task_led+0x20>)
  402dfe:	4798      	blx	r3
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402e00:	4e06      	ldr	r6, [pc, #24]	; (402e1c <task_led+0x24>)
  402e02:	4d07      	ldr	r5, [pc, #28]	; (402e20 <task_led+0x28>)
    vTaskDelay(1000);
  402e04:	4c07      	ldr	r4, [pc, #28]	; (402e24 <task_led+0x2c>)
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402e06:	f44f 7180 	mov.w	r1, #256	; 0x100
  402e0a:	4630      	mov	r0, r6
  402e0c:	47a8      	blx	r5
    vTaskDelay(1000);
  402e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402e12:	47a0      	blx	r4
  402e14:	e7f7      	b.n	402e06 <task_led+0xe>
  402e16:	bf00      	nop
  402e18:	00402dcd 	.word	0x00402dcd
  402e1c:	400e1200 	.word	0x400e1200
  402e20:	00402a4d 	.word	0x00402a4d
  402e24:	00402041 	.word	0x00402041

00402e28 <main>:

/************************************************************************/
/* main                                                                */
/************************************************************************/

int main(void) {
  402e28:	b570      	push	{r4, r5, r6, lr}
  402e2a:	b088      	sub	sp, #32
  sysclk_init();
  402e2c:	4b2f      	ldr	r3, [pc, #188]	; (402eec <main+0xc4>)
  402e2e:	4798      	blx	r3
  board_init();
  402e30:	4b2f      	ldr	r3, [pc, #188]	; (402ef0 <main+0xc8>)
  402e32:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402e34:	4d2f      	ldr	r5, [pc, #188]	; (402ef4 <main+0xcc>)
  402e36:	4b30      	ldr	r3, [pc, #192]	; (402ef8 <main+0xd0>)
  402e38:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402e3a:	4a30      	ldr	r2, [pc, #192]	; (402efc <main+0xd4>)
  402e3c:	4b30      	ldr	r3, [pc, #192]	; (402f00 <main+0xd8>)
  402e3e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402e40:	4a30      	ldr	r2, [pc, #192]	; (402f04 <main+0xdc>)
  402e42:	4b31      	ldr	r3, [pc, #196]	; (402f08 <main+0xe0>)
  402e44:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402e46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402e4a:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  402e4c:	23c0      	movs	r3, #192	; 0xc0
  402e4e:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  402e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402e54:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  402e56:	2400      	movs	r4, #0
  402e58:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402e5a:	9406      	str	r4, [sp, #24]
  402e5c:	200e      	movs	r0, #14
  402e5e:	4b2b      	ldr	r3, [pc, #172]	; (402f0c <main+0xe4>)
  402e60:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402e62:	4a2b      	ldr	r2, [pc, #172]	; (402f10 <main+0xe8>)
  402e64:	a902      	add	r1, sp, #8
  402e66:	4628      	mov	r0, r5
  402e68:	4b2a      	ldr	r3, [pc, #168]	; (402f14 <main+0xec>)
  402e6a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402e6c:	4628      	mov	r0, r5
  402e6e:	4b2a      	ldr	r3, [pc, #168]	; (402f18 <main+0xf0>)
  402e70:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e72:	4628      	mov	r0, r5
  402e74:	4b29      	ldr	r3, [pc, #164]	; (402f1c <main+0xf4>)
  402e76:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402e78:	4e29      	ldr	r6, [pc, #164]	; (402f20 <main+0xf8>)
  402e7a:	6833      	ldr	r3, [r6, #0]
  402e7c:	4621      	mov	r1, r4
  402e7e:	6898      	ldr	r0, [r3, #8]
  402e80:	4d28      	ldr	r5, [pc, #160]	; (402f24 <main+0xfc>)
  402e82:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402e84:	6833      	ldr	r3, [r6, #0]
  402e86:	4621      	mov	r1, r4
  402e88:	6858      	ldr	r0, [r3, #4]
  402e8a:	47a8      	blx	r5
  setbuf(stdout, NULL);
  402e8c:	6833      	ldr	r3, [r6, #0]
  402e8e:	4621      	mov	r1, r4
  402e90:	6898      	ldr	r0, [r3, #8]
  402e92:	47a8      	blx	r5

  /* Initialize the console uart */
  configure_console();

  /* Output demo information. */
  printf("-- Freertos Example --\n\r");
  402e94:	4824      	ldr	r0, [pc, #144]	; (402f28 <main+0x100>)
  402e96:	4d25      	ldr	r5, [pc, #148]	; (402f2c <main+0x104>)
  402e98:	47a8      	blx	r5
  printf("-- %s\n\r", BOARD_NAME);
  402e9a:	4925      	ldr	r1, [pc, #148]	; (402f30 <main+0x108>)
  402e9c:	4825      	ldr	r0, [pc, #148]	; (402f34 <main+0x10c>)
  402e9e:	47a8      	blx	r5
  printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402ea0:	4a25      	ldr	r2, [pc, #148]	; (402f38 <main+0x110>)
  402ea2:	4926      	ldr	r1, [pc, #152]	; (402f3c <main+0x114>)
  402ea4:	4826      	ldr	r0, [pc, #152]	; (402f40 <main+0x118>)
  402ea6:	47a8      	blx	r5

  /* Create task to make led blink */
  if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402ea8:	9401      	str	r4, [sp, #4]
  402eaa:	9400      	str	r4, [sp, #0]
  402eac:	4623      	mov	r3, r4
  402eae:	f44f 7280 	mov.w	r2, #256	; 0x100
  402eb2:	4924      	ldr	r1, [pc, #144]	; (402f44 <main+0x11c>)
  402eb4:	4824      	ldr	r0, [pc, #144]	; (402f48 <main+0x120>)
  402eb6:	4c25      	ldr	r4, [pc, #148]	; (402f4c <main+0x124>)
  402eb8:	47a0      	blx	r4
  402eba:	2801      	cmp	r0, #1
  402ebc:	d002      	beq.n	402ec4 <main+0x9c>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test led task\r\n");
  402ebe:	4824      	ldr	r0, [pc, #144]	; (402f50 <main+0x128>)
  402ec0:	4b24      	ldr	r3, [pc, #144]	; (402f54 <main+0x12c>)
  402ec2:	4798      	blx	r3
  }
  if (xTaskCreate(task_imu, "Imu", TASK_LED_STACK_SIZE, NULL,
  402ec4:	2300      	movs	r3, #0
  402ec6:	9301      	str	r3, [sp, #4]
  402ec8:	9300      	str	r3, [sp, #0]
  402eca:	f44f 7280 	mov.w	r2, #256	; 0x100
  402ece:	4922      	ldr	r1, [pc, #136]	; (402f58 <main+0x130>)
  402ed0:	4822      	ldr	r0, [pc, #136]	; (402f5c <main+0x134>)
  402ed2:	4c1e      	ldr	r4, [pc, #120]	; (402f4c <main+0x124>)
  402ed4:	47a0      	blx	r4
  402ed6:	2801      	cmp	r0, #1
  402ed8:	d002      	beq.n	402ee0 <main+0xb8>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test imu task\r\n");
  402eda:	4821      	ldr	r0, [pc, #132]	; (402f60 <main+0x138>)
  402edc:	4b1d      	ldr	r3, [pc, #116]	; (402f54 <main+0x12c>)
  402ede:	4798      	blx	r3
  }
  /* Start the scheduler. */
  vTaskStartScheduler();
  402ee0:	4b20      	ldr	r3, [pc, #128]	; (402f64 <main+0x13c>)
  402ee2:	4798      	blx	r3

  /* Will only get here if there was insufficient memory to create the idle
   * task. */
  return 0;
}
  402ee4:	2000      	movs	r0, #0
  402ee6:	b008      	add	sp, #32
  402ee8:	bd70      	pop	{r4, r5, r6, pc}
  402eea:	bf00      	nop
  402eec:	004001d5 	.word	0x004001d5
  402ef0:	004002d1 	.word	0x004002d1
  402ef4:	40028000 	.word	0x40028000
  402ef8:	20400bd0 	.word	0x20400bd0
  402efc:	00402945 	.word	0x00402945
  402f00:	20400bcc 	.word	0x20400bcc
  402f04:	00402869 	.word	0x00402869
  402f08:	20400bc8 	.word	0x20400bc8
  402f0c:	00400711 	.word	0x00400711
  402f10:	08f0d180 	.word	0x08f0d180
  402f14:	00400a39 	.word	0x00400a39
  402f18:	00400a8d 	.word	0x00400a8d
  402f1c:	00400a93 	.word	0x00400a93
  402f20:	2040000c 	.word	0x2040000c
  402f24:	00403b89 	.word	0x00403b89
  402f28:	004087a8 	.word	0x004087a8
  402f2c:	00403a91 	.word	0x00403a91
  402f30:	004087c4 	.word	0x004087c4
  402f34:	004087d0 	.word	0x004087d0
  402f38:	004087d8 	.word	0x004087d8
  402f3c:	004087e4 	.word	0x004087e4
  402f40:	004087f0 	.word	0x004087f0
  402f44:	00408808 	.word	0x00408808
  402f48:	00402df9 	.word	0x00402df9
  402f4c:	00401b39 	.word	0x00401b39
  402f50:	0040880c 	.word	0x0040880c
  402f54:	00403b55 	.word	0x00403b55
  402f58:	0040882c 	.word	0x0040882c
  402f5c:	00402b29 	.word	0x00402b29
  402f60:	00408830 	.word	0x00408830
  402f64:	00401d2d 	.word	0x00401d2d

00402f68 <__aeabi_drsub>:
  402f68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402f6c:	e002      	b.n	402f74 <__adddf3>
  402f6e:	bf00      	nop

00402f70 <__aeabi_dsub>:
  402f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402f74 <__adddf3>:
  402f74:	b530      	push	{r4, r5, lr}
  402f76:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402f7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402f7e:	ea94 0f05 	teq	r4, r5
  402f82:	bf08      	it	eq
  402f84:	ea90 0f02 	teqeq	r0, r2
  402f88:	bf1f      	itttt	ne
  402f8a:	ea54 0c00 	orrsne.w	ip, r4, r0
  402f8e:	ea55 0c02 	orrsne.w	ip, r5, r2
  402f92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402f96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402f9a:	f000 80e2 	beq.w	403162 <__adddf3+0x1ee>
  402f9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402fa2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402fa6:	bfb8      	it	lt
  402fa8:	426d      	neglt	r5, r5
  402faa:	dd0c      	ble.n	402fc6 <__adddf3+0x52>
  402fac:	442c      	add	r4, r5
  402fae:	ea80 0202 	eor.w	r2, r0, r2
  402fb2:	ea81 0303 	eor.w	r3, r1, r3
  402fb6:	ea82 0000 	eor.w	r0, r2, r0
  402fba:	ea83 0101 	eor.w	r1, r3, r1
  402fbe:	ea80 0202 	eor.w	r2, r0, r2
  402fc2:	ea81 0303 	eor.w	r3, r1, r3
  402fc6:	2d36      	cmp	r5, #54	; 0x36
  402fc8:	bf88      	it	hi
  402fca:	bd30      	pophi	{r4, r5, pc}
  402fcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402fd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402fd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402fdc:	d002      	beq.n	402fe4 <__adddf3+0x70>
  402fde:	4240      	negs	r0, r0
  402fe0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402fe4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402fe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402fec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402ff0:	d002      	beq.n	402ff8 <__adddf3+0x84>
  402ff2:	4252      	negs	r2, r2
  402ff4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402ff8:	ea94 0f05 	teq	r4, r5
  402ffc:	f000 80a7 	beq.w	40314e <__adddf3+0x1da>
  403000:	f1a4 0401 	sub.w	r4, r4, #1
  403004:	f1d5 0e20 	rsbs	lr, r5, #32
  403008:	db0d      	blt.n	403026 <__adddf3+0xb2>
  40300a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40300e:	fa22 f205 	lsr.w	r2, r2, r5
  403012:	1880      	adds	r0, r0, r2
  403014:	f141 0100 	adc.w	r1, r1, #0
  403018:	fa03 f20e 	lsl.w	r2, r3, lr
  40301c:	1880      	adds	r0, r0, r2
  40301e:	fa43 f305 	asr.w	r3, r3, r5
  403022:	4159      	adcs	r1, r3
  403024:	e00e      	b.n	403044 <__adddf3+0xd0>
  403026:	f1a5 0520 	sub.w	r5, r5, #32
  40302a:	f10e 0e20 	add.w	lr, lr, #32
  40302e:	2a01      	cmp	r2, #1
  403030:	fa03 fc0e 	lsl.w	ip, r3, lr
  403034:	bf28      	it	cs
  403036:	f04c 0c02 	orrcs.w	ip, ip, #2
  40303a:	fa43 f305 	asr.w	r3, r3, r5
  40303e:	18c0      	adds	r0, r0, r3
  403040:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403048:	d507      	bpl.n	40305a <__adddf3+0xe6>
  40304a:	f04f 0e00 	mov.w	lr, #0
  40304e:	f1dc 0c00 	rsbs	ip, ip, #0
  403052:	eb7e 0000 	sbcs.w	r0, lr, r0
  403056:	eb6e 0101 	sbc.w	r1, lr, r1
  40305a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40305e:	d31b      	bcc.n	403098 <__adddf3+0x124>
  403060:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403064:	d30c      	bcc.n	403080 <__adddf3+0x10c>
  403066:	0849      	lsrs	r1, r1, #1
  403068:	ea5f 0030 	movs.w	r0, r0, rrx
  40306c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403070:	f104 0401 	add.w	r4, r4, #1
  403074:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403078:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40307c:	f080 809a 	bcs.w	4031b4 <__adddf3+0x240>
  403080:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403084:	bf08      	it	eq
  403086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40308a:	f150 0000 	adcs.w	r0, r0, #0
  40308e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403092:	ea41 0105 	orr.w	r1, r1, r5
  403096:	bd30      	pop	{r4, r5, pc}
  403098:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40309c:	4140      	adcs	r0, r0
  40309e:	eb41 0101 	adc.w	r1, r1, r1
  4030a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4030a6:	f1a4 0401 	sub.w	r4, r4, #1
  4030aa:	d1e9      	bne.n	403080 <__adddf3+0x10c>
  4030ac:	f091 0f00 	teq	r1, #0
  4030b0:	bf04      	itt	eq
  4030b2:	4601      	moveq	r1, r0
  4030b4:	2000      	moveq	r0, #0
  4030b6:	fab1 f381 	clz	r3, r1
  4030ba:	bf08      	it	eq
  4030bc:	3320      	addeq	r3, #32
  4030be:	f1a3 030b 	sub.w	r3, r3, #11
  4030c2:	f1b3 0220 	subs.w	r2, r3, #32
  4030c6:	da0c      	bge.n	4030e2 <__adddf3+0x16e>
  4030c8:	320c      	adds	r2, #12
  4030ca:	dd08      	ble.n	4030de <__adddf3+0x16a>
  4030cc:	f102 0c14 	add.w	ip, r2, #20
  4030d0:	f1c2 020c 	rsb	r2, r2, #12
  4030d4:	fa01 f00c 	lsl.w	r0, r1, ip
  4030d8:	fa21 f102 	lsr.w	r1, r1, r2
  4030dc:	e00c      	b.n	4030f8 <__adddf3+0x184>
  4030de:	f102 0214 	add.w	r2, r2, #20
  4030e2:	bfd8      	it	le
  4030e4:	f1c2 0c20 	rsble	ip, r2, #32
  4030e8:	fa01 f102 	lsl.w	r1, r1, r2
  4030ec:	fa20 fc0c 	lsr.w	ip, r0, ip
  4030f0:	bfdc      	itt	le
  4030f2:	ea41 010c 	orrle.w	r1, r1, ip
  4030f6:	4090      	lslle	r0, r2
  4030f8:	1ae4      	subs	r4, r4, r3
  4030fa:	bfa2      	ittt	ge
  4030fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403100:	4329      	orrge	r1, r5
  403102:	bd30      	popge	{r4, r5, pc}
  403104:	ea6f 0404 	mvn.w	r4, r4
  403108:	3c1f      	subs	r4, #31
  40310a:	da1c      	bge.n	403146 <__adddf3+0x1d2>
  40310c:	340c      	adds	r4, #12
  40310e:	dc0e      	bgt.n	40312e <__adddf3+0x1ba>
  403110:	f104 0414 	add.w	r4, r4, #20
  403114:	f1c4 0220 	rsb	r2, r4, #32
  403118:	fa20 f004 	lsr.w	r0, r0, r4
  40311c:	fa01 f302 	lsl.w	r3, r1, r2
  403120:	ea40 0003 	orr.w	r0, r0, r3
  403124:	fa21 f304 	lsr.w	r3, r1, r4
  403128:	ea45 0103 	orr.w	r1, r5, r3
  40312c:	bd30      	pop	{r4, r5, pc}
  40312e:	f1c4 040c 	rsb	r4, r4, #12
  403132:	f1c4 0220 	rsb	r2, r4, #32
  403136:	fa20 f002 	lsr.w	r0, r0, r2
  40313a:	fa01 f304 	lsl.w	r3, r1, r4
  40313e:	ea40 0003 	orr.w	r0, r0, r3
  403142:	4629      	mov	r1, r5
  403144:	bd30      	pop	{r4, r5, pc}
  403146:	fa21 f004 	lsr.w	r0, r1, r4
  40314a:	4629      	mov	r1, r5
  40314c:	bd30      	pop	{r4, r5, pc}
  40314e:	f094 0f00 	teq	r4, #0
  403152:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403156:	bf06      	itte	eq
  403158:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40315c:	3401      	addeq	r4, #1
  40315e:	3d01      	subne	r5, #1
  403160:	e74e      	b.n	403000 <__adddf3+0x8c>
  403162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403166:	bf18      	it	ne
  403168:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40316c:	d029      	beq.n	4031c2 <__adddf3+0x24e>
  40316e:	ea94 0f05 	teq	r4, r5
  403172:	bf08      	it	eq
  403174:	ea90 0f02 	teqeq	r0, r2
  403178:	d005      	beq.n	403186 <__adddf3+0x212>
  40317a:	ea54 0c00 	orrs.w	ip, r4, r0
  40317e:	bf04      	itt	eq
  403180:	4619      	moveq	r1, r3
  403182:	4610      	moveq	r0, r2
  403184:	bd30      	pop	{r4, r5, pc}
  403186:	ea91 0f03 	teq	r1, r3
  40318a:	bf1e      	ittt	ne
  40318c:	2100      	movne	r1, #0
  40318e:	2000      	movne	r0, #0
  403190:	bd30      	popne	{r4, r5, pc}
  403192:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403196:	d105      	bne.n	4031a4 <__adddf3+0x230>
  403198:	0040      	lsls	r0, r0, #1
  40319a:	4149      	adcs	r1, r1
  40319c:	bf28      	it	cs
  40319e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4031a2:	bd30      	pop	{r4, r5, pc}
  4031a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4031a8:	bf3c      	itt	cc
  4031aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4031ae:	bd30      	popcc	{r4, r5, pc}
  4031b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4031b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4031b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4031bc:	f04f 0000 	mov.w	r0, #0
  4031c0:	bd30      	pop	{r4, r5, pc}
  4031c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4031c6:	bf1a      	itte	ne
  4031c8:	4619      	movne	r1, r3
  4031ca:	4610      	movne	r0, r2
  4031cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4031d0:	bf1c      	itt	ne
  4031d2:	460b      	movne	r3, r1
  4031d4:	4602      	movne	r2, r0
  4031d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4031da:	bf06      	itte	eq
  4031dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4031e0:	ea91 0f03 	teqeq	r1, r3
  4031e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4031e8:	bd30      	pop	{r4, r5, pc}
  4031ea:	bf00      	nop

004031ec <__aeabi_ui2d>:
  4031ec:	f090 0f00 	teq	r0, #0
  4031f0:	bf04      	itt	eq
  4031f2:	2100      	moveq	r1, #0
  4031f4:	4770      	bxeq	lr
  4031f6:	b530      	push	{r4, r5, lr}
  4031f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4031fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403200:	f04f 0500 	mov.w	r5, #0
  403204:	f04f 0100 	mov.w	r1, #0
  403208:	e750      	b.n	4030ac <__adddf3+0x138>
  40320a:	bf00      	nop

0040320c <__aeabi_i2d>:
  40320c:	f090 0f00 	teq	r0, #0
  403210:	bf04      	itt	eq
  403212:	2100      	moveq	r1, #0
  403214:	4770      	bxeq	lr
  403216:	b530      	push	{r4, r5, lr}
  403218:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40321c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403220:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403224:	bf48      	it	mi
  403226:	4240      	negmi	r0, r0
  403228:	f04f 0100 	mov.w	r1, #0
  40322c:	e73e      	b.n	4030ac <__adddf3+0x138>
  40322e:	bf00      	nop

00403230 <__aeabi_f2d>:
  403230:	0042      	lsls	r2, r0, #1
  403232:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403236:	ea4f 0131 	mov.w	r1, r1, rrx
  40323a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40323e:	bf1f      	itttt	ne
  403240:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403248:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40324c:	4770      	bxne	lr
  40324e:	f092 0f00 	teq	r2, #0
  403252:	bf14      	ite	ne
  403254:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403258:	4770      	bxeq	lr
  40325a:	b530      	push	{r4, r5, lr}
  40325c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403268:	e720      	b.n	4030ac <__adddf3+0x138>
  40326a:	bf00      	nop

0040326c <__aeabi_ul2d>:
  40326c:	ea50 0201 	orrs.w	r2, r0, r1
  403270:	bf08      	it	eq
  403272:	4770      	bxeq	lr
  403274:	b530      	push	{r4, r5, lr}
  403276:	f04f 0500 	mov.w	r5, #0
  40327a:	e00a      	b.n	403292 <__aeabi_l2d+0x16>

0040327c <__aeabi_l2d>:
  40327c:	ea50 0201 	orrs.w	r2, r0, r1
  403280:	bf08      	it	eq
  403282:	4770      	bxeq	lr
  403284:	b530      	push	{r4, r5, lr}
  403286:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40328a:	d502      	bpl.n	403292 <__aeabi_l2d+0x16>
  40328c:	4240      	negs	r0, r0
  40328e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403292:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403296:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40329a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40329e:	f43f aedc 	beq.w	40305a <__adddf3+0xe6>
  4032a2:	f04f 0203 	mov.w	r2, #3
  4032a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4032aa:	bf18      	it	ne
  4032ac:	3203      	addne	r2, #3
  4032ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4032b2:	bf18      	it	ne
  4032b4:	3203      	addne	r2, #3
  4032b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4032ba:	f1c2 0320 	rsb	r3, r2, #32
  4032be:	fa00 fc03 	lsl.w	ip, r0, r3
  4032c2:	fa20 f002 	lsr.w	r0, r0, r2
  4032c6:	fa01 fe03 	lsl.w	lr, r1, r3
  4032ca:	ea40 000e 	orr.w	r0, r0, lr
  4032ce:	fa21 f102 	lsr.w	r1, r1, r2
  4032d2:	4414      	add	r4, r2
  4032d4:	e6c1      	b.n	40305a <__adddf3+0xe6>
  4032d6:	bf00      	nop

004032d8 <__libc_init_array>:
  4032d8:	b570      	push	{r4, r5, r6, lr}
  4032da:	4e0f      	ldr	r6, [pc, #60]	; (403318 <__libc_init_array+0x40>)
  4032dc:	4d0f      	ldr	r5, [pc, #60]	; (40331c <__libc_init_array+0x44>)
  4032de:	1b76      	subs	r6, r6, r5
  4032e0:	10b6      	asrs	r6, r6, #2
  4032e2:	bf18      	it	ne
  4032e4:	2400      	movne	r4, #0
  4032e6:	d005      	beq.n	4032f4 <__libc_init_array+0x1c>
  4032e8:	3401      	adds	r4, #1
  4032ea:	f855 3b04 	ldr.w	r3, [r5], #4
  4032ee:	4798      	blx	r3
  4032f0:	42a6      	cmp	r6, r4
  4032f2:	d1f9      	bne.n	4032e8 <__libc_init_array+0x10>
  4032f4:	4e0a      	ldr	r6, [pc, #40]	; (403320 <__libc_init_array+0x48>)
  4032f6:	4d0b      	ldr	r5, [pc, #44]	; (403324 <__libc_init_array+0x4c>)
  4032f8:	1b76      	subs	r6, r6, r5
  4032fa:	f005 fc7d 	bl	408bf8 <_init>
  4032fe:	10b6      	asrs	r6, r6, #2
  403300:	bf18      	it	ne
  403302:	2400      	movne	r4, #0
  403304:	d006      	beq.n	403314 <__libc_init_array+0x3c>
  403306:	3401      	adds	r4, #1
  403308:	f855 3b04 	ldr.w	r3, [r5], #4
  40330c:	4798      	blx	r3
  40330e:	42a6      	cmp	r6, r4
  403310:	d1f9      	bne.n	403306 <__libc_init_array+0x2e>
  403312:	bd70      	pop	{r4, r5, r6, pc}
  403314:	bd70      	pop	{r4, r5, r6, pc}
  403316:	bf00      	nop
  403318:	00408c04 	.word	0x00408c04
  40331c:	00408c04 	.word	0x00408c04
  403320:	00408c0c 	.word	0x00408c0c
  403324:	00408c04 	.word	0x00408c04

00403328 <malloc>:
  403328:	4b02      	ldr	r3, [pc, #8]	; (403334 <malloc+0xc>)
  40332a:	4601      	mov	r1, r0
  40332c:	6818      	ldr	r0, [r3, #0]
  40332e:	f000 b80b 	b.w	403348 <_malloc_r>
  403332:	bf00      	nop
  403334:	2040000c 	.word	0x2040000c

00403338 <free>:
  403338:	4b02      	ldr	r3, [pc, #8]	; (403344 <free+0xc>)
  40333a:	4601      	mov	r1, r0
  40333c:	6818      	ldr	r0, [r3, #0]
  40333e:	f003 ba27 	b.w	406790 <_free_r>
  403342:	bf00      	nop
  403344:	2040000c 	.word	0x2040000c

00403348 <_malloc_r>:
  403348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40334c:	f101 060b 	add.w	r6, r1, #11
  403350:	2e16      	cmp	r6, #22
  403352:	b083      	sub	sp, #12
  403354:	4605      	mov	r5, r0
  403356:	f240 809e 	bls.w	403496 <_malloc_r+0x14e>
  40335a:	f036 0607 	bics.w	r6, r6, #7
  40335e:	f100 80bd 	bmi.w	4034dc <_malloc_r+0x194>
  403362:	42b1      	cmp	r1, r6
  403364:	f200 80ba 	bhi.w	4034dc <_malloc_r+0x194>
  403368:	f000 fb86 	bl	403a78 <__malloc_lock>
  40336c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403370:	f0c0 8293 	bcc.w	40389a <_malloc_r+0x552>
  403374:	0a73      	lsrs	r3, r6, #9
  403376:	f000 80b8 	beq.w	4034ea <_malloc_r+0x1a2>
  40337a:	2b04      	cmp	r3, #4
  40337c:	f200 8179 	bhi.w	403672 <_malloc_r+0x32a>
  403380:	09b3      	lsrs	r3, r6, #6
  403382:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403386:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40338a:	00c3      	lsls	r3, r0, #3
  40338c:	4fbf      	ldr	r7, [pc, #764]	; (40368c <_malloc_r+0x344>)
  40338e:	443b      	add	r3, r7
  403390:	f1a3 0108 	sub.w	r1, r3, #8
  403394:	685c      	ldr	r4, [r3, #4]
  403396:	42a1      	cmp	r1, r4
  403398:	d106      	bne.n	4033a8 <_malloc_r+0x60>
  40339a:	e00c      	b.n	4033b6 <_malloc_r+0x6e>
  40339c:	2a00      	cmp	r2, #0
  40339e:	f280 80aa 	bge.w	4034f6 <_malloc_r+0x1ae>
  4033a2:	68e4      	ldr	r4, [r4, #12]
  4033a4:	42a1      	cmp	r1, r4
  4033a6:	d006      	beq.n	4033b6 <_malloc_r+0x6e>
  4033a8:	6863      	ldr	r3, [r4, #4]
  4033aa:	f023 0303 	bic.w	r3, r3, #3
  4033ae:	1b9a      	subs	r2, r3, r6
  4033b0:	2a0f      	cmp	r2, #15
  4033b2:	ddf3      	ble.n	40339c <_malloc_r+0x54>
  4033b4:	4670      	mov	r0, lr
  4033b6:	693c      	ldr	r4, [r7, #16]
  4033b8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4036a0 <_malloc_r+0x358>
  4033bc:	4574      	cmp	r4, lr
  4033be:	f000 81ab 	beq.w	403718 <_malloc_r+0x3d0>
  4033c2:	6863      	ldr	r3, [r4, #4]
  4033c4:	f023 0303 	bic.w	r3, r3, #3
  4033c8:	1b9a      	subs	r2, r3, r6
  4033ca:	2a0f      	cmp	r2, #15
  4033cc:	f300 8190 	bgt.w	4036f0 <_malloc_r+0x3a8>
  4033d0:	2a00      	cmp	r2, #0
  4033d2:	f8c7 e014 	str.w	lr, [r7, #20]
  4033d6:	f8c7 e010 	str.w	lr, [r7, #16]
  4033da:	f280 809d 	bge.w	403518 <_malloc_r+0x1d0>
  4033de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4033e2:	f080 8161 	bcs.w	4036a8 <_malloc_r+0x360>
  4033e6:	08db      	lsrs	r3, r3, #3
  4033e8:	f103 0c01 	add.w	ip, r3, #1
  4033ec:	1099      	asrs	r1, r3, #2
  4033ee:	687a      	ldr	r2, [r7, #4]
  4033f0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4033f4:	f8c4 8008 	str.w	r8, [r4, #8]
  4033f8:	2301      	movs	r3, #1
  4033fa:	408b      	lsls	r3, r1
  4033fc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403400:	4313      	orrs	r3, r2
  403402:	3908      	subs	r1, #8
  403404:	60e1      	str	r1, [r4, #12]
  403406:	607b      	str	r3, [r7, #4]
  403408:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40340c:	f8c8 400c 	str.w	r4, [r8, #12]
  403410:	1082      	asrs	r2, r0, #2
  403412:	2401      	movs	r4, #1
  403414:	4094      	lsls	r4, r2
  403416:	429c      	cmp	r4, r3
  403418:	f200 808b 	bhi.w	403532 <_malloc_r+0x1ea>
  40341c:	421c      	tst	r4, r3
  40341e:	d106      	bne.n	40342e <_malloc_r+0xe6>
  403420:	f020 0003 	bic.w	r0, r0, #3
  403424:	0064      	lsls	r4, r4, #1
  403426:	421c      	tst	r4, r3
  403428:	f100 0004 	add.w	r0, r0, #4
  40342c:	d0fa      	beq.n	403424 <_malloc_r+0xdc>
  40342e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403432:	46cc      	mov	ip, r9
  403434:	4680      	mov	r8, r0
  403436:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40343a:	459c      	cmp	ip, r3
  40343c:	d107      	bne.n	40344e <_malloc_r+0x106>
  40343e:	e16d      	b.n	40371c <_malloc_r+0x3d4>
  403440:	2a00      	cmp	r2, #0
  403442:	f280 817b 	bge.w	40373c <_malloc_r+0x3f4>
  403446:	68db      	ldr	r3, [r3, #12]
  403448:	459c      	cmp	ip, r3
  40344a:	f000 8167 	beq.w	40371c <_malloc_r+0x3d4>
  40344e:	6859      	ldr	r1, [r3, #4]
  403450:	f021 0103 	bic.w	r1, r1, #3
  403454:	1b8a      	subs	r2, r1, r6
  403456:	2a0f      	cmp	r2, #15
  403458:	ddf2      	ble.n	403440 <_malloc_r+0xf8>
  40345a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40345e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403462:	9300      	str	r3, [sp, #0]
  403464:	199c      	adds	r4, r3, r6
  403466:	4628      	mov	r0, r5
  403468:	f046 0601 	orr.w	r6, r6, #1
  40346c:	f042 0501 	orr.w	r5, r2, #1
  403470:	605e      	str	r6, [r3, #4]
  403472:	f8c8 c00c 	str.w	ip, [r8, #12]
  403476:	f8cc 8008 	str.w	r8, [ip, #8]
  40347a:	617c      	str	r4, [r7, #20]
  40347c:	613c      	str	r4, [r7, #16]
  40347e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403482:	f8c4 e008 	str.w	lr, [r4, #8]
  403486:	6065      	str	r5, [r4, #4]
  403488:	505a      	str	r2, [r3, r1]
  40348a:	f000 fafb 	bl	403a84 <__malloc_unlock>
  40348e:	9b00      	ldr	r3, [sp, #0]
  403490:	f103 0408 	add.w	r4, r3, #8
  403494:	e01e      	b.n	4034d4 <_malloc_r+0x18c>
  403496:	2910      	cmp	r1, #16
  403498:	d820      	bhi.n	4034dc <_malloc_r+0x194>
  40349a:	f000 faed 	bl	403a78 <__malloc_lock>
  40349e:	2610      	movs	r6, #16
  4034a0:	2318      	movs	r3, #24
  4034a2:	2002      	movs	r0, #2
  4034a4:	4f79      	ldr	r7, [pc, #484]	; (40368c <_malloc_r+0x344>)
  4034a6:	443b      	add	r3, r7
  4034a8:	f1a3 0208 	sub.w	r2, r3, #8
  4034ac:	685c      	ldr	r4, [r3, #4]
  4034ae:	4294      	cmp	r4, r2
  4034b0:	f000 813d 	beq.w	40372e <_malloc_r+0x3e6>
  4034b4:	6863      	ldr	r3, [r4, #4]
  4034b6:	68e1      	ldr	r1, [r4, #12]
  4034b8:	68a6      	ldr	r6, [r4, #8]
  4034ba:	f023 0303 	bic.w	r3, r3, #3
  4034be:	4423      	add	r3, r4
  4034c0:	4628      	mov	r0, r5
  4034c2:	685a      	ldr	r2, [r3, #4]
  4034c4:	60f1      	str	r1, [r6, #12]
  4034c6:	f042 0201 	orr.w	r2, r2, #1
  4034ca:	608e      	str	r6, [r1, #8]
  4034cc:	605a      	str	r2, [r3, #4]
  4034ce:	f000 fad9 	bl	403a84 <__malloc_unlock>
  4034d2:	3408      	adds	r4, #8
  4034d4:	4620      	mov	r0, r4
  4034d6:	b003      	add	sp, #12
  4034d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034dc:	2400      	movs	r4, #0
  4034de:	230c      	movs	r3, #12
  4034e0:	4620      	mov	r0, r4
  4034e2:	602b      	str	r3, [r5, #0]
  4034e4:	b003      	add	sp, #12
  4034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034ea:	2040      	movs	r0, #64	; 0x40
  4034ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  4034f0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4034f4:	e74a      	b.n	40338c <_malloc_r+0x44>
  4034f6:	4423      	add	r3, r4
  4034f8:	68e1      	ldr	r1, [r4, #12]
  4034fa:	685a      	ldr	r2, [r3, #4]
  4034fc:	68a6      	ldr	r6, [r4, #8]
  4034fe:	f042 0201 	orr.w	r2, r2, #1
  403502:	60f1      	str	r1, [r6, #12]
  403504:	4628      	mov	r0, r5
  403506:	608e      	str	r6, [r1, #8]
  403508:	605a      	str	r2, [r3, #4]
  40350a:	f000 fabb 	bl	403a84 <__malloc_unlock>
  40350e:	3408      	adds	r4, #8
  403510:	4620      	mov	r0, r4
  403512:	b003      	add	sp, #12
  403514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403518:	4423      	add	r3, r4
  40351a:	4628      	mov	r0, r5
  40351c:	685a      	ldr	r2, [r3, #4]
  40351e:	f042 0201 	orr.w	r2, r2, #1
  403522:	605a      	str	r2, [r3, #4]
  403524:	f000 faae 	bl	403a84 <__malloc_unlock>
  403528:	3408      	adds	r4, #8
  40352a:	4620      	mov	r0, r4
  40352c:	b003      	add	sp, #12
  40352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403532:	68bc      	ldr	r4, [r7, #8]
  403534:	6863      	ldr	r3, [r4, #4]
  403536:	f023 0803 	bic.w	r8, r3, #3
  40353a:	45b0      	cmp	r8, r6
  40353c:	d304      	bcc.n	403548 <_malloc_r+0x200>
  40353e:	eba8 0306 	sub.w	r3, r8, r6
  403542:	2b0f      	cmp	r3, #15
  403544:	f300 8085 	bgt.w	403652 <_malloc_r+0x30a>
  403548:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4036a4 <_malloc_r+0x35c>
  40354c:	4b50      	ldr	r3, [pc, #320]	; (403690 <_malloc_r+0x348>)
  40354e:	f8d9 2000 	ldr.w	r2, [r9]
  403552:	681b      	ldr	r3, [r3, #0]
  403554:	3201      	adds	r2, #1
  403556:	4433      	add	r3, r6
  403558:	eb04 0a08 	add.w	sl, r4, r8
  40355c:	f000 8155 	beq.w	40380a <_malloc_r+0x4c2>
  403560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403564:	330f      	adds	r3, #15
  403566:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40356a:	f02b 0b0f 	bic.w	fp, fp, #15
  40356e:	4659      	mov	r1, fp
  403570:	4628      	mov	r0, r5
  403572:	f000 faf7 	bl	403b64 <_sbrk_r>
  403576:	1c41      	adds	r1, r0, #1
  403578:	4602      	mov	r2, r0
  40357a:	f000 80fc 	beq.w	403776 <_malloc_r+0x42e>
  40357e:	4582      	cmp	sl, r0
  403580:	f200 80f7 	bhi.w	403772 <_malloc_r+0x42a>
  403584:	4b43      	ldr	r3, [pc, #268]	; (403694 <_malloc_r+0x34c>)
  403586:	6819      	ldr	r1, [r3, #0]
  403588:	4459      	add	r1, fp
  40358a:	6019      	str	r1, [r3, #0]
  40358c:	f000 814d 	beq.w	40382a <_malloc_r+0x4e2>
  403590:	f8d9 0000 	ldr.w	r0, [r9]
  403594:	3001      	adds	r0, #1
  403596:	bf1b      	ittet	ne
  403598:	eba2 0a0a 	subne.w	sl, r2, sl
  40359c:	4451      	addne	r1, sl
  40359e:	f8c9 2000 	streq.w	r2, [r9]
  4035a2:	6019      	strne	r1, [r3, #0]
  4035a4:	f012 0107 	ands.w	r1, r2, #7
  4035a8:	f000 8115 	beq.w	4037d6 <_malloc_r+0x48e>
  4035ac:	f1c1 0008 	rsb	r0, r1, #8
  4035b0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4035b4:	4402      	add	r2, r0
  4035b6:	3108      	adds	r1, #8
  4035b8:	eb02 090b 	add.w	r9, r2, fp
  4035bc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4035c0:	eba1 0909 	sub.w	r9, r1, r9
  4035c4:	4649      	mov	r1, r9
  4035c6:	4628      	mov	r0, r5
  4035c8:	9301      	str	r3, [sp, #4]
  4035ca:	9200      	str	r2, [sp, #0]
  4035cc:	f000 faca 	bl	403b64 <_sbrk_r>
  4035d0:	1c43      	adds	r3, r0, #1
  4035d2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4035d6:	f000 8143 	beq.w	403860 <_malloc_r+0x518>
  4035da:	1a80      	subs	r0, r0, r2
  4035dc:	4448      	add	r0, r9
  4035de:	f040 0001 	orr.w	r0, r0, #1
  4035e2:	6819      	ldr	r1, [r3, #0]
  4035e4:	60ba      	str	r2, [r7, #8]
  4035e6:	4449      	add	r1, r9
  4035e8:	42bc      	cmp	r4, r7
  4035ea:	6050      	str	r0, [r2, #4]
  4035ec:	6019      	str	r1, [r3, #0]
  4035ee:	d017      	beq.n	403620 <_malloc_r+0x2d8>
  4035f0:	f1b8 0f0f 	cmp.w	r8, #15
  4035f4:	f240 80fb 	bls.w	4037ee <_malloc_r+0x4a6>
  4035f8:	6860      	ldr	r0, [r4, #4]
  4035fa:	f1a8 020c 	sub.w	r2, r8, #12
  4035fe:	f022 0207 	bic.w	r2, r2, #7
  403602:	eb04 0e02 	add.w	lr, r4, r2
  403606:	f000 0001 	and.w	r0, r0, #1
  40360a:	f04f 0c05 	mov.w	ip, #5
  40360e:	4310      	orrs	r0, r2
  403610:	2a0f      	cmp	r2, #15
  403612:	6060      	str	r0, [r4, #4]
  403614:	f8ce c004 	str.w	ip, [lr, #4]
  403618:	f8ce c008 	str.w	ip, [lr, #8]
  40361c:	f200 8117 	bhi.w	40384e <_malloc_r+0x506>
  403620:	4b1d      	ldr	r3, [pc, #116]	; (403698 <_malloc_r+0x350>)
  403622:	68bc      	ldr	r4, [r7, #8]
  403624:	681a      	ldr	r2, [r3, #0]
  403626:	4291      	cmp	r1, r2
  403628:	bf88      	it	hi
  40362a:	6019      	strhi	r1, [r3, #0]
  40362c:	4b1b      	ldr	r3, [pc, #108]	; (40369c <_malloc_r+0x354>)
  40362e:	681a      	ldr	r2, [r3, #0]
  403630:	4291      	cmp	r1, r2
  403632:	6862      	ldr	r2, [r4, #4]
  403634:	bf88      	it	hi
  403636:	6019      	strhi	r1, [r3, #0]
  403638:	f022 0203 	bic.w	r2, r2, #3
  40363c:	4296      	cmp	r6, r2
  40363e:	eba2 0306 	sub.w	r3, r2, r6
  403642:	d801      	bhi.n	403648 <_malloc_r+0x300>
  403644:	2b0f      	cmp	r3, #15
  403646:	dc04      	bgt.n	403652 <_malloc_r+0x30a>
  403648:	4628      	mov	r0, r5
  40364a:	f000 fa1b 	bl	403a84 <__malloc_unlock>
  40364e:	2400      	movs	r4, #0
  403650:	e740      	b.n	4034d4 <_malloc_r+0x18c>
  403652:	19a2      	adds	r2, r4, r6
  403654:	f043 0301 	orr.w	r3, r3, #1
  403658:	f046 0601 	orr.w	r6, r6, #1
  40365c:	6066      	str	r6, [r4, #4]
  40365e:	4628      	mov	r0, r5
  403660:	60ba      	str	r2, [r7, #8]
  403662:	6053      	str	r3, [r2, #4]
  403664:	f000 fa0e 	bl	403a84 <__malloc_unlock>
  403668:	3408      	adds	r4, #8
  40366a:	4620      	mov	r0, r4
  40366c:	b003      	add	sp, #12
  40366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403672:	2b14      	cmp	r3, #20
  403674:	d971      	bls.n	40375a <_malloc_r+0x412>
  403676:	2b54      	cmp	r3, #84	; 0x54
  403678:	f200 80a3 	bhi.w	4037c2 <_malloc_r+0x47a>
  40367c:	0b33      	lsrs	r3, r6, #12
  40367e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403682:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403686:	00c3      	lsls	r3, r0, #3
  403688:	e680      	b.n	40338c <_malloc_r+0x44>
  40368a:	bf00      	nop
  40368c:	20400438 	.word	0x20400438
  403690:	20400bc4 	.word	0x20400bc4
  403694:	20400b94 	.word	0x20400b94
  403698:	20400bbc 	.word	0x20400bbc
  40369c:	20400bc0 	.word	0x20400bc0
  4036a0:	20400440 	.word	0x20400440
  4036a4:	20400840 	.word	0x20400840
  4036a8:	0a5a      	lsrs	r2, r3, #9
  4036aa:	2a04      	cmp	r2, #4
  4036ac:	d95b      	bls.n	403766 <_malloc_r+0x41e>
  4036ae:	2a14      	cmp	r2, #20
  4036b0:	f200 80ae 	bhi.w	403810 <_malloc_r+0x4c8>
  4036b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4036b8:	00c9      	lsls	r1, r1, #3
  4036ba:	325b      	adds	r2, #91	; 0x5b
  4036bc:	eb07 0c01 	add.w	ip, r7, r1
  4036c0:	5879      	ldr	r1, [r7, r1]
  4036c2:	f1ac 0c08 	sub.w	ip, ip, #8
  4036c6:	458c      	cmp	ip, r1
  4036c8:	f000 8088 	beq.w	4037dc <_malloc_r+0x494>
  4036cc:	684a      	ldr	r2, [r1, #4]
  4036ce:	f022 0203 	bic.w	r2, r2, #3
  4036d2:	4293      	cmp	r3, r2
  4036d4:	d273      	bcs.n	4037be <_malloc_r+0x476>
  4036d6:	6889      	ldr	r1, [r1, #8]
  4036d8:	458c      	cmp	ip, r1
  4036da:	d1f7      	bne.n	4036cc <_malloc_r+0x384>
  4036dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4036e0:	687b      	ldr	r3, [r7, #4]
  4036e2:	60e2      	str	r2, [r4, #12]
  4036e4:	f8c4 c008 	str.w	ip, [r4, #8]
  4036e8:	6094      	str	r4, [r2, #8]
  4036ea:	f8cc 400c 	str.w	r4, [ip, #12]
  4036ee:	e68f      	b.n	403410 <_malloc_r+0xc8>
  4036f0:	19a1      	adds	r1, r4, r6
  4036f2:	f046 0c01 	orr.w	ip, r6, #1
  4036f6:	f042 0601 	orr.w	r6, r2, #1
  4036fa:	f8c4 c004 	str.w	ip, [r4, #4]
  4036fe:	4628      	mov	r0, r5
  403700:	6179      	str	r1, [r7, #20]
  403702:	6139      	str	r1, [r7, #16]
  403704:	f8c1 e00c 	str.w	lr, [r1, #12]
  403708:	f8c1 e008 	str.w	lr, [r1, #8]
  40370c:	604e      	str	r6, [r1, #4]
  40370e:	50e2      	str	r2, [r4, r3]
  403710:	f000 f9b8 	bl	403a84 <__malloc_unlock>
  403714:	3408      	adds	r4, #8
  403716:	e6dd      	b.n	4034d4 <_malloc_r+0x18c>
  403718:	687b      	ldr	r3, [r7, #4]
  40371a:	e679      	b.n	403410 <_malloc_r+0xc8>
  40371c:	f108 0801 	add.w	r8, r8, #1
  403720:	f018 0f03 	tst.w	r8, #3
  403724:	f10c 0c08 	add.w	ip, ip, #8
  403728:	f47f ae85 	bne.w	403436 <_malloc_r+0xee>
  40372c:	e02d      	b.n	40378a <_malloc_r+0x442>
  40372e:	68dc      	ldr	r4, [r3, #12]
  403730:	42a3      	cmp	r3, r4
  403732:	bf08      	it	eq
  403734:	3002      	addeq	r0, #2
  403736:	f43f ae3e 	beq.w	4033b6 <_malloc_r+0x6e>
  40373a:	e6bb      	b.n	4034b4 <_malloc_r+0x16c>
  40373c:	4419      	add	r1, r3
  40373e:	461c      	mov	r4, r3
  403740:	684a      	ldr	r2, [r1, #4]
  403742:	68db      	ldr	r3, [r3, #12]
  403744:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403748:	f042 0201 	orr.w	r2, r2, #1
  40374c:	604a      	str	r2, [r1, #4]
  40374e:	4628      	mov	r0, r5
  403750:	60f3      	str	r3, [r6, #12]
  403752:	609e      	str	r6, [r3, #8]
  403754:	f000 f996 	bl	403a84 <__malloc_unlock>
  403758:	e6bc      	b.n	4034d4 <_malloc_r+0x18c>
  40375a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40375e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403762:	00c3      	lsls	r3, r0, #3
  403764:	e612      	b.n	40338c <_malloc_r+0x44>
  403766:	099a      	lsrs	r2, r3, #6
  403768:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40376c:	00c9      	lsls	r1, r1, #3
  40376e:	3238      	adds	r2, #56	; 0x38
  403770:	e7a4      	b.n	4036bc <_malloc_r+0x374>
  403772:	42bc      	cmp	r4, r7
  403774:	d054      	beq.n	403820 <_malloc_r+0x4d8>
  403776:	68bc      	ldr	r4, [r7, #8]
  403778:	6862      	ldr	r2, [r4, #4]
  40377a:	f022 0203 	bic.w	r2, r2, #3
  40377e:	e75d      	b.n	40363c <_malloc_r+0x2f4>
  403780:	f859 3908 	ldr.w	r3, [r9], #-8
  403784:	4599      	cmp	r9, r3
  403786:	f040 8086 	bne.w	403896 <_malloc_r+0x54e>
  40378a:	f010 0f03 	tst.w	r0, #3
  40378e:	f100 30ff 	add.w	r0, r0, #4294967295
  403792:	d1f5      	bne.n	403780 <_malloc_r+0x438>
  403794:	687b      	ldr	r3, [r7, #4]
  403796:	ea23 0304 	bic.w	r3, r3, r4
  40379a:	607b      	str	r3, [r7, #4]
  40379c:	0064      	lsls	r4, r4, #1
  40379e:	429c      	cmp	r4, r3
  4037a0:	f63f aec7 	bhi.w	403532 <_malloc_r+0x1ea>
  4037a4:	2c00      	cmp	r4, #0
  4037a6:	f43f aec4 	beq.w	403532 <_malloc_r+0x1ea>
  4037aa:	421c      	tst	r4, r3
  4037ac:	4640      	mov	r0, r8
  4037ae:	f47f ae3e 	bne.w	40342e <_malloc_r+0xe6>
  4037b2:	0064      	lsls	r4, r4, #1
  4037b4:	421c      	tst	r4, r3
  4037b6:	f100 0004 	add.w	r0, r0, #4
  4037ba:	d0fa      	beq.n	4037b2 <_malloc_r+0x46a>
  4037bc:	e637      	b.n	40342e <_malloc_r+0xe6>
  4037be:	468c      	mov	ip, r1
  4037c0:	e78c      	b.n	4036dc <_malloc_r+0x394>
  4037c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4037c6:	d815      	bhi.n	4037f4 <_malloc_r+0x4ac>
  4037c8:	0bf3      	lsrs	r3, r6, #15
  4037ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4037ce:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4037d2:	00c3      	lsls	r3, r0, #3
  4037d4:	e5da      	b.n	40338c <_malloc_r+0x44>
  4037d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4037da:	e6ed      	b.n	4035b8 <_malloc_r+0x270>
  4037dc:	687b      	ldr	r3, [r7, #4]
  4037de:	1092      	asrs	r2, r2, #2
  4037e0:	2101      	movs	r1, #1
  4037e2:	fa01 f202 	lsl.w	r2, r1, r2
  4037e6:	4313      	orrs	r3, r2
  4037e8:	607b      	str	r3, [r7, #4]
  4037ea:	4662      	mov	r2, ip
  4037ec:	e779      	b.n	4036e2 <_malloc_r+0x39a>
  4037ee:	2301      	movs	r3, #1
  4037f0:	6053      	str	r3, [r2, #4]
  4037f2:	e729      	b.n	403648 <_malloc_r+0x300>
  4037f4:	f240 5254 	movw	r2, #1364	; 0x554
  4037f8:	4293      	cmp	r3, r2
  4037fa:	d822      	bhi.n	403842 <_malloc_r+0x4fa>
  4037fc:	0cb3      	lsrs	r3, r6, #18
  4037fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403802:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403806:	00c3      	lsls	r3, r0, #3
  403808:	e5c0      	b.n	40338c <_malloc_r+0x44>
  40380a:	f103 0b10 	add.w	fp, r3, #16
  40380e:	e6ae      	b.n	40356e <_malloc_r+0x226>
  403810:	2a54      	cmp	r2, #84	; 0x54
  403812:	d829      	bhi.n	403868 <_malloc_r+0x520>
  403814:	0b1a      	lsrs	r2, r3, #12
  403816:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40381a:	00c9      	lsls	r1, r1, #3
  40381c:	326e      	adds	r2, #110	; 0x6e
  40381e:	e74d      	b.n	4036bc <_malloc_r+0x374>
  403820:	4b20      	ldr	r3, [pc, #128]	; (4038a4 <_malloc_r+0x55c>)
  403822:	6819      	ldr	r1, [r3, #0]
  403824:	4459      	add	r1, fp
  403826:	6019      	str	r1, [r3, #0]
  403828:	e6b2      	b.n	403590 <_malloc_r+0x248>
  40382a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40382e:	2800      	cmp	r0, #0
  403830:	f47f aeae 	bne.w	403590 <_malloc_r+0x248>
  403834:	eb08 030b 	add.w	r3, r8, fp
  403838:	68ba      	ldr	r2, [r7, #8]
  40383a:	f043 0301 	orr.w	r3, r3, #1
  40383e:	6053      	str	r3, [r2, #4]
  403840:	e6ee      	b.n	403620 <_malloc_r+0x2d8>
  403842:	207f      	movs	r0, #127	; 0x7f
  403844:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403848:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40384c:	e59e      	b.n	40338c <_malloc_r+0x44>
  40384e:	f104 0108 	add.w	r1, r4, #8
  403852:	4628      	mov	r0, r5
  403854:	9300      	str	r3, [sp, #0]
  403856:	f002 ff9b 	bl	406790 <_free_r>
  40385a:	9b00      	ldr	r3, [sp, #0]
  40385c:	6819      	ldr	r1, [r3, #0]
  40385e:	e6df      	b.n	403620 <_malloc_r+0x2d8>
  403860:	2001      	movs	r0, #1
  403862:	f04f 0900 	mov.w	r9, #0
  403866:	e6bc      	b.n	4035e2 <_malloc_r+0x29a>
  403868:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40386c:	d805      	bhi.n	40387a <_malloc_r+0x532>
  40386e:	0bda      	lsrs	r2, r3, #15
  403870:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403874:	00c9      	lsls	r1, r1, #3
  403876:	3277      	adds	r2, #119	; 0x77
  403878:	e720      	b.n	4036bc <_malloc_r+0x374>
  40387a:	f240 5154 	movw	r1, #1364	; 0x554
  40387e:	428a      	cmp	r2, r1
  403880:	d805      	bhi.n	40388e <_malloc_r+0x546>
  403882:	0c9a      	lsrs	r2, r3, #18
  403884:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403888:	00c9      	lsls	r1, r1, #3
  40388a:	327c      	adds	r2, #124	; 0x7c
  40388c:	e716      	b.n	4036bc <_malloc_r+0x374>
  40388e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403892:	227e      	movs	r2, #126	; 0x7e
  403894:	e712      	b.n	4036bc <_malloc_r+0x374>
  403896:	687b      	ldr	r3, [r7, #4]
  403898:	e780      	b.n	40379c <_malloc_r+0x454>
  40389a:	08f0      	lsrs	r0, r6, #3
  40389c:	f106 0308 	add.w	r3, r6, #8
  4038a0:	e600      	b.n	4034a4 <_malloc_r+0x15c>
  4038a2:	bf00      	nop
  4038a4:	20400b94 	.word	0x20400b94

004038a8 <memcpy>:
  4038a8:	4684      	mov	ip, r0
  4038aa:	ea41 0300 	orr.w	r3, r1, r0
  4038ae:	f013 0303 	ands.w	r3, r3, #3
  4038b2:	d16d      	bne.n	403990 <memcpy+0xe8>
  4038b4:	3a40      	subs	r2, #64	; 0x40
  4038b6:	d341      	bcc.n	40393c <memcpy+0x94>
  4038b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4038bc:	f840 3b04 	str.w	r3, [r0], #4
  4038c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4038c4:	f840 3b04 	str.w	r3, [r0], #4
  4038c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4038cc:	f840 3b04 	str.w	r3, [r0], #4
  4038d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4038d4:	f840 3b04 	str.w	r3, [r0], #4
  4038d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4038dc:	f840 3b04 	str.w	r3, [r0], #4
  4038e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4038e4:	f840 3b04 	str.w	r3, [r0], #4
  4038e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4038ec:	f840 3b04 	str.w	r3, [r0], #4
  4038f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4038f4:	f840 3b04 	str.w	r3, [r0], #4
  4038f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4038fc:	f840 3b04 	str.w	r3, [r0], #4
  403900:	f851 3b04 	ldr.w	r3, [r1], #4
  403904:	f840 3b04 	str.w	r3, [r0], #4
  403908:	f851 3b04 	ldr.w	r3, [r1], #4
  40390c:	f840 3b04 	str.w	r3, [r0], #4
  403910:	f851 3b04 	ldr.w	r3, [r1], #4
  403914:	f840 3b04 	str.w	r3, [r0], #4
  403918:	f851 3b04 	ldr.w	r3, [r1], #4
  40391c:	f840 3b04 	str.w	r3, [r0], #4
  403920:	f851 3b04 	ldr.w	r3, [r1], #4
  403924:	f840 3b04 	str.w	r3, [r0], #4
  403928:	f851 3b04 	ldr.w	r3, [r1], #4
  40392c:	f840 3b04 	str.w	r3, [r0], #4
  403930:	f851 3b04 	ldr.w	r3, [r1], #4
  403934:	f840 3b04 	str.w	r3, [r0], #4
  403938:	3a40      	subs	r2, #64	; 0x40
  40393a:	d2bd      	bcs.n	4038b8 <memcpy+0x10>
  40393c:	3230      	adds	r2, #48	; 0x30
  40393e:	d311      	bcc.n	403964 <memcpy+0xbc>
  403940:	f851 3b04 	ldr.w	r3, [r1], #4
  403944:	f840 3b04 	str.w	r3, [r0], #4
  403948:	f851 3b04 	ldr.w	r3, [r1], #4
  40394c:	f840 3b04 	str.w	r3, [r0], #4
  403950:	f851 3b04 	ldr.w	r3, [r1], #4
  403954:	f840 3b04 	str.w	r3, [r0], #4
  403958:	f851 3b04 	ldr.w	r3, [r1], #4
  40395c:	f840 3b04 	str.w	r3, [r0], #4
  403960:	3a10      	subs	r2, #16
  403962:	d2ed      	bcs.n	403940 <memcpy+0x98>
  403964:	320c      	adds	r2, #12
  403966:	d305      	bcc.n	403974 <memcpy+0xcc>
  403968:	f851 3b04 	ldr.w	r3, [r1], #4
  40396c:	f840 3b04 	str.w	r3, [r0], #4
  403970:	3a04      	subs	r2, #4
  403972:	d2f9      	bcs.n	403968 <memcpy+0xc0>
  403974:	3204      	adds	r2, #4
  403976:	d008      	beq.n	40398a <memcpy+0xe2>
  403978:	07d2      	lsls	r2, r2, #31
  40397a:	bf1c      	itt	ne
  40397c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403980:	f800 3b01 	strbne.w	r3, [r0], #1
  403984:	d301      	bcc.n	40398a <memcpy+0xe2>
  403986:	880b      	ldrh	r3, [r1, #0]
  403988:	8003      	strh	r3, [r0, #0]
  40398a:	4660      	mov	r0, ip
  40398c:	4770      	bx	lr
  40398e:	bf00      	nop
  403990:	2a08      	cmp	r2, #8
  403992:	d313      	bcc.n	4039bc <memcpy+0x114>
  403994:	078b      	lsls	r3, r1, #30
  403996:	d08d      	beq.n	4038b4 <memcpy+0xc>
  403998:	f010 0303 	ands.w	r3, r0, #3
  40399c:	d08a      	beq.n	4038b4 <memcpy+0xc>
  40399e:	f1c3 0304 	rsb	r3, r3, #4
  4039a2:	1ad2      	subs	r2, r2, r3
  4039a4:	07db      	lsls	r3, r3, #31
  4039a6:	bf1c      	itt	ne
  4039a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4039ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4039b0:	d380      	bcc.n	4038b4 <memcpy+0xc>
  4039b2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4039b6:	f820 3b02 	strh.w	r3, [r0], #2
  4039ba:	e77b      	b.n	4038b4 <memcpy+0xc>
  4039bc:	3a04      	subs	r2, #4
  4039be:	d3d9      	bcc.n	403974 <memcpy+0xcc>
  4039c0:	3a01      	subs	r2, #1
  4039c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4039c6:	f800 3b01 	strb.w	r3, [r0], #1
  4039ca:	d2f9      	bcs.n	4039c0 <memcpy+0x118>
  4039cc:	780b      	ldrb	r3, [r1, #0]
  4039ce:	7003      	strb	r3, [r0, #0]
  4039d0:	784b      	ldrb	r3, [r1, #1]
  4039d2:	7043      	strb	r3, [r0, #1]
  4039d4:	788b      	ldrb	r3, [r1, #2]
  4039d6:	7083      	strb	r3, [r0, #2]
  4039d8:	4660      	mov	r0, ip
  4039da:	4770      	bx	lr

004039dc <memset>:
  4039dc:	b470      	push	{r4, r5, r6}
  4039de:	0786      	lsls	r6, r0, #30
  4039e0:	d046      	beq.n	403a70 <memset+0x94>
  4039e2:	1e54      	subs	r4, r2, #1
  4039e4:	2a00      	cmp	r2, #0
  4039e6:	d041      	beq.n	403a6c <memset+0x90>
  4039e8:	b2ca      	uxtb	r2, r1
  4039ea:	4603      	mov	r3, r0
  4039ec:	e002      	b.n	4039f4 <memset+0x18>
  4039ee:	f114 34ff 	adds.w	r4, r4, #4294967295
  4039f2:	d33b      	bcc.n	403a6c <memset+0x90>
  4039f4:	f803 2b01 	strb.w	r2, [r3], #1
  4039f8:	079d      	lsls	r5, r3, #30
  4039fa:	d1f8      	bne.n	4039ee <memset+0x12>
  4039fc:	2c03      	cmp	r4, #3
  4039fe:	d92e      	bls.n	403a5e <memset+0x82>
  403a00:	b2cd      	uxtb	r5, r1
  403a02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403a06:	2c0f      	cmp	r4, #15
  403a08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403a0c:	d919      	bls.n	403a42 <memset+0x66>
  403a0e:	f103 0210 	add.w	r2, r3, #16
  403a12:	4626      	mov	r6, r4
  403a14:	3e10      	subs	r6, #16
  403a16:	2e0f      	cmp	r6, #15
  403a18:	f842 5c10 	str.w	r5, [r2, #-16]
  403a1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  403a20:	f842 5c08 	str.w	r5, [r2, #-8]
  403a24:	f842 5c04 	str.w	r5, [r2, #-4]
  403a28:	f102 0210 	add.w	r2, r2, #16
  403a2c:	d8f2      	bhi.n	403a14 <memset+0x38>
  403a2e:	f1a4 0210 	sub.w	r2, r4, #16
  403a32:	f022 020f 	bic.w	r2, r2, #15
  403a36:	f004 040f 	and.w	r4, r4, #15
  403a3a:	3210      	adds	r2, #16
  403a3c:	2c03      	cmp	r4, #3
  403a3e:	4413      	add	r3, r2
  403a40:	d90d      	bls.n	403a5e <memset+0x82>
  403a42:	461e      	mov	r6, r3
  403a44:	4622      	mov	r2, r4
  403a46:	3a04      	subs	r2, #4
  403a48:	2a03      	cmp	r2, #3
  403a4a:	f846 5b04 	str.w	r5, [r6], #4
  403a4e:	d8fa      	bhi.n	403a46 <memset+0x6a>
  403a50:	1f22      	subs	r2, r4, #4
  403a52:	f022 0203 	bic.w	r2, r2, #3
  403a56:	3204      	adds	r2, #4
  403a58:	4413      	add	r3, r2
  403a5a:	f004 0403 	and.w	r4, r4, #3
  403a5e:	b12c      	cbz	r4, 403a6c <memset+0x90>
  403a60:	b2c9      	uxtb	r1, r1
  403a62:	441c      	add	r4, r3
  403a64:	f803 1b01 	strb.w	r1, [r3], #1
  403a68:	429c      	cmp	r4, r3
  403a6a:	d1fb      	bne.n	403a64 <memset+0x88>
  403a6c:	bc70      	pop	{r4, r5, r6}
  403a6e:	4770      	bx	lr
  403a70:	4614      	mov	r4, r2
  403a72:	4603      	mov	r3, r0
  403a74:	e7c2      	b.n	4039fc <memset+0x20>
  403a76:	bf00      	nop

00403a78 <__malloc_lock>:
  403a78:	4801      	ldr	r0, [pc, #4]	; (403a80 <__malloc_lock+0x8>)
  403a7a:	f003 b923 	b.w	406cc4 <__retarget_lock_acquire_recursive>
  403a7e:	bf00      	nop
  403a80:	20400c24 	.word	0x20400c24

00403a84 <__malloc_unlock>:
  403a84:	4801      	ldr	r0, [pc, #4]	; (403a8c <__malloc_unlock+0x8>)
  403a86:	f003 b91f 	b.w	406cc8 <__retarget_lock_release_recursive>
  403a8a:	bf00      	nop
  403a8c:	20400c24 	.word	0x20400c24

00403a90 <printf>:
  403a90:	b40f      	push	{r0, r1, r2, r3}
  403a92:	b500      	push	{lr}
  403a94:	4907      	ldr	r1, [pc, #28]	; (403ab4 <printf+0x24>)
  403a96:	b083      	sub	sp, #12
  403a98:	ab04      	add	r3, sp, #16
  403a9a:	6808      	ldr	r0, [r1, #0]
  403a9c:	f853 2b04 	ldr.w	r2, [r3], #4
  403aa0:	6881      	ldr	r1, [r0, #8]
  403aa2:	9301      	str	r3, [sp, #4]
  403aa4:	f000 f9ba 	bl	403e1c <_vfprintf_r>
  403aa8:	b003      	add	sp, #12
  403aaa:	f85d eb04 	ldr.w	lr, [sp], #4
  403aae:	b004      	add	sp, #16
  403ab0:	4770      	bx	lr
  403ab2:	bf00      	nop
  403ab4:	2040000c 	.word	0x2040000c

00403ab8 <_puts_r>:
  403ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403aba:	4605      	mov	r5, r0
  403abc:	b089      	sub	sp, #36	; 0x24
  403abe:	4608      	mov	r0, r1
  403ac0:	460c      	mov	r4, r1
  403ac2:	f000 f93d 	bl	403d40 <strlen>
  403ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403ac8:	4f21      	ldr	r7, [pc, #132]	; (403b50 <_puts_r+0x98>)
  403aca:	9404      	str	r4, [sp, #16]
  403acc:	2601      	movs	r6, #1
  403ace:	1c44      	adds	r4, r0, #1
  403ad0:	a904      	add	r1, sp, #16
  403ad2:	2202      	movs	r2, #2
  403ad4:	9403      	str	r4, [sp, #12]
  403ad6:	9005      	str	r0, [sp, #20]
  403ad8:	68ac      	ldr	r4, [r5, #8]
  403ada:	9706      	str	r7, [sp, #24]
  403adc:	9607      	str	r6, [sp, #28]
  403ade:	9101      	str	r1, [sp, #4]
  403ae0:	9202      	str	r2, [sp, #8]
  403ae2:	b353      	cbz	r3, 403b3a <_puts_r+0x82>
  403ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403ae6:	f013 0f01 	tst.w	r3, #1
  403aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aee:	b29a      	uxth	r2, r3
  403af0:	d101      	bne.n	403af6 <_puts_r+0x3e>
  403af2:	0590      	lsls	r0, r2, #22
  403af4:	d525      	bpl.n	403b42 <_puts_r+0x8a>
  403af6:	0491      	lsls	r1, r2, #18
  403af8:	d406      	bmi.n	403b08 <_puts_r+0x50>
  403afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  403b04:	81a3      	strh	r3, [r4, #12]
  403b06:	6662      	str	r2, [r4, #100]	; 0x64
  403b08:	4628      	mov	r0, r5
  403b0a:	aa01      	add	r2, sp, #4
  403b0c:	4621      	mov	r1, r4
  403b0e:	f002 ff25 	bl	40695c <__sfvwrite_r>
  403b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403b14:	2800      	cmp	r0, #0
  403b16:	bf0c      	ite	eq
  403b18:	250a      	moveq	r5, #10
  403b1a:	f04f 35ff 	movne.w	r5, #4294967295
  403b1e:	07da      	lsls	r2, r3, #31
  403b20:	d402      	bmi.n	403b28 <_puts_r+0x70>
  403b22:	89a3      	ldrh	r3, [r4, #12]
  403b24:	059b      	lsls	r3, r3, #22
  403b26:	d502      	bpl.n	403b2e <_puts_r+0x76>
  403b28:	4628      	mov	r0, r5
  403b2a:	b009      	add	sp, #36	; 0x24
  403b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b30:	f003 f8ca 	bl	406cc8 <__retarget_lock_release_recursive>
  403b34:	4628      	mov	r0, r5
  403b36:	b009      	add	sp, #36	; 0x24
  403b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b3a:	4628      	mov	r0, r5
  403b3c:	f002 fd86 	bl	40664c <__sinit>
  403b40:	e7d0      	b.n	403ae4 <_puts_r+0x2c>
  403b42:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403b44:	f003 f8be 	bl	406cc4 <__retarget_lock_acquire_recursive>
  403b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b4c:	b29a      	uxth	r2, r3
  403b4e:	e7d2      	b.n	403af6 <_puts_r+0x3e>
  403b50:	00408924 	.word	0x00408924

00403b54 <puts>:
  403b54:	4b02      	ldr	r3, [pc, #8]	; (403b60 <puts+0xc>)
  403b56:	4601      	mov	r1, r0
  403b58:	6818      	ldr	r0, [r3, #0]
  403b5a:	f7ff bfad 	b.w	403ab8 <_puts_r>
  403b5e:	bf00      	nop
  403b60:	2040000c 	.word	0x2040000c

00403b64 <_sbrk_r>:
  403b64:	b538      	push	{r3, r4, r5, lr}
  403b66:	4c07      	ldr	r4, [pc, #28]	; (403b84 <_sbrk_r+0x20>)
  403b68:	2300      	movs	r3, #0
  403b6a:	4605      	mov	r5, r0
  403b6c:	4608      	mov	r0, r1
  403b6e:	6023      	str	r3, [r4, #0]
  403b70:	f7fd f8da 	bl	400d28 <_sbrk>
  403b74:	1c43      	adds	r3, r0, #1
  403b76:	d000      	beq.n	403b7a <_sbrk_r+0x16>
  403b78:	bd38      	pop	{r3, r4, r5, pc}
  403b7a:	6823      	ldr	r3, [r4, #0]
  403b7c:	2b00      	cmp	r3, #0
  403b7e:	d0fb      	beq.n	403b78 <_sbrk_r+0x14>
  403b80:	602b      	str	r3, [r5, #0]
  403b82:	bd38      	pop	{r3, r4, r5, pc}
  403b84:	20400c38 	.word	0x20400c38

00403b88 <setbuf>:
  403b88:	2900      	cmp	r1, #0
  403b8a:	bf0c      	ite	eq
  403b8c:	2202      	moveq	r2, #2
  403b8e:	2200      	movne	r2, #0
  403b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403b94:	f000 b800 	b.w	403b98 <setvbuf>

00403b98 <setvbuf>:
  403b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403b9c:	4c61      	ldr	r4, [pc, #388]	; (403d24 <setvbuf+0x18c>)
  403b9e:	6825      	ldr	r5, [r4, #0]
  403ba0:	b083      	sub	sp, #12
  403ba2:	4604      	mov	r4, r0
  403ba4:	460f      	mov	r7, r1
  403ba6:	4690      	mov	r8, r2
  403ba8:	461e      	mov	r6, r3
  403baa:	b115      	cbz	r5, 403bb2 <setvbuf+0x1a>
  403bac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403bae:	2b00      	cmp	r3, #0
  403bb0:	d064      	beq.n	403c7c <setvbuf+0xe4>
  403bb2:	f1b8 0f02 	cmp.w	r8, #2
  403bb6:	d006      	beq.n	403bc6 <setvbuf+0x2e>
  403bb8:	f1b8 0f01 	cmp.w	r8, #1
  403bbc:	f200 809f 	bhi.w	403cfe <setvbuf+0x166>
  403bc0:	2e00      	cmp	r6, #0
  403bc2:	f2c0 809c 	blt.w	403cfe <setvbuf+0x166>
  403bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403bc8:	07d8      	lsls	r0, r3, #31
  403bca:	d534      	bpl.n	403c36 <setvbuf+0x9e>
  403bcc:	4621      	mov	r1, r4
  403bce:	4628      	mov	r0, r5
  403bd0:	f002 fce4 	bl	40659c <_fflush_r>
  403bd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403bd6:	b141      	cbz	r1, 403bea <setvbuf+0x52>
  403bd8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403bdc:	4299      	cmp	r1, r3
  403bde:	d002      	beq.n	403be6 <setvbuf+0x4e>
  403be0:	4628      	mov	r0, r5
  403be2:	f002 fdd5 	bl	406790 <_free_r>
  403be6:	2300      	movs	r3, #0
  403be8:	6323      	str	r3, [r4, #48]	; 0x30
  403bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bee:	2200      	movs	r2, #0
  403bf0:	61a2      	str	r2, [r4, #24]
  403bf2:	6062      	str	r2, [r4, #4]
  403bf4:	061a      	lsls	r2, r3, #24
  403bf6:	d43a      	bmi.n	403c6e <setvbuf+0xd6>
  403bf8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403bfc:	f023 0303 	bic.w	r3, r3, #3
  403c00:	f1b8 0f02 	cmp.w	r8, #2
  403c04:	81a3      	strh	r3, [r4, #12]
  403c06:	d01d      	beq.n	403c44 <setvbuf+0xac>
  403c08:	ab01      	add	r3, sp, #4
  403c0a:	466a      	mov	r2, sp
  403c0c:	4621      	mov	r1, r4
  403c0e:	4628      	mov	r0, r5
  403c10:	f003 f85c 	bl	406ccc <__swhatbuf_r>
  403c14:	89a3      	ldrh	r3, [r4, #12]
  403c16:	4318      	orrs	r0, r3
  403c18:	81a0      	strh	r0, [r4, #12]
  403c1a:	2e00      	cmp	r6, #0
  403c1c:	d132      	bne.n	403c84 <setvbuf+0xec>
  403c1e:	9e00      	ldr	r6, [sp, #0]
  403c20:	4630      	mov	r0, r6
  403c22:	f7ff fb81 	bl	403328 <malloc>
  403c26:	4607      	mov	r7, r0
  403c28:	2800      	cmp	r0, #0
  403c2a:	d06b      	beq.n	403d04 <setvbuf+0x16c>
  403c2c:	89a3      	ldrh	r3, [r4, #12]
  403c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c32:	81a3      	strh	r3, [r4, #12]
  403c34:	e028      	b.n	403c88 <setvbuf+0xf0>
  403c36:	89a3      	ldrh	r3, [r4, #12]
  403c38:	0599      	lsls	r1, r3, #22
  403c3a:	d4c7      	bmi.n	403bcc <setvbuf+0x34>
  403c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c3e:	f003 f841 	bl	406cc4 <__retarget_lock_acquire_recursive>
  403c42:	e7c3      	b.n	403bcc <setvbuf+0x34>
  403c44:	2500      	movs	r5, #0
  403c46:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403c48:	2600      	movs	r6, #0
  403c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403c4e:	f043 0302 	orr.w	r3, r3, #2
  403c52:	2001      	movs	r0, #1
  403c54:	60a6      	str	r6, [r4, #8]
  403c56:	07ce      	lsls	r6, r1, #31
  403c58:	81a3      	strh	r3, [r4, #12]
  403c5a:	6022      	str	r2, [r4, #0]
  403c5c:	6122      	str	r2, [r4, #16]
  403c5e:	6160      	str	r0, [r4, #20]
  403c60:	d401      	bmi.n	403c66 <setvbuf+0xce>
  403c62:	0598      	lsls	r0, r3, #22
  403c64:	d53e      	bpl.n	403ce4 <setvbuf+0x14c>
  403c66:	4628      	mov	r0, r5
  403c68:	b003      	add	sp, #12
  403c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c6e:	6921      	ldr	r1, [r4, #16]
  403c70:	4628      	mov	r0, r5
  403c72:	f002 fd8d 	bl	406790 <_free_r>
  403c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c7a:	e7bd      	b.n	403bf8 <setvbuf+0x60>
  403c7c:	4628      	mov	r0, r5
  403c7e:	f002 fce5 	bl	40664c <__sinit>
  403c82:	e796      	b.n	403bb2 <setvbuf+0x1a>
  403c84:	2f00      	cmp	r7, #0
  403c86:	d0cb      	beq.n	403c20 <setvbuf+0x88>
  403c88:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403c8a:	2b00      	cmp	r3, #0
  403c8c:	d033      	beq.n	403cf6 <setvbuf+0x15e>
  403c8e:	9b00      	ldr	r3, [sp, #0]
  403c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403c94:	6027      	str	r7, [r4, #0]
  403c96:	429e      	cmp	r6, r3
  403c98:	bf1c      	itt	ne
  403c9a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  403c9e:	81a2      	strhne	r2, [r4, #12]
  403ca0:	f1b8 0f01 	cmp.w	r8, #1
  403ca4:	bf04      	itt	eq
  403ca6:	f042 0201 	orreq.w	r2, r2, #1
  403caa:	81a2      	strheq	r2, [r4, #12]
  403cac:	b292      	uxth	r2, r2
  403cae:	f012 0308 	ands.w	r3, r2, #8
  403cb2:	6127      	str	r7, [r4, #16]
  403cb4:	6166      	str	r6, [r4, #20]
  403cb6:	d00e      	beq.n	403cd6 <setvbuf+0x13e>
  403cb8:	07d1      	lsls	r1, r2, #31
  403cba:	d51a      	bpl.n	403cf2 <setvbuf+0x15a>
  403cbc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403cbe:	4276      	negs	r6, r6
  403cc0:	2300      	movs	r3, #0
  403cc2:	f015 0501 	ands.w	r5, r5, #1
  403cc6:	61a6      	str	r6, [r4, #24]
  403cc8:	60a3      	str	r3, [r4, #8]
  403cca:	d009      	beq.n	403ce0 <setvbuf+0x148>
  403ccc:	2500      	movs	r5, #0
  403cce:	4628      	mov	r0, r5
  403cd0:	b003      	add	sp, #12
  403cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cd6:	60a3      	str	r3, [r4, #8]
  403cd8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403cda:	f015 0501 	ands.w	r5, r5, #1
  403cde:	d1f5      	bne.n	403ccc <setvbuf+0x134>
  403ce0:	0593      	lsls	r3, r2, #22
  403ce2:	d4c0      	bmi.n	403c66 <setvbuf+0xce>
  403ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403ce6:	f002 ffef 	bl	406cc8 <__retarget_lock_release_recursive>
  403cea:	4628      	mov	r0, r5
  403cec:	b003      	add	sp, #12
  403cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cf2:	60a6      	str	r6, [r4, #8]
  403cf4:	e7f0      	b.n	403cd8 <setvbuf+0x140>
  403cf6:	4628      	mov	r0, r5
  403cf8:	f002 fca8 	bl	40664c <__sinit>
  403cfc:	e7c7      	b.n	403c8e <setvbuf+0xf6>
  403cfe:	f04f 35ff 	mov.w	r5, #4294967295
  403d02:	e7b0      	b.n	403c66 <setvbuf+0xce>
  403d04:	f8dd 9000 	ldr.w	r9, [sp]
  403d08:	45b1      	cmp	r9, r6
  403d0a:	d004      	beq.n	403d16 <setvbuf+0x17e>
  403d0c:	4648      	mov	r0, r9
  403d0e:	f7ff fb0b 	bl	403328 <malloc>
  403d12:	4607      	mov	r7, r0
  403d14:	b920      	cbnz	r0, 403d20 <setvbuf+0x188>
  403d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403d1a:	f04f 35ff 	mov.w	r5, #4294967295
  403d1e:	e792      	b.n	403c46 <setvbuf+0xae>
  403d20:	464e      	mov	r6, r9
  403d22:	e783      	b.n	403c2c <setvbuf+0x94>
  403d24:	2040000c 	.word	0x2040000c
	...

00403d40 <strlen>:
  403d40:	f890 f000 	pld	[r0]
  403d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403d48:	f020 0107 	bic.w	r1, r0, #7
  403d4c:	f06f 0c00 	mvn.w	ip, #0
  403d50:	f010 0407 	ands.w	r4, r0, #7
  403d54:	f891 f020 	pld	[r1, #32]
  403d58:	f040 8049 	bne.w	403dee <strlen+0xae>
  403d5c:	f04f 0400 	mov.w	r4, #0
  403d60:	f06f 0007 	mvn.w	r0, #7
  403d64:	e9d1 2300 	ldrd	r2, r3, [r1]
  403d68:	f891 f040 	pld	[r1, #64]	; 0x40
  403d6c:	f100 0008 	add.w	r0, r0, #8
  403d70:	fa82 f24c 	uadd8	r2, r2, ip
  403d74:	faa4 f28c 	sel	r2, r4, ip
  403d78:	fa83 f34c 	uadd8	r3, r3, ip
  403d7c:	faa2 f38c 	sel	r3, r2, ip
  403d80:	bb4b      	cbnz	r3, 403dd6 <strlen+0x96>
  403d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403d86:	fa82 f24c 	uadd8	r2, r2, ip
  403d8a:	f100 0008 	add.w	r0, r0, #8
  403d8e:	faa4 f28c 	sel	r2, r4, ip
  403d92:	fa83 f34c 	uadd8	r3, r3, ip
  403d96:	faa2 f38c 	sel	r3, r2, ip
  403d9a:	b9e3      	cbnz	r3, 403dd6 <strlen+0x96>
  403d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403da0:	fa82 f24c 	uadd8	r2, r2, ip
  403da4:	f100 0008 	add.w	r0, r0, #8
  403da8:	faa4 f28c 	sel	r2, r4, ip
  403dac:	fa83 f34c 	uadd8	r3, r3, ip
  403db0:	faa2 f38c 	sel	r3, r2, ip
  403db4:	b97b      	cbnz	r3, 403dd6 <strlen+0x96>
  403db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403dba:	f101 0120 	add.w	r1, r1, #32
  403dbe:	fa82 f24c 	uadd8	r2, r2, ip
  403dc2:	f100 0008 	add.w	r0, r0, #8
  403dc6:	faa4 f28c 	sel	r2, r4, ip
  403dca:	fa83 f34c 	uadd8	r3, r3, ip
  403dce:	faa2 f38c 	sel	r3, r2, ip
  403dd2:	2b00      	cmp	r3, #0
  403dd4:	d0c6      	beq.n	403d64 <strlen+0x24>
  403dd6:	2a00      	cmp	r2, #0
  403dd8:	bf04      	itt	eq
  403dda:	3004      	addeq	r0, #4
  403ddc:	461a      	moveq	r2, r3
  403dde:	ba12      	rev	r2, r2
  403de0:	fab2 f282 	clz	r2, r2
  403de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403dec:	4770      	bx	lr
  403dee:	e9d1 2300 	ldrd	r2, r3, [r1]
  403df2:	f004 0503 	and.w	r5, r4, #3
  403df6:	f1c4 0000 	rsb	r0, r4, #0
  403dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403dfe:	f014 0f04 	tst.w	r4, #4
  403e02:	f891 f040 	pld	[r1, #64]	; 0x40
  403e06:	fa0c f505 	lsl.w	r5, ip, r5
  403e0a:	ea62 0205 	orn	r2, r2, r5
  403e0e:	bf1c      	itt	ne
  403e10:	ea63 0305 	ornne	r3, r3, r5
  403e14:	4662      	movne	r2, ip
  403e16:	f04f 0400 	mov.w	r4, #0
  403e1a:	e7a9      	b.n	403d70 <strlen+0x30>

00403e1c <_vfprintf_r>:
  403e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e20:	b0c1      	sub	sp, #260	; 0x104
  403e22:	461d      	mov	r5, r3
  403e24:	468a      	mov	sl, r1
  403e26:	4691      	mov	r9, r2
  403e28:	4604      	mov	r4, r0
  403e2a:	9008      	str	r0, [sp, #32]
  403e2c:	f002 ff38 	bl	406ca0 <_localeconv_r>
  403e30:	6803      	ldr	r3, [r0, #0]
  403e32:	9315      	str	r3, [sp, #84]	; 0x54
  403e34:	4618      	mov	r0, r3
  403e36:	f7ff ff83 	bl	403d40 <strlen>
  403e3a:	950e      	str	r5, [sp, #56]	; 0x38
  403e3c:	9014      	str	r0, [sp, #80]	; 0x50
  403e3e:	b11c      	cbz	r4, 403e48 <_vfprintf_r+0x2c>
  403e40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403e42:	2b00      	cmp	r3, #0
  403e44:	f000 825f 	beq.w	404306 <_vfprintf_r+0x4ea>
  403e48:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  403e4c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  403e50:	f013 0f01 	tst.w	r3, #1
  403e54:	b293      	uxth	r3, r2
  403e56:	d102      	bne.n	403e5e <_vfprintf_r+0x42>
  403e58:	0599      	lsls	r1, r3, #22
  403e5a:	f140 8275 	bpl.w	404348 <_vfprintf_r+0x52c>
  403e5e:	049f      	lsls	r7, r3, #18
  403e60:	d40a      	bmi.n	403e78 <_vfprintf_r+0x5c>
  403e62:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  403e66:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  403e6a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403e6e:	f8aa 300c 	strh.w	r3, [sl, #12]
  403e72:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  403e76:	b29b      	uxth	r3, r3
  403e78:	071e      	lsls	r6, r3, #28
  403e7a:	f140 8223 	bpl.w	4042c4 <_vfprintf_r+0x4a8>
  403e7e:	f8da 2010 	ldr.w	r2, [sl, #16]
  403e82:	2a00      	cmp	r2, #0
  403e84:	f000 821e 	beq.w	4042c4 <_vfprintf_r+0x4a8>
  403e88:	f003 021a 	and.w	r2, r3, #26
  403e8c:	2a0a      	cmp	r2, #10
  403e8e:	f000 823e 	beq.w	40430e <_vfprintf_r+0x4f2>
  403e92:	2300      	movs	r3, #0
  403e94:	4618      	mov	r0, r3
  403e96:	9311      	str	r3, [sp, #68]	; 0x44
  403e98:	9313      	str	r3, [sp, #76]	; 0x4c
  403e9a:	9312      	str	r3, [sp, #72]	; 0x48
  403e9c:	9325      	str	r3, [sp, #148]	; 0x94
  403e9e:	9324      	str	r3, [sp, #144]	; 0x90
  403ea0:	9318      	str	r3, [sp, #96]	; 0x60
  403ea2:	9319      	str	r3, [sp, #100]	; 0x64
  403ea4:	930b      	str	r3, [sp, #44]	; 0x2c
  403ea6:	ab30      	add	r3, sp, #192	; 0xc0
  403ea8:	9323      	str	r3, [sp, #140]	; 0x8c
  403eaa:	4698      	mov	r8, r3
  403eac:	9016      	str	r0, [sp, #88]	; 0x58
  403eae:	9017      	str	r0, [sp, #92]	; 0x5c
  403eb0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403eb4:	f899 3000 	ldrb.w	r3, [r9]
  403eb8:	464c      	mov	r4, r9
  403eba:	b1eb      	cbz	r3, 403ef8 <_vfprintf_r+0xdc>
  403ebc:	2b25      	cmp	r3, #37	; 0x25
  403ebe:	d102      	bne.n	403ec6 <_vfprintf_r+0xaa>
  403ec0:	e01a      	b.n	403ef8 <_vfprintf_r+0xdc>
  403ec2:	2b25      	cmp	r3, #37	; 0x25
  403ec4:	d003      	beq.n	403ece <_vfprintf_r+0xb2>
  403ec6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403eca:	2b00      	cmp	r3, #0
  403ecc:	d1f9      	bne.n	403ec2 <_vfprintf_r+0xa6>
  403ece:	eba4 0509 	sub.w	r5, r4, r9
  403ed2:	b18d      	cbz	r5, 403ef8 <_vfprintf_r+0xdc>
  403ed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ed6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403ed8:	f8c8 9000 	str.w	r9, [r8]
  403edc:	3301      	adds	r3, #1
  403ede:	442a      	add	r2, r5
  403ee0:	2b07      	cmp	r3, #7
  403ee2:	f8c8 5004 	str.w	r5, [r8, #4]
  403ee6:	9225      	str	r2, [sp, #148]	; 0x94
  403ee8:	9324      	str	r3, [sp, #144]	; 0x90
  403eea:	f300 8201 	bgt.w	4042f0 <_vfprintf_r+0x4d4>
  403eee:	f108 0808 	add.w	r8, r8, #8
  403ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ef4:	442b      	add	r3, r5
  403ef6:	930b      	str	r3, [sp, #44]	; 0x2c
  403ef8:	7823      	ldrb	r3, [r4, #0]
  403efa:	2b00      	cmp	r3, #0
  403efc:	f000 83f0 	beq.w	4046e0 <_vfprintf_r+0x8c4>
  403f00:	2300      	movs	r3, #0
  403f02:	461a      	mov	r2, r3
  403f04:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403f08:	4619      	mov	r1, r3
  403f0a:	930c      	str	r3, [sp, #48]	; 0x30
  403f0c:	469b      	mov	fp, r3
  403f0e:	7866      	ldrb	r6, [r4, #1]
  403f10:	f04f 33ff 	mov.w	r3, #4294967295
  403f14:	f104 0901 	add.w	r9, r4, #1
  403f18:	9309      	str	r3, [sp, #36]	; 0x24
  403f1a:	f109 0901 	add.w	r9, r9, #1
  403f1e:	f1a6 0320 	sub.w	r3, r6, #32
  403f22:	2b58      	cmp	r3, #88	; 0x58
  403f24:	f200 83bf 	bhi.w	4046a6 <_vfprintf_r+0x88a>
  403f28:	e8df f013 	tbh	[pc, r3, lsl #1]
  403f2c:	03bd02e0 	.word	0x03bd02e0
  403f30:	034f03bd 	.word	0x034f03bd
  403f34:	03bd03bd 	.word	0x03bd03bd
  403f38:	03bd03bd 	.word	0x03bd03bd
  403f3c:	03bd03bd 	.word	0x03bd03bd
  403f40:	03080354 	.word	0x03080354
  403f44:	021a03bd 	.word	0x021a03bd
  403f48:	03bd02e8 	.word	0x03bd02e8
  403f4c:	033a0303 	.word	0x033a0303
  403f50:	033a033a 	.word	0x033a033a
  403f54:	033a033a 	.word	0x033a033a
  403f58:	033a033a 	.word	0x033a033a
  403f5c:	033a033a 	.word	0x033a033a
  403f60:	03bd03bd 	.word	0x03bd03bd
  403f64:	03bd03bd 	.word	0x03bd03bd
  403f68:	03bd03bd 	.word	0x03bd03bd
  403f6c:	03bd03bd 	.word	0x03bd03bd
  403f70:	03bd03bd 	.word	0x03bd03bd
  403f74:	03620349 	.word	0x03620349
  403f78:	036203bd 	.word	0x036203bd
  403f7c:	03bd03bd 	.word	0x03bd03bd
  403f80:	03bd03bd 	.word	0x03bd03bd
  403f84:	03bd03a2 	.word	0x03bd03a2
  403f88:	006f03bd 	.word	0x006f03bd
  403f8c:	03bd03bd 	.word	0x03bd03bd
  403f90:	03bd03bd 	.word	0x03bd03bd
  403f94:	005903bd 	.word	0x005903bd
  403f98:	03bd03bd 	.word	0x03bd03bd
  403f9c:	03bd031e 	.word	0x03bd031e
  403fa0:	03bd03bd 	.word	0x03bd03bd
  403fa4:	03bd03bd 	.word	0x03bd03bd
  403fa8:	03bd03bd 	.word	0x03bd03bd
  403fac:	03bd03bd 	.word	0x03bd03bd
  403fb0:	032403bd 	.word	0x032403bd
  403fb4:	03620273 	.word	0x03620273
  403fb8:	03620362 	.word	0x03620362
  403fbc:	027302b7 	.word	0x027302b7
  403fc0:	03bd03bd 	.word	0x03bd03bd
  403fc4:	03bd02bc 	.word	0x03bd02bc
  403fc8:	007102c9 	.word	0x007102c9
  403fcc:	0247030d 	.word	0x0247030d
  403fd0:	025203bd 	.word	0x025203bd
  403fd4:	005b03bd 	.word	0x005b03bd
  403fd8:	03bd03bd 	.word	0x03bd03bd
  403fdc:	021f      	.short	0x021f
  403fde:	f04b 0b10 	orr.w	fp, fp, #16
  403fe2:	f01b 0f20 	tst.w	fp, #32
  403fe6:	f040 8353 	bne.w	404690 <_vfprintf_r+0x874>
  403fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403fec:	f01b 0f10 	tst.w	fp, #16
  403ff0:	4613      	mov	r3, r2
  403ff2:	f040 85b4 	bne.w	404b5e <_vfprintf_r+0xd42>
  403ff6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ffa:	f000 85b0 	beq.w	404b5e <_vfprintf_r+0xd42>
  403ffe:	8814      	ldrh	r4, [r2, #0]
  404000:	3204      	adds	r2, #4
  404002:	2500      	movs	r5, #0
  404004:	2301      	movs	r3, #1
  404006:	920e      	str	r2, [sp, #56]	; 0x38
  404008:	e014      	b.n	404034 <_vfprintf_r+0x218>
  40400a:	f04b 0b10 	orr.w	fp, fp, #16
  40400e:	f01b 0320 	ands.w	r3, fp, #32
  404012:	f040 8332 	bne.w	40467a <_vfprintf_r+0x85e>
  404016:	f01b 0210 	ands.w	r2, fp, #16
  40401a:	f040 8589 	bne.w	404b30 <_vfprintf_r+0xd14>
  40401e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404022:	f000 8585 	beq.w	404b30 <_vfprintf_r+0xd14>
  404026:	990e      	ldr	r1, [sp, #56]	; 0x38
  404028:	4613      	mov	r3, r2
  40402a:	460a      	mov	r2, r1
  40402c:	3204      	adds	r2, #4
  40402e:	880c      	ldrh	r4, [r1, #0]
  404030:	920e      	str	r2, [sp, #56]	; 0x38
  404032:	2500      	movs	r5, #0
  404034:	f04f 0a00 	mov.w	sl, #0
  404038:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40403c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40403e:	1c4a      	adds	r2, r1, #1
  404040:	f000 820b 	beq.w	40445a <_vfprintf_r+0x63e>
  404044:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404048:	9206      	str	r2, [sp, #24]
  40404a:	ea54 0205 	orrs.w	r2, r4, r5
  40404e:	f040 820a 	bne.w	404466 <_vfprintf_r+0x64a>
  404052:	2900      	cmp	r1, #0
  404054:	f040 846f 	bne.w	404936 <_vfprintf_r+0xb1a>
  404058:	2b00      	cmp	r3, #0
  40405a:	f040 852d 	bne.w	404ab8 <_vfprintf_r+0xc9c>
  40405e:	f01b 0301 	ands.w	r3, fp, #1
  404062:	930d      	str	r3, [sp, #52]	; 0x34
  404064:	f000 8668 	beq.w	404d38 <_vfprintf_r+0xf1c>
  404068:	af40      	add	r7, sp, #256	; 0x100
  40406a:	2330      	movs	r3, #48	; 0x30
  40406c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404070:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404074:	4293      	cmp	r3, r2
  404076:	bfb8      	it	lt
  404078:	4613      	movlt	r3, r2
  40407a:	9307      	str	r3, [sp, #28]
  40407c:	2300      	movs	r3, #0
  40407e:	9310      	str	r3, [sp, #64]	; 0x40
  404080:	f1ba 0f00 	cmp.w	sl, #0
  404084:	d002      	beq.n	40408c <_vfprintf_r+0x270>
  404086:	9b07      	ldr	r3, [sp, #28]
  404088:	3301      	adds	r3, #1
  40408a:	9307      	str	r3, [sp, #28]
  40408c:	9b06      	ldr	r3, [sp, #24]
  40408e:	f013 0302 	ands.w	r3, r3, #2
  404092:	930f      	str	r3, [sp, #60]	; 0x3c
  404094:	d002      	beq.n	40409c <_vfprintf_r+0x280>
  404096:	9b07      	ldr	r3, [sp, #28]
  404098:	3302      	adds	r3, #2
  40409a:	9307      	str	r3, [sp, #28]
  40409c:	9b06      	ldr	r3, [sp, #24]
  40409e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4040a2:	f040 831b 	bne.w	4046dc <_vfprintf_r+0x8c0>
  4040a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4040a8:	9a07      	ldr	r2, [sp, #28]
  4040aa:	eba3 0b02 	sub.w	fp, r3, r2
  4040ae:	f1bb 0f00 	cmp.w	fp, #0
  4040b2:	f340 8313 	ble.w	4046dc <_vfprintf_r+0x8c0>
  4040b6:	f1bb 0f10 	cmp.w	fp, #16
  4040ba:	9925      	ldr	r1, [sp, #148]	; 0x94
  4040bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4040be:	dd28      	ble.n	404112 <_vfprintf_r+0x2f6>
  4040c0:	4643      	mov	r3, r8
  4040c2:	2410      	movs	r4, #16
  4040c4:	46a8      	mov	r8, r5
  4040c6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4040ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4040cc:	e006      	b.n	4040dc <_vfprintf_r+0x2c0>
  4040ce:	f1ab 0b10 	sub.w	fp, fp, #16
  4040d2:	f1bb 0f10 	cmp.w	fp, #16
  4040d6:	f103 0308 	add.w	r3, r3, #8
  4040da:	dd18      	ble.n	40410e <_vfprintf_r+0x2f2>
  4040dc:	3201      	adds	r2, #1
  4040de:	48b9      	ldr	r0, [pc, #740]	; (4043c4 <_vfprintf_r+0x5a8>)
  4040e0:	9224      	str	r2, [sp, #144]	; 0x90
  4040e2:	3110      	adds	r1, #16
  4040e4:	2a07      	cmp	r2, #7
  4040e6:	9125      	str	r1, [sp, #148]	; 0x94
  4040e8:	e883 0011 	stmia.w	r3, {r0, r4}
  4040ec:	ddef      	ble.n	4040ce <_vfprintf_r+0x2b2>
  4040ee:	aa23      	add	r2, sp, #140	; 0x8c
  4040f0:	4629      	mov	r1, r5
  4040f2:	4650      	mov	r0, sl
  4040f4:	f003 fc3c 	bl	407970 <__sprint_r>
  4040f8:	2800      	cmp	r0, #0
  4040fa:	f040 836a 	bne.w	4047d2 <_vfprintf_r+0x9b6>
  4040fe:	f1ab 0b10 	sub.w	fp, fp, #16
  404102:	f1bb 0f10 	cmp.w	fp, #16
  404106:	9925      	ldr	r1, [sp, #148]	; 0x94
  404108:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40410a:	ab30      	add	r3, sp, #192	; 0xc0
  40410c:	dce6      	bgt.n	4040dc <_vfprintf_r+0x2c0>
  40410e:	4645      	mov	r5, r8
  404110:	4698      	mov	r8, r3
  404112:	3201      	adds	r2, #1
  404114:	4bab      	ldr	r3, [pc, #684]	; (4043c4 <_vfprintf_r+0x5a8>)
  404116:	9224      	str	r2, [sp, #144]	; 0x90
  404118:	eb0b 0401 	add.w	r4, fp, r1
  40411c:	2a07      	cmp	r2, #7
  40411e:	9425      	str	r4, [sp, #148]	; 0x94
  404120:	e888 0808 	stmia.w	r8, {r3, fp}
  404124:	f300 84cd 	bgt.w	404ac2 <_vfprintf_r+0xca6>
  404128:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40412c:	f108 0808 	add.w	r8, r8, #8
  404130:	f1ba 0f00 	cmp.w	sl, #0
  404134:	d00e      	beq.n	404154 <_vfprintf_r+0x338>
  404136:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404138:	3301      	adds	r3, #1
  40413a:	3401      	adds	r4, #1
  40413c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404140:	2201      	movs	r2, #1
  404142:	2b07      	cmp	r3, #7
  404144:	9425      	str	r4, [sp, #148]	; 0x94
  404146:	9324      	str	r3, [sp, #144]	; 0x90
  404148:	e888 0006 	stmia.w	r8, {r1, r2}
  40414c:	f300 840a 	bgt.w	404964 <_vfprintf_r+0xb48>
  404150:	f108 0808 	add.w	r8, r8, #8
  404154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404156:	b16b      	cbz	r3, 404174 <_vfprintf_r+0x358>
  404158:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40415a:	3301      	adds	r3, #1
  40415c:	3402      	adds	r4, #2
  40415e:	a91c      	add	r1, sp, #112	; 0x70
  404160:	2202      	movs	r2, #2
  404162:	2b07      	cmp	r3, #7
  404164:	9425      	str	r4, [sp, #148]	; 0x94
  404166:	9324      	str	r3, [sp, #144]	; 0x90
  404168:	e888 0006 	stmia.w	r8, {r1, r2}
  40416c:	f300 8406 	bgt.w	40497c <_vfprintf_r+0xb60>
  404170:	f108 0808 	add.w	r8, r8, #8
  404174:	2d80      	cmp	r5, #128	; 0x80
  404176:	f000 832e 	beq.w	4047d6 <_vfprintf_r+0x9ba>
  40417a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40417c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40417e:	eba3 0a02 	sub.w	sl, r3, r2
  404182:	f1ba 0f00 	cmp.w	sl, #0
  404186:	dd3b      	ble.n	404200 <_vfprintf_r+0x3e4>
  404188:	f1ba 0f10 	cmp.w	sl, #16
  40418c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40418e:	4d8e      	ldr	r5, [pc, #568]	; (4043c8 <_vfprintf_r+0x5ac>)
  404190:	dd2b      	ble.n	4041ea <_vfprintf_r+0x3ce>
  404192:	4642      	mov	r2, r8
  404194:	4621      	mov	r1, r4
  404196:	46b0      	mov	r8, r6
  404198:	f04f 0b10 	mov.w	fp, #16
  40419c:	462e      	mov	r6, r5
  40419e:	9c08      	ldr	r4, [sp, #32]
  4041a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4041a2:	e006      	b.n	4041b2 <_vfprintf_r+0x396>
  4041a4:	f1aa 0a10 	sub.w	sl, sl, #16
  4041a8:	f1ba 0f10 	cmp.w	sl, #16
  4041ac:	f102 0208 	add.w	r2, r2, #8
  4041b0:	dd17      	ble.n	4041e2 <_vfprintf_r+0x3c6>
  4041b2:	3301      	adds	r3, #1
  4041b4:	3110      	adds	r1, #16
  4041b6:	2b07      	cmp	r3, #7
  4041b8:	9125      	str	r1, [sp, #148]	; 0x94
  4041ba:	9324      	str	r3, [sp, #144]	; 0x90
  4041bc:	e882 0840 	stmia.w	r2, {r6, fp}
  4041c0:	ddf0      	ble.n	4041a4 <_vfprintf_r+0x388>
  4041c2:	aa23      	add	r2, sp, #140	; 0x8c
  4041c4:	4629      	mov	r1, r5
  4041c6:	4620      	mov	r0, r4
  4041c8:	f003 fbd2 	bl	407970 <__sprint_r>
  4041cc:	2800      	cmp	r0, #0
  4041ce:	f040 8300 	bne.w	4047d2 <_vfprintf_r+0x9b6>
  4041d2:	f1aa 0a10 	sub.w	sl, sl, #16
  4041d6:	f1ba 0f10 	cmp.w	sl, #16
  4041da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4041dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4041de:	aa30      	add	r2, sp, #192	; 0xc0
  4041e0:	dce7      	bgt.n	4041b2 <_vfprintf_r+0x396>
  4041e2:	4635      	mov	r5, r6
  4041e4:	460c      	mov	r4, r1
  4041e6:	4646      	mov	r6, r8
  4041e8:	4690      	mov	r8, r2
  4041ea:	3301      	adds	r3, #1
  4041ec:	4454      	add	r4, sl
  4041ee:	2b07      	cmp	r3, #7
  4041f0:	9425      	str	r4, [sp, #148]	; 0x94
  4041f2:	9324      	str	r3, [sp, #144]	; 0x90
  4041f4:	e888 0420 	stmia.w	r8, {r5, sl}
  4041f8:	f300 83a9 	bgt.w	40494e <_vfprintf_r+0xb32>
  4041fc:	f108 0808 	add.w	r8, r8, #8
  404200:	9b06      	ldr	r3, [sp, #24]
  404202:	05db      	lsls	r3, r3, #23
  404204:	f100 8285 	bmi.w	404712 <_vfprintf_r+0x8f6>
  404208:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40420a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40420c:	f8c8 7000 	str.w	r7, [r8]
  404210:	3301      	adds	r3, #1
  404212:	440c      	add	r4, r1
  404214:	2b07      	cmp	r3, #7
  404216:	9425      	str	r4, [sp, #148]	; 0x94
  404218:	f8c8 1004 	str.w	r1, [r8, #4]
  40421c:	9324      	str	r3, [sp, #144]	; 0x90
  40421e:	f300 8375 	bgt.w	40490c <_vfprintf_r+0xaf0>
  404222:	f108 0808 	add.w	r8, r8, #8
  404226:	9b06      	ldr	r3, [sp, #24]
  404228:	0759      	lsls	r1, r3, #29
  40422a:	d53b      	bpl.n	4042a4 <_vfprintf_r+0x488>
  40422c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40422e:	9a07      	ldr	r2, [sp, #28]
  404230:	1a9d      	subs	r5, r3, r2
  404232:	2d00      	cmp	r5, #0
  404234:	dd36      	ble.n	4042a4 <_vfprintf_r+0x488>
  404236:	2d10      	cmp	r5, #16
  404238:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40423a:	dd21      	ble.n	404280 <_vfprintf_r+0x464>
  40423c:	2610      	movs	r6, #16
  40423e:	9f08      	ldr	r7, [sp, #32]
  404240:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404244:	e004      	b.n	404250 <_vfprintf_r+0x434>
  404246:	3d10      	subs	r5, #16
  404248:	2d10      	cmp	r5, #16
  40424a:	f108 0808 	add.w	r8, r8, #8
  40424e:	dd17      	ble.n	404280 <_vfprintf_r+0x464>
  404250:	3301      	adds	r3, #1
  404252:	4a5c      	ldr	r2, [pc, #368]	; (4043c4 <_vfprintf_r+0x5a8>)
  404254:	9324      	str	r3, [sp, #144]	; 0x90
  404256:	3410      	adds	r4, #16
  404258:	2b07      	cmp	r3, #7
  40425a:	9425      	str	r4, [sp, #148]	; 0x94
  40425c:	e888 0044 	stmia.w	r8, {r2, r6}
  404260:	ddf1      	ble.n	404246 <_vfprintf_r+0x42a>
  404262:	aa23      	add	r2, sp, #140	; 0x8c
  404264:	4651      	mov	r1, sl
  404266:	4638      	mov	r0, r7
  404268:	f003 fb82 	bl	407970 <__sprint_r>
  40426c:	2800      	cmp	r0, #0
  40426e:	f040 823f 	bne.w	4046f0 <_vfprintf_r+0x8d4>
  404272:	3d10      	subs	r5, #16
  404274:	2d10      	cmp	r5, #16
  404276:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404278:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40427a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40427e:	dce7      	bgt.n	404250 <_vfprintf_r+0x434>
  404280:	3301      	adds	r3, #1
  404282:	4a50      	ldr	r2, [pc, #320]	; (4043c4 <_vfprintf_r+0x5a8>)
  404284:	9324      	str	r3, [sp, #144]	; 0x90
  404286:	442c      	add	r4, r5
  404288:	2b07      	cmp	r3, #7
  40428a:	9425      	str	r4, [sp, #148]	; 0x94
  40428c:	e888 0024 	stmia.w	r8, {r2, r5}
  404290:	dd08      	ble.n	4042a4 <_vfprintf_r+0x488>
  404292:	aa23      	add	r2, sp, #140	; 0x8c
  404294:	990a      	ldr	r1, [sp, #40]	; 0x28
  404296:	9808      	ldr	r0, [sp, #32]
  404298:	f003 fb6a 	bl	407970 <__sprint_r>
  40429c:	2800      	cmp	r0, #0
  40429e:	f040 8347 	bne.w	404930 <_vfprintf_r+0xb14>
  4042a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4042a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4042a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4042a8:	9907      	ldr	r1, [sp, #28]
  4042aa:	428a      	cmp	r2, r1
  4042ac:	bfac      	ite	ge
  4042ae:	189b      	addge	r3, r3, r2
  4042b0:	185b      	addlt	r3, r3, r1
  4042b2:	930b      	str	r3, [sp, #44]	; 0x2c
  4042b4:	2c00      	cmp	r4, #0
  4042b6:	f040 8333 	bne.w	404920 <_vfprintf_r+0xb04>
  4042ba:	2300      	movs	r3, #0
  4042bc:	9324      	str	r3, [sp, #144]	; 0x90
  4042be:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4042c2:	e5f7      	b.n	403eb4 <_vfprintf_r+0x98>
  4042c4:	4651      	mov	r1, sl
  4042c6:	9808      	ldr	r0, [sp, #32]
  4042c8:	f001 f896 	bl	4053f8 <__swsetup_r>
  4042cc:	2800      	cmp	r0, #0
  4042ce:	d038      	beq.n	404342 <_vfprintf_r+0x526>
  4042d0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4042d4:	07dd      	lsls	r5, r3, #31
  4042d6:	d404      	bmi.n	4042e2 <_vfprintf_r+0x4c6>
  4042d8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4042dc:	059c      	lsls	r4, r3, #22
  4042de:	f140 85ca 	bpl.w	404e76 <_vfprintf_r+0x105a>
  4042e2:	f04f 33ff 	mov.w	r3, #4294967295
  4042e6:	930b      	str	r3, [sp, #44]	; 0x2c
  4042e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4042ea:	b041      	add	sp, #260	; 0x104
  4042ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042f0:	aa23      	add	r2, sp, #140	; 0x8c
  4042f2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4042f4:	9808      	ldr	r0, [sp, #32]
  4042f6:	f003 fb3b 	bl	407970 <__sprint_r>
  4042fa:	2800      	cmp	r0, #0
  4042fc:	f040 8318 	bne.w	404930 <_vfprintf_r+0xb14>
  404300:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404304:	e5f5      	b.n	403ef2 <_vfprintf_r+0xd6>
  404306:	9808      	ldr	r0, [sp, #32]
  404308:	f002 f9a0 	bl	40664c <__sinit>
  40430c:	e59c      	b.n	403e48 <_vfprintf_r+0x2c>
  40430e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  404312:	2a00      	cmp	r2, #0
  404314:	f6ff adbd 	blt.w	403e92 <_vfprintf_r+0x76>
  404318:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40431c:	07d0      	lsls	r0, r2, #31
  40431e:	d405      	bmi.n	40432c <_vfprintf_r+0x510>
  404320:	0599      	lsls	r1, r3, #22
  404322:	d403      	bmi.n	40432c <_vfprintf_r+0x510>
  404324:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404328:	f002 fcce 	bl	406cc8 <__retarget_lock_release_recursive>
  40432c:	462b      	mov	r3, r5
  40432e:	464a      	mov	r2, r9
  404330:	4651      	mov	r1, sl
  404332:	9808      	ldr	r0, [sp, #32]
  404334:	f001 f81e 	bl	405374 <__sbprintf>
  404338:	900b      	str	r0, [sp, #44]	; 0x2c
  40433a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40433c:	b041      	add	sp, #260	; 0x104
  40433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404342:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404346:	e59f      	b.n	403e88 <_vfprintf_r+0x6c>
  404348:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40434c:	f002 fcba 	bl	406cc4 <__retarget_lock_acquire_recursive>
  404350:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404354:	b293      	uxth	r3, r2
  404356:	e582      	b.n	403e5e <_vfprintf_r+0x42>
  404358:	980c      	ldr	r0, [sp, #48]	; 0x30
  40435a:	930e      	str	r3, [sp, #56]	; 0x38
  40435c:	4240      	negs	r0, r0
  40435e:	900c      	str	r0, [sp, #48]	; 0x30
  404360:	f04b 0b04 	orr.w	fp, fp, #4
  404364:	f899 6000 	ldrb.w	r6, [r9]
  404368:	e5d7      	b.n	403f1a <_vfprintf_r+0xfe>
  40436a:	2a00      	cmp	r2, #0
  40436c:	f040 87df 	bne.w	40532e <_vfprintf_r+0x1512>
  404370:	4b16      	ldr	r3, [pc, #88]	; (4043cc <_vfprintf_r+0x5b0>)
  404372:	9318      	str	r3, [sp, #96]	; 0x60
  404374:	f01b 0f20 	tst.w	fp, #32
  404378:	f040 84b9 	bne.w	404cee <_vfprintf_r+0xed2>
  40437c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40437e:	f01b 0f10 	tst.w	fp, #16
  404382:	4613      	mov	r3, r2
  404384:	f040 83dc 	bne.w	404b40 <_vfprintf_r+0xd24>
  404388:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40438c:	f000 83d8 	beq.w	404b40 <_vfprintf_r+0xd24>
  404390:	3304      	adds	r3, #4
  404392:	8814      	ldrh	r4, [r2, #0]
  404394:	930e      	str	r3, [sp, #56]	; 0x38
  404396:	2500      	movs	r5, #0
  404398:	f01b 0f01 	tst.w	fp, #1
  40439c:	f000 8322 	beq.w	4049e4 <_vfprintf_r+0xbc8>
  4043a0:	ea54 0305 	orrs.w	r3, r4, r5
  4043a4:	f000 831e 	beq.w	4049e4 <_vfprintf_r+0xbc8>
  4043a8:	2330      	movs	r3, #48	; 0x30
  4043aa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4043ae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4043b2:	f04b 0b02 	orr.w	fp, fp, #2
  4043b6:	2302      	movs	r3, #2
  4043b8:	e63c      	b.n	404034 <_vfprintf_r+0x218>
  4043ba:	f04b 0b20 	orr.w	fp, fp, #32
  4043be:	f899 6000 	ldrb.w	r6, [r9]
  4043c2:	e5aa      	b.n	403f1a <_vfprintf_r+0xfe>
  4043c4:	004089b4 	.word	0x004089b4
  4043c8:	004089c4 	.word	0x004089c4
  4043cc:	00408994 	.word	0x00408994
  4043d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4043d2:	6817      	ldr	r7, [r2, #0]
  4043d4:	2400      	movs	r4, #0
  4043d6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4043da:	1d15      	adds	r5, r2, #4
  4043dc:	2f00      	cmp	r7, #0
  4043de:	f000 864e 	beq.w	40507e <_vfprintf_r+0x1262>
  4043e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043e4:	1c53      	adds	r3, r2, #1
  4043e6:	f000 85cc 	beq.w	404f82 <_vfprintf_r+0x1166>
  4043ea:	4621      	mov	r1, r4
  4043ec:	4638      	mov	r0, r7
  4043ee:	f002 fce7 	bl	406dc0 <memchr>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	f000 8697 	beq.w	405126 <_vfprintf_r+0x130a>
  4043f8:	1bc3      	subs	r3, r0, r7
  4043fa:	930d      	str	r3, [sp, #52]	; 0x34
  4043fc:	9409      	str	r4, [sp, #36]	; 0x24
  4043fe:	950e      	str	r5, [sp, #56]	; 0x38
  404400:	f8cd b018 	str.w	fp, [sp, #24]
  404404:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404408:	9307      	str	r3, [sp, #28]
  40440a:	9410      	str	r4, [sp, #64]	; 0x40
  40440c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404410:	e636      	b.n	404080 <_vfprintf_r+0x264>
  404412:	2a00      	cmp	r2, #0
  404414:	f040 8796 	bne.w	405344 <_vfprintf_r+0x1528>
  404418:	f01b 0f20 	tst.w	fp, #32
  40441c:	f040 845a 	bne.w	404cd4 <_vfprintf_r+0xeb8>
  404420:	f01b 0f10 	tst.w	fp, #16
  404424:	f040 83a2 	bne.w	404b6c <_vfprintf_r+0xd50>
  404428:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40442c:	f000 839e 	beq.w	404b6c <_vfprintf_r+0xd50>
  404430:	990e      	ldr	r1, [sp, #56]	; 0x38
  404432:	f9b1 4000 	ldrsh.w	r4, [r1]
  404436:	3104      	adds	r1, #4
  404438:	17e5      	asrs	r5, r4, #31
  40443a:	4622      	mov	r2, r4
  40443c:	462b      	mov	r3, r5
  40443e:	910e      	str	r1, [sp, #56]	; 0x38
  404440:	2a00      	cmp	r2, #0
  404442:	f173 0300 	sbcs.w	r3, r3, #0
  404446:	f2c0 8487 	blt.w	404d58 <_vfprintf_r+0xf3c>
  40444a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40444c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404450:	1c4a      	adds	r2, r1, #1
  404452:	f04f 0301 	mov.w	r3, #1
  404456:	f47f adf5 	bne.w	404044 <_vfprintf_r+0x228>
  40445a:	ea54 0205 	orrs.w	r2, r4, r5
  40445e:	f000 826c 	beq.w	40493a <_vfprintf_r+0xb1e>
  404462:	f8cd b018 	str.w	fp, [sp, #24]
  404466:	2b01      	cmp	r3, #1
  404468:	f000 8308 	beq.w	404a7c <_vfprintf_r+0xc60>
  40446c:	2b02      	cmp	r3, #2
  40446e:	f040 8295 	bne.w	40499c <_vfprintf_r+0xb80>
  404472:	9818      	ldr	r0, [sp, #96]	; 0x60
  404474:	af30      	add	r7, sp, #192	; 0xc0
  404476:	0923      	lsrs	r3, r4, #4
  404478:	f004 010f 	and.w	r1, r4, #15
  40447c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404480:	092a      	lsrs	r2, r5, #4
  404482:	461c      	mov	r4, r3
  404484:	4615      	mov	r5, r2
  404486:	5c43      	ldrb	r3, [r0, r1]
  404488:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40448c:	ea54 0305 	orrs.w	r3, r4, r5
  404490:	d1f1      	bne.n	404476 <_vfprintf_r+0x65a>
  404492:	ab30      	add	r3, sp, #192	; 0xc0
  404494:	1bdb      	subs	r3, r3, r7
  404496:	930d      	str	r3, [sp, #52]	; 0x34
  404498:	e5ea      	b.n	404070 <_vfprintf_r+0x254>
  40449a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40449e:	f899 6000 	ldrb.w	r6, [r9]
  4044a2:	e53a      	b.n	403f1a <_vfprintf_r+0xfe>
  4044a4:	f899 6000 	ldrb.w	r6, [r9]
  4044a8:	2e6c      	cmp	r6, #108	; 0x6c
  4044aa:	bf03      	ittte	eq
  4044ac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4044b0:	f04b 0b20 	orreq.w	fp, fp, #32
  4044b4:	f109 0901 	addeq.w	r9, r9, #1
  4044b8:	f04b 0b10 	orrne.w	fp, fp, #16
  4044bc:	e52d      	b.n	403f1a <_vfprintf_r+0xfe>
  4044be:	2a00      	cmp	r2, #0
  4044c0:	f040 874c 	bne.w	40535c <_vfprintf_r+0x1540>
  4044c4:	f01b 0f20 	tst.w	fp, #32
  4044c8:	f040 853f 	bne.w	404f4a <_vfprintf_r+0x112e>
  4044cc:	f01b 0f10 	tst.w	fp, #16
  4044d0:	f040 80fc 	bne.w	4046cc <_vfprintf_r+0x8b0>
  4044d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4044d8:	f000 80f8 	beq.w	4046cc <_vfprintf_r+0x8b0>
  4044dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4044de:	6813      	ldr	r3, [r2, #0]
  4044e0:	3204      	adds	r2, #4
  4044e2:	920e      	str	r2, [sp, #56]	; 0x38
  4044e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4044e8:	801a      	strh	r2, [r3, #0]
  4044ea:	e4e3      	b.n	403eb4 <_vfprintf_r+0x98>
  4044ec:	f899 6000 	ldrb.w	r6, [r9]
  4044f0:	2900      	cmp	r1, #0
  4044f2:	f47f ad12 	bne.w	403f1a <_vfprintf_r+0xfe>
  4044f6:	2201      	movs	r2, #1
  4044f8:	2120      	movs	r1, #32
  4044fa:	e50e      	b.n	403f1a <_vfprintf_r+0xfe>
  4044fc:	f899 6000 	ldrb.w	r6, [r9]
  404500:	2e2a      	cmp	r6, #42	; 0x2a
  404502:	f109 0001 	add.w	r0, r9, #1
  404506:	f000 86f1 	beq.w	4052ec <_vfprintf_r+0x14d0>
  40450a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40450e:	2b09      	cmp	r3, #9
  404510:	4681      	mov	r9, r0
  404512:	bf98      	it	ls
  404514:	2000      	movls	r0, #0
  404516:	f200 863d 	bhi.w	405194 <_vfprintf_r+0x1378>
  40451a:	f819 6b01 	ldrb.w	r6, [r9], #1
  40451e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404522:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  404526:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40452a:	2b09      	cmp	r3, #9
  40452c:	d9f5      	bls.n	40451a <_vfprintf_r+0x6fe>
  40452e:	9009      	str	r0, [sp, #36]	; 0x24
  404530:	e4f5      	b.n	403f1e <_vfprintf_r+0x102>
  404532:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404536:	f899 6000 	ldrb.w	r6, [r9]
  40453a:	e4ee      	b.n	403f1a <_vfprintf_r+0xfe>
  40453c:	f899 6000 	ldrb.w	r6, [r9]
  404540:	2201      	movs	r2, #1
  404542:	212b      	movs	r1, #43	; 0x2b
  404544:	e4e9      	b.n	403f1a <_vfprintf_r+0xfe>
  404546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404548:	4bae      	ldr	r3, [pc, #696]	; (404804 <_vfprintf_r+0x9e8>)
  40454a:	6814      	ldr	r4, [r2, #0]
  40454c:	9318      	str	r3, [sp, #96]	; 0x60
  40454e:	2678      	movs	r6, #120	; 0x78
  404550:	2330      	movs	r3, #48	; 0x30
  404552:	3204      	adds	r2, #4
  404554:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404558:	f04b 0b02 	orr.w	fp, fp, #2
  40455c:	920e      	str	r2, [sp, #56]	; 0x38
  40455e:	2500      	movs	r5, #0
  404560:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404564:	2302      	movs	r3, #2
  404566:	e565      	b.n	404034 <_vfprintf_r+0x218>
  404568:	2a00      	cmp	r2, #0
  40456a:	f040 86e4 	bne.w	405336 <_vfprintf_r+0x151a>
  40456e:	4ba6      	ldr	r3, [pc, #664]	; (404808 <_vfprintf_r+0x9ec>)
  404570:	9318      	str	r3, [sp, #96]	; 0x60
  404572:	e6ff      	b.n	404374 <_vfprintf_r+0x558>
  404574:	990e      	ldr	r1, [sp, #56]	; 0x38
  404576:	f8cd b018 	str.w	fp, [sp, #24]
  40457a:	680a      	ldr	r2, [r1, #0]
  40457c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404580:	2300      	movs	r3, #0
  404582:	460a      	mov	r2, r1
  404584:	469a      	mov	sl, r3
  404586:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40458a:	3204      	adds	r2, #4
  40458c:	2301      	movs	r3, #1
  40458e:	9307      	str	r3, [sp, #28]
  404590:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  404594:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  404598:	920e      	str	r2, [sp, #56]	; 0x38
  40459a:	930d      	str	r3, [sp, #52]	; 0x34
  40459c:	af26      	add	r7, sp, #152	; 0x98
  40459e:	e575      	b.n	40408c <_vfprintf_r+0x270>
  4045a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4045a4:	2000      	movs	r0, #0
  4045a6:	f819 6b01 	ldrb.w	r6, [r9], #1
  4045aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4045ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4045b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4045b6:	2b09      	cmp	r3, #9
  4045b8:	d9f5      	bls.n	4045a6 <_vfprintf_r+0x78a>
  4045ba:	900c      	str	r0, [sp, #48]	; 0x30
  4045bc:	e4af      	b.n	403f1e <_vfprintf_r+0x102>
  4045be:	2a00      	cmp	r2, #0
  4045c0:	f040 86c8 	bne.w	405354 <_vfprintf_r+0x1538>
  4045c4:	f04b 0b10 	orr.w	fp, fp, #16
  4045c8:	e726      	b.n	404418 <_vfprintf_r+0x5fc>
  4045ca:	f04b 0b01 	orr.w	fp, fp, #1
  4045ce:	f899 6000 	ldrb.w	r6, [r9]
  4045d2:	e4a2      	b.n	403f1a <_vfprintf_r+0xfe>
  4045d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4045d6:	6823      	ldr	r3, [r4, #0]
  4045d8:	930c      	str	r3, [sp, #48]	; 0x30
  4045da:	4618      	mov	r0, r3
  4045dc:	2800      	cmp	r0, #0
  4045de:	4623      	mov	r3, r4
  4045e0:	f103 0304 	add.w	r3, r3, #4
  4045e4:	f6ff aeb8 	blt.w	404358 <_vfprintf_r+0x53c>
  4045e8:	930e      	str	r3, [sp, #56]	; 0x38
  4045ea:	f899 6000 	ldrb.w	r6, [r9]
  4045ee:	e494      	b.n	403f1a <_vfprintf_r+0xfe>
  4045f0:	2a00      	cmp	r2, #0
  4045f2:	f040 86b7 	bne.w	405364 <_vfprintf_r+0x1548>
  4045f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4045f8:	3507      	adds	r5, #7
  4045fa:	f025 0307 	bic.w	r3, r5, #7
  4045fe:	f103 0208 	add.w	r2, r3, #8
  404602:	920e      	str	r2, [sp, #56]	; 0x38
  404604:	681a      	ldr	r2, [r3, #0]
  404606:	9213      	str	r2, [sp, #76]	; 0x4c
  404608:	685b      	ldr	r3, [r3, #4]
  40460a:	9312      	str	r3, [sp, #72]	; 0x48
  40460c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40460e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  404610:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404614:	4628      	mov	r0, r5
  404616:	4621      	mov	r1, r4
  404618:	f04f 32ff 	mov.w	r2, #4294967295
  40461c:	4b7b      	ldr	r3, [pc, #492]	; (40480c <_vfprintf_r+0x9f0>)
  40461e:	f003 fef1 	bl	408404 <__aeabi_dcmpun>
  404622:	2800      	cmp	r0, #0
  404624:	f040 83a2 	bne.w	404d6c <_vfprintf_r+0xf50>
  404628:	4628      	mov	r0, r5
  40462a:	4621      	mov	r1, r4
  40462c:	f04f 32ff 	mov.w	r2, #4294967295
  404630:	4b76      	ldr	r3, [pc, #472]	; (40480c <_vfprintf_r+0x9f0>)
  404632:	f003 fec9 	bl	4083c8 <__aeabi_dcmple>
  404636:	2800      	cmp	r0, #0
  404638:	f040 8398 	bne.w	404d6c <_vfprintf_r+0xf50>
  40463c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40463e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404642:	9912      	ldr	r1, [sp, #72]	; 0x48
  404644:	f003 feb6 	bl	4083b4 <__aeabi_dcmplt>
  404648:	2800      	cmp	r0, #0
  40464a:	f040 8435 	bne.w	404eb8 <_vfprintf_r+0x109c>
  40464e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404652:	4f6f      	ldr	r7, [pc, #444]	; (404810 <_vfprintf_r+0x9f4>)
  404654:	4b6f      	ldr	r3, [pc, #444]	; (404814 <_vfprintf_r+0x9f8>)
  404656:	2203      	movs	r2, #3
  404658:	2100      	movs	r1, #0
  40465a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40465e:	9207      	str	r2, [sp, #28]
  404660:	9109      	str	r1, [sp, #36]	; 0x24
  404662:	9006      	str	r0, [sp, #24]
  404664:	2e47      	cmp	r6, #71	; 0x47
  404666:	bfd8      	it	le
  404668:	461f      	movle	r7, r3
  40466a:	920d      	str	r2, [sp, #52]	; 0x34
  40466c:	9110      	str	r1, [sp, #64]	; 0x40
  40466e:	e507      	b.n	404080 <_vfprintf_r+0x264>
  404670:	f04b 0b08 	orr.w	fp, fp, #8
  404674:	f899 6000 	ldrb.w	r6, [r9]
  404678:	e44f      	b.n	403f1a <_vfprintf_r+0xfe>
  40467a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40467c:	3507      	adds	r5, #7
  40467e:	f025 0307 	bic.w	r3, r5, #7
  404682:	f103 0208 	add.w	r2, r3, #8
  404686:	e9d3 4500 	ldrd	r4, r5, [r3]
  40468a:	920e      	str	r2, [sp, #56]	; 0x38
  40468c:	2300      	movs	r3, #0
  40468e:	e4d1      	b.n	404034 <_vfprintf_r+0x218>
  404690:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404692:	3507      	adds	r5, #7
  404694:	f025 0307 	bic.w	r3, r5, #7
  404698:	f103 0208 	add.w	r2, r3, #8
  40469c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4046a0:	920e      	str	r2, [sp, #56]	; 0x38
  4046a2:	2301      	movs	r3, #1
  4046a4:	e4c6      	b.n	404034 <_vfprintf_r+0x218>
  4046a6:	2a00      	cmp	r2, #0
  4046a8:	f040 8650 	bne.w	40534c <_vfprintf_r+0x1530>
  4046ac:	b1c6      	cbz	r6, 4046e0 <_vfprintf_r+0x8c4>
  4046ae:	2300      	movs	r3, #0
  4046b0:	2201      	movs	r2, #1
  4046b2:	469a      	mov	sl, r3
  4046b4:	9207      	str	r2, [sp, #28]
  4046b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4046ba:	f8cd b018 	str.w	fp, [sp, #24]
  4046be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4046c2:	9309      	str	r3, [sp, #36]	; 0x24
  4046c4:	9310      	str	r3, [sp, #64]	; 0x40
  4046c6:	920d      	str	r2, [sp, #52]	; 0x34
  4046c8:	af26      	add	r7, sp, #152	; 0x98
  4046ca:	e4df      	b.n	40408c <_vfprintf_r+0x270>
  4046cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4046ce:	6813      	ldr	r3, [r2, #0]
  4046d0:	3204      	adds	r2, #4
  4046d2:	920e      	str	r2, [sp, #56]	; 0x38
  4046d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4046d6:	601a      	str	r2, [r3, #0]
  4046d8:	f7ff bbec 	b.w	403eb4 <_vfprintf_r+0x98>
  4046dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4046de:	e527      	b.n	404130 <_vfprintf_r+0x314>
  4046e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4046e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4046e6:	2b00      	cmp	r3, #0
  4046e8:	f040 8594 	bne.w	405214 <_vfprintf_r+0x13f8>
  4046ec:	2300      	movs	r3, #0
  4046ee:	9324      	str	r3, [sp, #144]	; 0x90
  4046f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4046f4:	f013 0f01 	tst.w	r3, #1
  4046f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4046fc:	d102      	bne.n	404704 <_vfprintf_r+0x8e8>
  4046fe:	059a      	lsls	r2, r3, #22
  404700:	f140 8249 	bpl.w	404b96 <_vfprintf_r+0xd7a>
  404704:	065b      	lsls	r3, r3, #25
  404706:	f53f adec 	bmi.w	4042e2 <_vfprintf_r+0x4c6>
  40470a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40470c:	b041      	add	sp, #260	; 0x104
  40470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404712:	2e65      	cmp	r6, #101	; 0x65
  404714:	f340 80b2 	ble.w	40487c <_vfprintf_r+0xa60>
  404718:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40471a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40471c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40471e:	9912      	ldr	r1, [sp, #72]	; 0x48
  404720:	f003 fe3e 	bl	4083a0 <__aeabi_dcmpeq>
  404724:	2800      	cmp	r0, #0
  404726:	f000 8160 	beq.w	4049ea <_vfprintf_r+0xbce>
  40472a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40472c:	4a3a      	ldr	r2, [pc, #232]	; (404818 <_vfprintf_r+0x9fc>)
  40472e:	f8c8 2000 	str.w	r2, [r8]
  404732:	3301      	adds	r3, #1
  404734:	3401      	adds	r4, #1
  404736:	2201      	movs	r2, #1
  404738:	2b07      	cmp	r3, #7
  40473a:	9425      	str	r4, [sp, #148]	; 0x94
  40473c:	9324      	str	r3, [sp, #144]	; 0x90
  40473e:	f8c8 2004 	str.w	r2, [r8, #4]
  404742:	f300 83bf 	bgt.w	404ec4 <_vfprintf_r+0x10a8>
  404746:	f108 0808 	add.w	r8, r8, #8
  40474a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40474c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40474e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404750:	4293      	cmp	r3, r2
  404752:	db03      	blt.n	40475c <_vfprintf_r+0x940>
  404754:	9b06      	ldr	r3, [sp, #24]
  404756:	07df      	lsls	r7, r3, #31
  404758:	f57f ad65 	bpl.w	404226 <_vfprintf_r+0x40a>
  40475c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40475e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404760:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404762:	f8c8 2000 	str.w	r2, [r8]
  404766:	3301      	adds	r3, #1
  404768:	440c      	add	r4, r1
  40476a:	2b07      	cmp	r3, #7
  40476c:	f8c8 1004 	str.w	r1, [r8, #4]
  404770:	9425      	str	r4, [sp, #148]	; 0x94
  404772:	9324      	str	r3, [sp, #144]	; 0x90
  404774:	f300 83f8 	bgt.w	404f68 <_vfprintf_r+0x114c>
  404778:	f108 0808 	add.w	r8, r8, #8
  40477c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40477e:	1e5e      	subs	r6, r3, #1
  404780:	2e00      	cmp	r6, #0
  404782:	f77f ad50 	ble.w	404226 <_vfprintf_r+0x40a>
  404786:	2e10      	cmp	r6, #16
  404788:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40478a:	4d24      	ldr	r5, [pc, #144]	; (40481c <_vfprintf_r+0xa00>)
  40478c:	f340 81dd 	ble.w	404b4a <_vfprintf_r+0xd2e>
  404790:	2710      	movs	r7, #16
  404792:	f8dd a020 	ldr.w	sl, [sp, #32]
  404796:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40479a:	e005      	b.n	4047a8 <_vfprintf_r+0x98c>
  40479c:	f108 0808 	add.w	r8, r8, #8
  4047a0:	3e10      	subs	r6, #16
  4047a2:	2e10      	cmp	r6, #16
  4047a4:	f340 81d1 	ble.w	404b4a <_vfprintf_r+0xd2e>
  4047a8:	3301      	adds	r3, #1
  4047aa:	3410      	adds	r4, #16
  4047ac:	2b07      	cmp	r3, #7
  4047ae:	9425      	str	r4, [sp, #148]	; 0x94
  4047b0:	9324      	str	r3, [sp, #144]	; 0x90
  4047b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4047b6:	ddf1      	ble.n	40479c <_vfprintf_r+0x980>
  4047b8:	aa23      	add	r2, sp, #140	; 0x8c
  4047ba:	4659      	mov	r1, fp
  4047bc:	4650      	mov	r0, sl
  4047be:	f003 f8d7 	bl	407970 <__sprint_r>
  4047c2:	2800      	cmp	r0, #0
  4047c4:	f040 83cd 	bne.w	404f62 <_vfprintf_r+0x1146>
  4047c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4047ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4047d0:	e7e6      	b.n	4047a0 <_vfprintf_r+0x984>
  4047d2:	46aa      	mov	sl, r5
  4047d4:	e78c      	b.n	4046f0 <_vfprintf_r+0x8d4>
  4047d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4047d8:	9a07      	ldr	r2, [sp, #28]
  4047da:	eba3 0a02 	sub.w	sl, r3, r2
  4047de:	f1ba 0f00 	cmp.w	sl, #0
  4047e2:	f77f acca 	ble.w	40417a <_vfprintf_r+0x35e>
  4047e6:	f1ba 0f10 	cmp.w	sl, #16
  4047ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047ec:	4d0b      	ldr	r5, [pc, #44]	; (40481c <_vfprintf_r+0xa00>)
  4047ee:	dd39      	ble.n	404864 <_vfprintf_r+0xa48>
  4047f0:	4642      	mov	r2, r8
  4047f2:	4621      	mov	r1, r4
  4047f4:	46b0      	mov	r8, r6
  4047f6:	f04f 0b10 	mov.w	fp, #16
  4047fa:	462e      	mov	r6, r5
  4047fc:	9c08      	ldr	r4, [sp, #32]
  4047fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404800:	e015      	b.n	40482e <_vfprintf_r+0xa12>
  404802:	bf00      	nop
  404804:	00408994 	.word	0x00408994
  404808:	00408980 	.word	0x00408980
  40480c:	7fefffff 	.word	0x7fefffff
  404810:	00408974 	.word	0x00408974
  404814:	00408970 	.word	0x00408970
  404818:	004089b0 	.word	0x004089b0
  40481c:	004089c4 	.word	0x004089c4
  404820:	f1aa 0a10 	sub.w	sl, sl, #16
  404824:	f1ba 0f10 	cmp.w	sl, #16
  404828:	f102 0208 	add.w	r2, r2, #8
  40482c:	dd16      	ble.n	40485c <_vfprintf_r+0xa40>
  40482e:	3301      	adds	r3, #1
  404830:	3110      	adds	r1, #16
  404832:	2b07      	cmp	r3, #7
  404834:	9125      	str	r1, [sp, #148]	; 0x94
  404836:	9324      	str	r3, [sp, #144]	; 0x90
  404838:	e882 0840 	stmia.w	r2, {r6, fp}
  40483c:	ddf0      	ble.n	404820 <_vfprintf_r+0xa04>
  40483e:	aa23      	add	r2, sp, #140	; 0x8c
  404840:	4629      	mov	r1, r5
  404842:	4620      	mov	r0, r4
  404844:	f003 f894 	bl	407970 <__sprint_r>
  404848:	2800      	cmp	r0, #0
  40484a:	d1c2      	bne.n	4047d2 <_vfprintf_r+0x9b6>
  40484c:	f1aa 0a10 	sub.w	sl, sl, #16
  404850:	f1ba 0f10 	cmp.w	sl, #16
  404854:	9925      	ldr	r1, [sp, #148]	; 0x94
  404856:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404858:	aa30      	add	r2, sp, #192	; 0xc0
  40485a:	dce8      	bgt.n	40482e <_vfprintf_r+0xa12>
  40485c:	4635      	mov	r5, r6
  40485e:	460c      	mov	r4, r1
  404860:	4646      	mov	r6, r8
  404862:	4690      	mov	r8, r2
  404864:	3301      	adds	r3, #1
  404866:	4454      	add	r4, sl
  404868:	2b07      	cmp	r3, #7
  40486a:	9425      	str	r4, [sp, #148]	; 0x94
  40486c:	9324      	str	r3, [sp, #144]	; 0x90
  40486e:	e888 0420 	stmia.w	r8, {r5, sl}
  404872:	f300 8264 	bgt.w	404d3e <_vfprintf_r+0xf22>
  404876:	f108 0808 	add.w	r8, r8, #8
  40487a:	e47e      	b.n	40417a <_vfprintf_r+0x35e>
  40487c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40487e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404880:	2b01      	cmp	r3, #1
  404882:	f340 81fd 	ble.w	404c80 <_vfprintf_r+0xe64>
  404886:	3601      	adds	r6, #1
  404888:	3401      	adds	r4, #1
  40488a:	2301      	movs	r3, #1
  40488c:	2e07      	cmp	r6, #7
  40488e:	9425      	str	r4, [sp, #148]	; 0x94
  404890:	9624      	str	r6, [sp, #144]	; 0x90
  404892:	f8c8 7000 	str.w	r7, [r8]
  404896:	f8c8 3004 	str.w	r3, [r8, #4]
  40489a:	f300 820e 	bgt.w	404cba <_vfprintf_r+0xe9e>
  40489e:	f108 0808 	add.w	r8, r8, #8
  4048a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4048a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4048a6:	f8c8 3000 	str.w	r3, [r8]
  4048aa:	3601      	adds	r6, #1
  4048ac:	4414      	add	r4, r2
  4048ae:	2e07      	cmp	r6, #7
  4048b0:	9425      	str	r4, [sp, #148]	; 0x94
  4048b2:	9624      	str	r6, [sp, #144]	; 0x90
  4048b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4048b8:	f300 822e 	bgt.w	404d18 <_vfprintf_r+0xefc>
  4048bc:	f108 0808 	add.w	r8, r8, #8
  4048c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4048c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4048c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4048c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4048c8:	f003 fd6a 	bl	4083a0 <__aeabi_dcmpeq>
  4048cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048ce:	2800      	cmp	r0, #0
  4048d0:	f040 8106 	bne.w	404ae0 <_vfprintf_r+0xcc4>
  4048d4:	3b01      	subs	r3, #1
  4048d6:	3601      	adds	r6, #1
  4048d8:	3701      	adds	r7, #1
  4048da:	441c      	add	r4, r3
  4048dc:	2e07      	cmp	r6, #7
  4048de:	9624      	str	r6, [sp, #144]	; 0x90
  4048e0:	9425      	str	r4, [sp, #148]	; 0x94
  4048e2:	f8c8 7000 	str.w	r7, [r8]
  4048e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4048ea:	f300 81d9 	bgt.w	404ca0 <_vfprintf_r+0xe84>
  4048ee:	f108 0808 	add.w	r8, r8, #8
  4048f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048f4:	f8c8 2004 	str.w	r2, [r8, #4]
  4048f8:	3601      	adds	r6, #1
  4048fa:	4414      	add	r4, r2
  4048fc:	ab1f      	add	r3, sp, #124	; 0x7c
  4048fe:	2e07      	cmp	r6, #7
  404900:	9425      	str	r4, [sp, #148]	; 0x94
  404902:	9624      	str	r6, [sp, #144]	; 0x90
  404904:	f8c8 3000 	str.w	r3, [r8]
  404908:	f77f ac8b 	ble.w	404222 <_vfprintf_r+0x406>
  40490c:	aa23      	add	r2, sp, #140	; 0x8c
  40490e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404910:	9808      	ldr	r0, [sp, #32]
  404912:	f003 f82d 	bl	407970 <__sprint_r>
  404916:	b958      	cbnz	r0, 404930 <_vfprintf_r+0xb14>
  404918:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40491a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40491e:	e482      	b.n	404226 <_vfprintf_r+0x40a>
  404920:	aa23      	add	r2, sp, #140	; 0x8c
  404922:	990a      	ldr	r1, [sp, #40]	; 0x28
  404924:	9808      	ldr	r0, [sp, #32]
  404926:	f003 f823 	bl	407970 <__sprint_r>
  40492a:	2800      	cmp	r0, #0
  40492c:	f43f acc5 	beq.w	4042ba <_vfprintf_r+0x49e>
  404930:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404934:	e6dc      	b.n	4046f0 <_vfprintf_r+0x8d4>
  404936:	f8dd b018 	ldr.w	fp, [sp, #24]
  40493a:	2b01      	cmp	r3, #1
  40493c:	f000 8121 	beq.w	404b82 <_vfprintf_r+0xd66>
  404940:	2b02      	cmp	r3, #2
  404942:	d127      	bne.n	404994 <_vfprintf_r+0xb78>
  404944:	f8cd b018 	str.w	fp, [sp, #24]
  404948:	2400      	movs	r4, #0
  40494a:	2500      	movs	r5, #0
  40494c:	e591      	b.n	404472 <_vfprintf_r+0x656>
  40494e:	aa23      	add	r2, sp, #140	; 0x8c
  404950:	990a      	ldr	r1, [sp, #40]	; 0x28
  404952:	9808      	ldr	r0, [sp, #32]
  404954:	f003 f80c 	bl	407970 <__sprint_r>
  404958:	2800      	cmp	r0, #0
  40495a:	d1e9      	bne.n	404930 <_vfprintf_r+0xb14>
  40495c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40495e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404962:	e44d      	b.n	404200 <_vfprintf_r+0x3e4>
  404964:	aa23      	add	r2, sp, #140	; 0x8c
  404966:	990a      	ldr	r1, [sp, #40]	; 0x28
  404968:	9808      	ldr	r0, [sp, #32]
  40496a:	f003 f801 	bl	407970 <__sprint_r>
  40496e:	2800      	cmp	r0, #0
  404970:	d1de      	bne.n	404930 <_vfprintf_r+0xb14>
  404972:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404974:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404978:	f7ff bbec 	b.w	404154 <_vfprintf_r+0x338>
  40497c:	aa23      	add	r2, sp, #140	; 0x8c
  40497e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404980:	9808      	ldr	r0, [sp, #32]
  404982:	f002 fff5 	bl	407970 <__sprint_r>
  404986:	2800      	cmp	r0, #0
  404988:	d1d2      	bne.n	404930 <_vfprintf_r+0xb14>
  40498a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40498c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404990:	f7ff bbf0 	b.w	404174 <_vfprintf_r+0x358>
  404994:	f8cd b018 	str.w	fp, [sp, #24]
  404998:	2400      	movs	r4, #0
  40499a:	2500      	movs	r5, #0
  40499c:	a930      	add	r1, sp, #192	; 0xc0
  40499e:	e000      	b.n	4049a2 <_vfprintf_r+0xb86>
  4049a0:	4639      	mov	r1, r7
  4049a2:	08e2      	lsrs	r2, r4, #3
  4049a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4049a8:	08e8      	lsrs	r0, r5, #3
  4049aa:	f004 0307 	and.w	r3, r4, #7
  4049ae:	4605      	mov	r5, r0
  4049b0:	4614      	mov	r4, r2
  4049b2:	3330      	adds	r3, #48	; 0x30
  4049b4:	ea54 0205 	orrs.w	r2, r4, r5
  4049b8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4049bc:	f101 37ff 	add.w	r7, r1, #4294967295
  4049c0:	d1ee      	bne.n	4049a0 <_vfprintf_r+0xb84>
  4049c2:	9a06      	ldr	r2, [sp, #24]
  4049c4:	07d2      	lsls	r2, r2, #31
  4049c6:	f57f ad64 	bpl.w	404492 <_vfprintf_r+0x676>
  4049ca:	2b30      	cmp	r3, #48	; 0x30
  4049cc:	f43f ad61 	beq.w	404492 <_vfprintf_r+0x676>
  4049d0:	2330      	movs	r3, #48	; 0x30
  4049d2:	3902      	subs	r1, #2
  4049d4:	f807 3c01 	strb.w	r3, [r7, #-1]
  4049d8:	ab30      	add	r3, sp, #192	; 0xc0
  4049da:	1a5b      	subs	r3, r3, r1
  4049dc:	930d      	str	r3, [sp, #52]	; 0x34
  4049de:	460f      	mov	r7, r1
  4049e0:	f7ff bb46 	b.w	404070 <_vfprintf_r+0x254>
  4049e4:	2302      	movs	r3, #2
  4049e6:	f7ff bb25 	b.w	404034 <_vfprintf_r+0x218>
  4049ea:	991d      	ldr	r1, [sp, #116]	; 0x74
  4049ec:	2900      	cmp	r1, #0
  4049ee:	f340 8274 	ble.w	404eda <_vfprintf_r+0x10be>
  4049f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049f6:	4293      	cmp	r3, r2
  4049f8:	bfa8      	it	ge
  4049fa:	4613      	movge	r3, r2
  4049fc:	2b00      	cmp	r3, #0
  4049fe:	461e      	mov	r6, r3
  404a00:	dd0d      	ble.n	404a1e <_vfprintf_r+0xc02>
  404a02:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a04:	f8c8 7000 	str.w	r7, [r8]
  404a08:	3301      	adds	r3, #1
  404a0a:	4434      	add	r4, r6
  404a0c:	2b07      	cmp	r3, #7
  404a0e:	9425      	str	r4, [sp, #148]	; 0x94
  404a10:	f8c8 6004 	str.w	r6, [r8, #4]
  404a14:	9324      	str	r3, [sp, #144]	; 0x90
  404a16:	f300 8324 	bgt.w	405062 <_vfprintf_r+0x1246>
  404a1a:	f108 0808 	add.w	r8, r8, #8
  404a1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a20:	2e00      	cmp	r6, #0
  404a22:	bfa8      	it	ge
  404a24:	1b9b      	subge	r3, r3, r6
  404a26:	2b00      	cmp	r3, #0
  404a28:	461e      	mov	r6, r3
  404a2a:	f340 80d0 	ble.w	404bce <_vfprintf_r+0xdb2>
  404a2e:	2e10      	cmp	r6, #16
  404a30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a32:	4dc0      	ldr	r5, [pc, #768]	; (404d34 <_vfprintf_r+0xf18>)
  404a34:	f340 80b7 	ble.w	404ba6 <_vfprintf_r+0xd8a>
  404a38:	4622      	mov	r2, r4
  404a3a:	f04f 0a10 	mov.w	sl, #16
  404a3e:	f8dd b020 	ldr.w	fp, [sp, #32]
  404a42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a44:	e005      	b.n	404a52 <_vfprintf_r+0xc36>
  404a46:	f108 0808 	add.w	r8, r8, #8
  404a4a:	3e10      	subs	r6, #16
  404a4c:	2e10      	cmp	r6, #16
  404a4e:	f340 80a9 	ble.w	404ba4 <_vfprintf_r+0xd88>
  404a52:	3301      	adds	r3, #1
  404a54:	3210      	adds	r2, #16
  404a56:	2b07      	cmp	r3, #7
  404a58:	9225      	str	r2, [sp, #148]	; 0x94
  404a5a:	9324      	str	r3, [sp, #144]	; 0x90
  404a5c:	e888 0420 	stmia.w	r8, {r5, sl}
  404a60:	ddf1      	ble.n	404a46 <_vfprintf_r+0xc2a>
  404a62:	aa23      	add	r2, sp, #140	; 0x8c
  404a64:	4621      	mov	r1, r4
  404a66:	4658      	mov	r0, fp
  404a68:	f002 ff82 	bl	407970 <__sprint_r>
  404a6c:	2800      	cmp	r0, #0
  404a6e:	f040 8324 	bne.w	4050ba <_vfprintf_r+0x129e>
  404a72:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404a74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a76:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404a7a:	e7e6      	b.n	404a4a <_vfprintf_r+0xc2e>
  404a7c:	2d00      	cmp	r5, #0
  404a7e:	bf08      	it	eq
  404a80:	2c0a      	cmpeq	r4, #10
  404a82:	d37c      	bcc.n	404b7e <_vfprintf_r+0xd62>
  404a84:	af30      	add	r7, sp, #192	; 0xc0
  404a86:	4620      	mov	r0, r4
  404a88:	4629      	mov	r1, r5
  404a8a:	220a      	movs	r2, #10
  404a8c:	2300      	movs	r3, #0
  404a8e:	f003 fcf7 	bl	408480 <__aeabi_uldivmod>
  404a92:	3230      	adds	r2, #48	; 0x30
  404a94:	f807 2d01 	strb.w	r2, [r7, #-1]!
  404a98:	4620      	mov	r0, r4
  404a9a:	4629      	mov	r1, r5
  404a9c:	2300      	movs	r3, #0
  404a9e:	220a      	movs	r2, #10
  404aa0:	f003 fcee 	bl	408480 <__aeabi_uldivmod>
  404aa4:	4604      	mov	r4, r0
  404aa6:	460d      	mov	r5, r1
  404aa8:	ea54 0305 	orrs.w	r3, r4, r5
  404aac:	d1eb      	bne.n	404a86 <_vfprintf_r+0xc6a>
  404aae:	ab30      	add	r3, sp, #192	; 0xc0
  404ab0:	1bdb      	subs	r3, r3, r7
  404ab2:	930d      	str	r3, [sp, #52]	; 0x34
  404ab4:	f7ff badc 	b.w	404070 <_vfprintf_r+0x254>
  404ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404aba:	930d      	str	r3, [sp, #52]	; 0x34
  404abc:	af30      	add	r7, sp, #192	; 0xc0
  404abe:	f7ff bad7 	b.w	404070 <_vfprintf_r+0x254>
  404ac2:	aa23      	add	r2, sp, #140	; 0x8c
  404ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ac6:	9808      	ldr	r0, [sp, #32]
  404ac8:	f002 ff52 	bl	407970 <__sprint_r>
  404acc:	2800      	cmp	r0, #0
  404ace:	f47f af2f 	bne.w	404930 <_vfprintf_r+0xb14>
  404ad2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404ad6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ad8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404adc:	f7ff bb28 	b.w	404130 <_vfprintf_r+0x314>
  404ae0:	1e5f      	subs	r7, r3, #1
  404ae2:	2f00      	cmp	r7, #0
  404ae4:	f77f af05 	ble.w	4048f2 <_vfprintf_r+0xad6>
  404ae8:	2f10      	cmp	r7, #16
  404aea:	4d92      	ldr	r5, [pc, #584]	; (404d34 <_vfprintf_r+0xf18>)
  404aec:	f340 810a 	ble.w	404d04 <_vfprintf_r+0xee8>
  404af0:	f04f 0a10 	mov.w	sl, #16
  404af4:	f8dd b020 	ldr.w	fp, [sp, #32]
  404af8:	e005      	b.n	404b06 <_vfprintf_r+0xcea>
  404afa:	f108 0808 	add.w	r8, r8, #8
  404afe:	3f10      	subs	r7, #16
  404b00:	2f10      	cmp	r7, #16
  404b02:	f340 80ff 	ble.w	404d04 <_vfprintf_r+0xee8>
  404b06:	3601      	adds	r6, #1
  404b08:	3410      	adds	r4, #16
  404b0a:	2e07      	cmp	r6, #7
  404b0c:	9425      	str	r4, [sp, #148]	; 0x94
  404b0e:	9624      	str	r6, [sp, #144]	; 0x90
  404b10:	e888 0420 	stmia.w	r8, {r5, sl}
  404b14:	ddf1      	ble.n	404afa <_vfprintf_r+0xcde>
  404b16:	aa23      	add	r2, sp, #140	; 0x8c
  404b18:	990a      	ldr	r1, [sp, #40]	; 0x28
  404b1a:	4658      	mov	r0, fp
  404b1c:	f002 ff28 	bl	407970 <__sprint_r>
  404b20:	2800      	cmp	r0, #0
  404b22:	f47f af05 	bne.w	404930 <_vfprintf_r+0xb14>
  404b26:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b28:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404b2a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404b2e:	e7e6      	b.n	404afe <_vfprintf_r+0xce2>
  404b30:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b32:	460a      	mov	r2, r1
  404b34:	3204      	adds	r2, #4
  404b36:	680c      	ldr	r4, [r1, #0]
  404b38:	920e      	str	r2, [sp, #56]	; 0x38
  404b3a:	2500      	movs	r5, #0
  404b3c:	f7ff ba7a 	b.w	404034 <_vfprintf_r+0x218>
  404b40:	681c      	ldr	r4, [r3, #0]
  404b42:	3304      	adds	r3, #4
  404b44:	930e      	str	r3, [sp, #56]	; 0x38
  404b46:	2500      	movs	r5, #0
  404b48:	e426      	b.n	404398 <_vfprintf_r+0x57c>
  404b4a:	3301      	adds	r3, #1
  404b4c:	4434      	add	r4, r6
  404b4e:	2b07      	cmp	r3, #7
  404b50:	9425      	str	r4, [sp, #148]	; 0x94
  404b52:	9324      	str	r3, [sp, #144]	; 0x90
  404b54:	e888 0060 	stmia.w	r8, {r5, r6}
  404b58:	f77f ab63 	ble.w	404222 <_vfprintf_r+0x406>
  404b5c:	e6d6      	b.n	40490c <_vfprintf_r+0xaf0>
  404b5e:	3204      	adds	r2, #4
  404b60:	681c      	ldr	r4, [r3, #0]
  404b62:	920e      	str	r2, [sp, #56]	; 0x38
  404b64:	2301      	movs	r3, #1
  404b66:	2500      	movs	r5, #0
  404b68:	f7ff ba64 	b.w	404034 <_vfprintf_r+0x218>
  404b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b6e:	6814      	ldr	r4, [r2, #0]
  404b70:	4613      	mov	r3, r2
  404b72:	3304      	adds	r3, #4
  404b74:	17e5      	asrs	r5, r4, #31
  404b76:	930e      	str	r3, [sp, #56]	; 0x38
  404b78:	4622      	mov	r2, r4
  404b7a:	462b      	mov	r3, r5
  404b7c:	e460      	b.n	404440 <_vfprintf_r+0x624>
  404b7e:	f8dd b018 	ldr.w	fp, [sp, #24]
  404b82:	f8cd b018 	str.w	fp, [sp, #24]
  404b86:	af40      	add	r7, sp, #256	; 0x100
  404b88:	3430      	adds	r4, #48	; 0x30
  404b8a:	2301      	movs	r3, #1
  404b8c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  404b90:	930d      	str	r3, [sp, #52]	; 0x34
  404b92:	f7ff ba6d 	b.w	404070 <_vfprintf_r+0x254>
  404b96:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404b9a:	f002 f895 	bl	406cc8 <__retarget_lock_release_recursive>
  404b9e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404ba2:	e5af      	b.n	404704 <_vfprintf_r+0x8e8>
  404ba4:	4614      	mov	r4, r2
  404ba6:	3301      	adds	r3, #1
  404ba8:	4434      	add	r4, r6
  404baa:	2b07      	cmp	r3, #7
  404bac:	9425      	str	r4, [sp, #148]	; 0x94
  404bae:	9324      	str	r3, [sp, #144]	; 0x90
  404bb0:	e888 0060 	stmia.w	r8, {r5, r6}
  404bb4:	f340 816d 	ble.w	404e92 <_vfprintf_r+0x1076>
  404bb8:	aa23      	add	r2, sp, #140	; 0x8c
  404bba:	990a      	ldr	r1, [sp, #40]	; 0x28
  404bbc:	9808      	ldr	r0, [sp, #32]
  404bbe:	f002 fed7 	bl	407970 <__sprint_r>
  404bc2:	2800      	cmp	r0, #0
  404bc4:	f47f aeb4 	bne.w	404930 <_vfprintf_r+0xb14>
  404bc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404bca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404bce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404bd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bd2:	4293      	cmp	r3, r2
  404bd4:	f280 8158 	bge.w	404e88 <_vfprintf_r+0x106c>
  404bd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404bda:	9814      	ldr	r0, [sp, #80]	; 0x50
  404bdc:	9915      	ldr	r1, [sp, #84]	; 0x54
  404bde:	f8c8 1000 	str.w	r1, [r8]
  404be2:	3201      	adds	r2, #1
  404be4:	4404      	add	r4, r0
  404be6:	2a07      	cmp	r2, #7
  404be8:	9425      	str	r4, [sp, #148]	; 0x94
  404bea:	f8c8 0004 	str.w	r0, [r8, #4]
  404bee:	9224      	str	r2, [sp, #144]	; 0x90
  404bf0:	f300 8152 	bgt.w	404e98 <_vfprintf_r+0x107c>
  404bf4:	f108 0808 	add.w	r8, r8, #8
  404bf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404bfa:	9910      	ldr	r1, [sp, #64]	; 0x40
  404bfc:	1ad3      	subs	r3, r2, r3
  404bfe:	1a56      	subs	r6, r2, r1
  404c00:	429e      	cmp	r6, r3
  404c02:	bfa8      	it	ge
  404c04:	461e      	movge	r6, r3
  404c06:	2e00      	cmp	r6, #0
  404c08:	dd0e      	ble.n	404c28 <_vfprintf_r+0xe0c>
  404c0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404c0c:	f8c8 6004 	str.w	r6, [r8, #4]
  404c10:	3201      	adds	r2, #1
  404c12:	440f      	add	r7, r1
  404c14:	4434      	add	r4, r6
  404c16:	2a07      	cmp	r2, #7
  404c18:	f8c8 7000 	str.w	r7, [r8]
  404c1c:	9425      	str	r4, [sp, #148]	; 0x94
  404c1e:	9224      	str	r2, [sp, #144]	; 0x90
  404c20:	f300 823c 	bgt.w	40509c <_vfprintf_r+0x1280>
  404c24:	f108 0808 	add.w	r8, r8, #8
  404c28:	2e00      	cmp	r6, #0
  404c2a:	bfac      	ite	ge
  404c2c:	1b9e      	subge	r6, r3, r6
  404c2e:	461e      	movlt	r6, r3
  404c30:	2e00      	cmp	r6, #0
  404c32:	f77f aaf8 	ble.w	404226 <_vfprintf_r+0x40a>
  404c36:	2e10      	cmp	r6, #16
  404c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c3a:	4d3e      	ldr	r5, [pc, #248]	; (404d34 <_vfprintf_r+0xf18>)
  404c3c:	dd85      	ble.n	404b4a <_vfprintf_r+0xd2e>
  404c3e:	2710      	movs	r7, #16
  404c40:	f8dd a020 	ldr.w	sl, [sp, #32]
  404c44:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c48:	e005      	b.n	404c56 <_vfprintf_r+0xe3a>
  404c4a:	f108 0808 	add.w	r8, r8, #8
  404c4e:	3e10      	subs	r6, #16
  404c50:	2e10      	cmp	r6, #16
  404c52:	f77f af7a 	ble.w	404b4a <_vfprintf_r+0xd2e>
  404c56:	3301      	adds	r3, #1
  404c58:	3410      	adds	r4, #16
  404c5a:	2b07      	cmp	r3, #7
  404c5c:	9425      	str	r4, [sp, #148]	; 0x94
  404c5e:	9324      	str	r3, [sp, #144]	; 0x90
  404c60:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c64:	ddf1      	ble.n	404c4a <_vfprintf_r+0xe2e>
  404c66:	aa23      	add	r2, sp, #140	; 0x8c
  404c68:	4659      	mov	r1, fp
  404c6a:	4650      	mov	r0, sl
  404c6c:	f002 fe80 	bl	407970 <__sprint_r>
  404c70:	2800      	cmp	r0, #0
  404c72:	f040 8176 	bne.w	404f62 <_vfprintf_r+0x1146>
  404c76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404c7e:	e7e6      	b.n	404c4e <_vfprintf_r+0xe32>
  404c80:	9b06      	ldr	r3, [sp, #24]
  404c82:	07d8      	lsls	r0, r3, #31
  404c84:	f53f adff 	bmi.w	404886 <_vfprintf_r+0xa6a>
  404c88:	3601      	adds	r6, #1
  404c8a:	3401      	adds	r4, #1
  404c8c:	2301      	movs	r3, #1
  404c8e:	2e07      	cmp	r6, #7
  404c90:	9425      	str	r4, [sp, #148]	; 0x94
  404c92:	9624      	str	r6, [sp, #144]	; 0x90
  404c94:	f8c8 7000 	str.w	r7, [r8]
  404c98:	f8c8 3004 	str.w	r3, [r8, #4]
  404c9c:	f77f ae27 	ble.w	4048ee <_vfprintf_r+0xad2>
  404ca0:	aa23      	add	r2, sp, #140	; 0x8c
  404ca2:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ca4:	9808      	ldr	r0, [sp, #32]
  404ca6:	f002 fe63 	bl	407970 <__sprint_r>
  404caa:	2800      	cmp	r0, #0
  404cac:	f47f ae40 	bne.w	404930 <_vfprintf_r+0xb14>
  404cb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404cb2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404cb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404cb8:	e61b      	b.n	4048f2 <_vfprintf_r+0xad6>
  404cba:	aa23      	add	r2, sp, #140	; 0x8c
  404cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
  404cbe:	9808      	ldr	r0, [sp, #32]
  404cc0:	f002 fe56 	bl	407970 <__sprint_r>
  404cc4:	2800      	cmp	r0, #0
  404cc6:	f47f ae33 	bne.w	404930 <_vfprintf_r+0xb14>
  404cca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ccc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404cce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404cd2:	e5e6      	b.n	4048a2 <_vfprintf_r+0xa86>
  404cd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404cd6:	3507      	adds	r5, #7
  404cd8:	f025 0507 	bic.w	r5, r5, #7
  404cdc:	e9d5 2300 	ldrd	r2, r3, [r5]
  404ce0:	f105 0108 	add.w	r1, r5, #8
  404ce4:	910e      	str	r1, [sp, #56]	; 0x38
  404ce6:	4614      	mov	r4, r2
  404ce8:	461d      	mov	r5, r3
  404cea:	f7ff bba9 	b.w	404440 <_vfprintf_r+0x624>
  404cee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404cf0:	3507      	adds	r5, #7
  404cf2:	f025 0307 	bic.w	r3, r5, #7
  404cf6:	f103 0208 	add.w	r2, r3, #8
  404cfa:	920e      	str	r2, [sp, #56]	; 0x38
  404cfc:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d00:	f7ff bb4a 	b.w	404398 <_vfprintf_r+0x57c>
  404d04:	3601      	adds	r6, #1
  404d06:	443c      	add	r4, r7
  404d08:	2e07      	cmp	r6, #7
  404d0a:	9425      	str	r4, [sp, #148]	; 0x94
  404d0c:	9624      	str	r6, [sp, #144]	; 0x90
  404d0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404d12:	f77f adec 	ble.w	4048ee <_vfprintf_r+0xad2>
  404d16:	e7c3      	b.n	404ca0 <_vfprintf_r+0xe84>
  404d18:	aa23      	add	r2, sp, #140	; 0x8c
  404d1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d1c:	9808      	ldr	r0, [sp, #32]
  404d1e:	f002 fe27 	bl	407970 <__sprint_r>
  404d22:	2800      	cmp	r0, #0
  404d24:	f47f ae04 	bne.w	404930 <_vfprintf_r+0xb14>
  404d28:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404d2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404d30:	e5c6      	b.n	4048c0 <_vfprintf_r+0xaa4>
  404d32:	bf00      	nop
  404d34:	004089c4 	.word	0x004089c4
  404d38:	af30      	add	r7, sp, #192	; 0xc0
  404d3a:	f7ff b999 	b.w	404070 <_vfprintf_r+0x254>
  404d3e:	aa23      	add	r2, sp, #140	; 0x8c
  404d40:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d42:	9808      	ldr	r0, [sp, #32]
  404d44:	f002 fe14 	bl	407970 <__sprint_r>
  404d48:	2800      	cmp	r0, #0
  404d4a:	f47f adf1 	bne.w	404930 <_vfprintf_r+0xb14>
  404d4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d50:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404d54:	f7ff ba11 	b.w	40417a <_vfprintf_r+0x35e>
  404d58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404d5c:	4264      	negs	r4, r4
  404d5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404d62:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404d66:	2301      	movs	r3, #1
  404d68:	f7ff b968 	b.w	40403c <_vfprintf_r+0x220>
  404d6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  404d6e:	4622      	mov	r2, r4
  404d70:	4620      	mov	r0, r4
  404d72:	9c12      	ldr	r4, [sp, #72]	; 0x48
  404d74:	4623      	mov	r3, r4
  404d76:	4621      	mov	r1, r4
  404d78:	f003 fb44 	bl	408404 <__aeabi_dcmpun>
  404d7c:	2800      	cmp	r0, #0
  404d7e:	f040 828c 	bne.w	40529a <_vfprintf_r+0x147e>
  404d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d84:	3301      	adds	r3, #1
  404d86:	f026 0320 	bic.w	r3, r6, #32
  404d8a:	930d      	str	r3, [sp, #52]	; 0x34
  404d8c:	f000 8091 	beq.w	404eb2 <_vfprintf_r+0x1096>
  404d90:	2b47      	cmp	r3, #71	; 0x47
  404d92:	d104      	bne.n	404d9e <_vfprintf_r+0xf82>
  404d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d96:	2b00      	cmp	r3, #0
  404d98:	bf08      	it	eq
  404d9a:	2301      	moveq	r3, #1
  404d9c:	9309      	str	r3, [sp, #36]	; 0x24
  404d9e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404da2:	9306      	str	r3, [sp, #24]
  404da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404da6:	f1b3 0a00 	subs.w	sl, r3, #0
  404daa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dac:	9307      	str	r3, [sp, #28]
  404dae:	bfbb      	ittet	lt
  404db0:	4653      	movlt	r3, sl
  404db2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  404db6:	2300      	movge	r3, #0
  404db8:	232d      	movlt	r3, #45	; 0x2d
  404dba:	2e66      	cmp	r6, #102	; 0x66
  404dbc:	930f      	str	r3, [sp, #60]	; 0x3c
  404dbe:	f000 817f 	beq.w	4050c0 <_vfprintf_r+0x12a4>
  404dc2:	2e46      	cmp	r6, #70	; 0x46
  404dc4:	f000 81d4 	beq.w	405170 <_vfprintf_r+0x1354>
  404dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dca:	9a07      	ldr	r2, [sp, #28]
  404dcc:	2b45      	cmp	r3, #69	; 0x45
  404dce:	bf0c      	ite	eq
  404dd0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  404dd2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  404dd4:	a821      	add	r0, sp, #132	; 0x84
  404dd6:	a91e      	add	r1, sp, #120	; 0x78
  404dd8:	bf08      	it	eq
  404dda:	1c5d      	addeq	r5, r3, #1
  404ddc:	9004      	str	r0, [sp, #16]
  404dde:	9103      	str	r1, [sp, #12]
  404de0:	a81d      	add	r0, sp, #116	; 0x74
  404de2:	2102      	movs	r1, #2
  404de4:	9002      	str	r0, [sp, #8]
  404de6:	4653      	mov	r3, sl
  404de8:	9501      	str	r5, [sp, #4]
  404dea:	9100      	str	r1, [sp, #0]
  404dec:	9808      	ldr	r0, [sp, #32]
  404dee:	f000 fc0b 	bl	405608 <_dtoa_r>
  404df2:	2e67      	cmp	r6, #103	; 0x67
  404df4:	4607      	mov	r7, r0
  404df6:	f040 81af 	bne.w	405158 <_vfprintf_r+0x133c>
  404dfa:	f01b 0f01 	tst.w	fp, #1
  404dfe:	f000 8213 	beq.w	405228 <_vfprintf_r+0x140c>
  404e02:	197c      	adds	r4, r7, r5
  404e04:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e06:	9807      	ldr	r0, [sp, #28]
  404e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e0a:	4651      	mov	r1, sl
  404e0c:	f003 fac8 	bl	4083a0 <__aeabi_dcmpeq>
  404e10:	2800      	cmp	r0, #0
  404e12:	f040 8132 	bne.w	40507a <_vfprintf_r+0x125e>
  404e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404e18:	42a3      	cmp	r3, r4
  404e1a:	d206      	bcs.n	404e2a <_vfprintf_r+0x100e>
  404e1c:	2130      	movs	r1, #48	; 0x30
  404e1e:	1c5a      	adds	r2, r3, #1
  404e20:	9221      	str	r2, [sp, #132]	; 0x84
  404e22:	7019      	strb	r1, [r3, #0]
  404e24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404e26:	429c      	cmp	r4, r3
  404e28:	d8f9      	bhi.n	404e1e <_vfprintf_r+0x1002>
  404e2a:	1bdb      	subs	r3, r3, r7
  404e2c:	9311      	str	r3, [sp, #68]	; 0x44
  404e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e30:	2b47      	cmp	r3, #71	; 0x47
  404e32:	f000 80b9 	beq.w	404fa8 <_vfprintf_r+0x118c>
  404e36:	2e65      	cmp	r6, #101	; 0x65
  404e38:	f340 8276 	ble.w	405328 <_vfprintf_r+0x150c>
  404e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e3e:	9310      	str	r3, [sp, #64]	; 0x40
  404e40:	2e66      	cmp	r6, #102	; 0x66
  404e42:	f000 8162 	beq.w	40510a <_vfprintf_r+0x12ee>
  404e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e48:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404e4a:	4619      	mov	r1, r3
  404e4c:	4291      	cmp	r1, r2
  404e4e:	f300 814f 	bgt.w	4050f0 <_vfprintf_r+0x12d4>
  404e52:	f01b 0f01 	tst.w	fp, #1
  404e56:	f040 8209 	bne.w	40526c <_vfprintf_r+0x1450>
  404e5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404e5e:	9307      	str	r3, [sp, #28]
  404e60:	920d      	str	r2, [sp, #52]	; 0x34
  404e62:	2667      	movs	r6, #103	; 0x67
  404e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e66:	2b00      	cmp	r3, #0
  404e68:	f040 8096 	bne.w	404f98 <_vfprintf_r+0x117c>
  404e6c:	9309      	str	r3, [sp, #36]	; 0x24
  404e6e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404e72:	f7ff b905 	b.w	404080 <_vfprintf_r+0x264>
  404e76:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404e7a:	f001 ff25 	bl	406cc8 <__retarget_lock_release_recursive>
  404e7e:	f04f 33ff 	mov.w	r3, #4294967295
  404e82:	930b      	str	r3, [sp, #44]	; 0x2c
  404e84:	f7ff ba30 	b.w	4042e8 <_vfprintf_r+0x4cc>
  404e88:	9a06      	ldr	r2, [sp, #24]
  404e8a:	07d5      	lsls	r5, r2, #31
  404e8c:	f57f aeb4 	bpl.w	404bf8 <_vfprintf_r+0xddc>
  404e90:	e6a2      	b.n	404bd8 <_vfprintf_r+0xdbc>
  404e92:	f108 0808 	add.w	r8, r8, #8
  404e96:	e69a      	b.n	404bce <_vfprintf_r+0xdb2>
  404e98:	aa23      	add	r2, sp, #140	; 0x8c
  404e9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e9c:	9808      	ldr	r0, [sp, #32]
  404e9e:	f002 fd67 	bl	407970 <__sprint_r>
  404ea2:	2800      	cmp	r0, #0
  404ea4:	f47f ad44 	bne.w	404930 <_vfprintf_r+0xb14>
  404ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404eaa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404eac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404eb0:	e6a2      	b.n	404bf8 <_vfprintf_r+0xddc>
  404eb2:	2306      	movs	r3, #6
  404eb4:	9309      	str	r3, [sp, #36]	; 0x24
  404eb6:	e772      	b.n	404d9e <_vfprintf_r+0xf82>
  404eb8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404ebc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404ec0:	f7ff bbc7 	b.w	404652 <_vfprintf_r+0x836>
  404ec4:	aa23      	add	r2, sp, #140	; 0x8c
  404ec6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ec8:	9808      	ldr	r0, [sp, #32]
  404eca:	f002 fd51 	bl	407970 <__sprint_r>
  404ece:	2800      	cmp	r0, #0
  404ed0:	f47f ad2e 	bne.w	404930 <_vfprintf_r+0xb14>
  404ed4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404ed8:	e437      	b.n	40474a <_vfprintf_r+0x92e>
  404eda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404edc:	4ab4      	ldr	r2, [pc, #720]	; (4051b0 <_vfprintf_r+0x1394>)
  404ede:	f8c8 2000 	str.w	r2, [r8]
  404ee2:	3301      	adds	r3, #1
  404ee4:	3401      	adds	r4, #1
  404ee6:	2201      	movs	r2, #1
  404ee8:	2b07      	cmp	r3, #7
  404eea:	9425      	str	r4, [sp, #148]	; 0x94
  404eec:	9324      	str	r3, [sp, #144]	; 0x90
  404eee:	f8c8 2004 	str.w	r2, [r8, #4]
  404ef2:	f300 8124 	bgt.w	40513e <_vfprintf_r+0x1322>
  404ef6:	f108 0808 	add.w	r8, r8, #8
  404efa:	b929      	cbnz	r1, 404f08 <_vfprintf_r+0x10ec>
  404efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404efe:	b91b      	cbnz	r3, 404f08 <_vfprintf_r+0x10ec>
  404f00:	9b06      	ldr	r3, [sp, #24]
  404f02:	07de      	lsls	r6, r3, #31
  404f04:	f57f a98f 	bpl.w	404226 <_vfprintf_r+0x40a>
  404f08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f0a:	9814      	ldr	r0, [sp, #80]	; 0x50
  404f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404f0e:	f8c8 2000 	str.w	r2, [r8]
  404f12:	3301      	adds	r3, #1
  404f14:	4602      	mov	r2, r0
  404f16:	4422      	add	r2, r4
  404f18:	2b07      	cmp	r3, #7
  404f1a:	9225      	str	r2, [sp, #148]	; 0x94
  404f1c:	f8c8 0004 	str.w	r0, [r8, #4]
  404f20:	9324      	str	r3, [sp, #144]	; 0x90
  404f22:	f300 8169 	bgt.w	4051f8 <_vfprintf_r+0x13dc>
  404f26:	f108 0808 	add.w	r8, r8, #8
  404f2a:	2900      	cmp	r1, #0
  404f2c:	f2c0 8136 	blt.w	40519c <_vfprintf_r+0x1380>
  404f30:	9911      	ldr	r1, [sp, #68]	; 0x44
  404f32:	f8c8 7000 	str.w	r7, [r8]
  404f36:	3301      	adds	r3, #1
  404f38:	188c      	adds	r4, r1, r2
  404f3a:	2b07      	cmp	r3, #7
  404f3c:	9425      	str	r4, [sp, #148]	; 0x94
  404f3e:	9324      	str	r3, [sp, #144]	; 0x90
  404f40:	f8c8 1004 	str.w	r1, [r8, #4]
  404f44:	f77f a96d 	ble.w	404222 <_vfprintf_r+0x406>
  404f48:	e4e0      	b.n	40490c <_vfprintf_r+0xaf0>
  404f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f4e:	6813      	ldr	r3, [r2, #0]
  404f50:	17cd      	asrs	r5, r1, #31
  404f52:	4608      	mov	r0, r1
  404f54:	3204      	adds	r2, #4
  404f56:	4629      	mov	r1, r5
  404f58:	920e      	str	r2, [sp, #56]	; 0x38
  404f5a:	e9c3 0100 	strd	r0, r1, [r3]
  404f5e:	f7fe bfa9 	b.w	403eb4 <_vfprintf_r+0x98>
  404f62:	46da      	mov	sl, fp
  404f64:	f7ff bbc4 	b.w	4046f0 <_vfprintf_r+0x8d4>
  404f68:	aa23      	add	r2, sp, #140	; 0x8c
  404f6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f6c:	9808      	ldr	r0, [sp, #32]
  404f6e:	f002 fcff 	bl	407970 <__sprint_r>
  404f72:	2800      	cmp	r0, #0
  404f74:	f47f acdc 	bne.w	404930 <_vfprintf_r+0xb14>
  404f78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f7e:	f7ff bbfd 	b.w	40477c <_vfprintf_r+0x960>
  404f82:	4638      	mov	r0, r7
  404f84:	9409      	str	r4, [sp, #36]	; 0x24
  404f86:	f7fe fedb 	bl	403d40 <strlen>
  404f8a:	950e      	str	r5, [sp, #56]	; 0x38
  404f8c:	900d      	str	r0, [sp, #52]	; 0x34
  404f8e:	f8cd b018 	str.w	fp, [sp, #24]
  404f92:	4603      	mov	r3, r0
  404f94:	f7ff ba36 	b.w	404404 <_vfprintf_r+0x5e8>
  404f98:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404f9c:	2300      	movs	r3, #0
  404f9e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404fa2:	9309      	str	r3, [sp, #36]	; 0x24
  404fa4:	f7ff b86f 	b.w	404086 <_vfprintf_r+0x26a>
  404fa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404faa:	9310      	str	r3, [sp, #64]	; 0x40
  404fac:	461a      	mov	r2, r3
  404fae:	3303      	adds	r3, #3
  404fb0:	db04      	blt.n	404fbc <_vfprintf_r+0x11a0>
  404fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fb4:	4619      	mov	r1, r3
  404fb6:	4291      	cmp	r1, r2
  404fb8:	f6bf af45 	bge.w	404e46 <_vfprintf_r+0x102a>
  404fbc:	3e02      	subs	r6, #2
  404fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404fc0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  404fc4:	3b01      	subs	r3, #1
  404fc6:	2b00      	cmp	r3, #0
  404fc8:	931d      	str	r3, [sp, #116]	; 0x74
  404fca:	bfbd      	ittte	lt
  404fcc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  404fce:	f1c3 0301 	rsblt	r3, r3, #1
  404fd2:	222d      	movlt	r2, #45	; 0x2d
  404fd4:	222b      	movge	r2, #43	; 0x2b
  404fd6:	2b09      	cmp	r3, #9
  404fd8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404fdc:	f340 813e 	ble.w	40525c <_vfprintf_r+0x1440>
  404fe0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  404fe4:	4620      	mov	r0, r4
  404fe6:	4d73      	ldr	r5, [pc, #460]	; (4051b4 <_vfprintf_r+0x1398>)
  404fe8:	e000      	b.n	404fec <_vfprintf_r+0x11d0>
  404fea:	4610      	mov	r0, r2
  404fec:	fb85 1203 	smull	r1, r2, r5, r3
  404ff0:	17d9      	asrs	r1, r3, #31
  404ff2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404ff6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404ffa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404ffe:	3230      	adds	r2, #48	; 0x30
  405000:	2909      	cmp	r1, #9
  405002:	f800 2c01 	strb.w	r2, [r0, #-1]
  405006:	460b      	mov	r3, r1
  405008:	f100 32ff 	add.w	r2, r0, #4294967295
  40500c:	dced      	bgt.n	404fea <_vfprintf_r+0x11ce>
  40500e:	3330      	adds	r3, #48	; 0x30
  405010:	3802      	subs	r0, #2
  405012:	b2d9      	uxtb	r1, r3
  405014:	4284      	cmp	r4, r0
  405016:	f802 1c01 	strb.w	r1, [r2, #-1]
  40501a:	f240 8190 	bls.w	40533e <_vfprintf_r+0x1522>
  40501e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  405022:	4613      	mov	r3, r2
  405024:	e001      	b.n	40502a <_vfprintf_r+0x120e>
  405026:	f813 1b01 	ldrb.w	r1, [r3], #1
  40502a:	f800 1b01 	strb.w	r1, [r0], #1
  40502e:	42a3      	cmp	r3, r4
  405030:	d1f9      	bne.n	405026 <_vfprintf_r+0x120a>
  405032:	3301      	adds	r3, #1
  405034:	1a9b      	subs	r3, r3, r2
  405036:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40503a:	4413      	add	r3, r2
  40503c:	aa1f      	add	r2, sp, #124	; 0x7c
  40503e:	1a9b      	subs	r3, r3, r2
  405040:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405042:	9319      	str	r3, [sp, #100]	; 0x64
  405044:	2a01      	cmp	r2, #1
  405046:	4413      	add	r3, r2
  405048:	930d      	str	r3, [sp, #52]	; 0x34
  40504a:	f340 8145 	ble.w	4052d8 <_vfprintf_r+0x14bc>
  40504e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405050:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405052:	4413      	add	r3, r2
  405054:	930d      	str	r3, [sp, #52]	; 0x34
  405056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40505a:	9307      	str	r3, [sp, #28]
  40505c:	2300      	movs	r3, #0
  40505e:	9310      	str	r3, [sp, #64]	; 0x40
  405060:	e700      	b.n	404e64 <_vfprintf_r+0x1048>
  405062:	aa23      	add	r2, sp, #140	; 0x8c
  405064:	990a      	ldr	r1, [sp, #40]	; 0x28
  405066:	9808      	ldr	r0, [sp, #32]
  405068:	f002 fc82 	bl	407970 <__sprint_r>
  40506c:	2800      	cmp	r0, #0
  40506e:	f47f ac5f 	bne.w	404930 <_vfprintf_r+0xb14>
  405072:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405074:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405078:	e4d1      	b.n	404a1e <_vfprintf_r+0xc02>
  40507a:	4623      	mov	r3, r4
  40507c:	e6d5      	b.n	404e2a <_vfprintf_r+0x100e>
  40507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405080:	9710      	str	r7, [sp, #64]	; 0x40
  405082:	2b06      	cmp	r3, #6
  405084:	bf28      	it	cs
  405086:	2306      	movcs	r3, #6
  405088:	9709      	str	r7, [sp, #36]	; 0x24
  40508a:	46ba      	mov	sl, r7
  40508c:	9307      	str	r3, [sp, #28]
  40508e:	950e      	str	r5, [sp, #56]	; 0x38
  405090:	f8cd b018 	str.w	fp, [sp, #24]
  405094:	930d      	str	r3, [sp, #52]	; 0x34
  405096:	4f48      	ldr	r7, [pc, #288]	; (4051b8 <_vfprintf_r+0x139c>)
  405098:	f7fe bff2 	b.w	404080 <_vfprintf_r+0x264>
  40509c:	aa23      	add	r2, sp, #140	; 0x8c
  40509e:	990a      	ldr	r1, [sp, #40]	; 0x28
  4050a0:	9808      	ldr	r0, [sp, #32]
  4050a2:	f002 fc65 	bl	407970 <__sprint_r>
  4050a6:	2800      	cmp	r0, #0
  4050a8:	f47f ac42 	bne.w	404930 <_vfprintf_r+0xb14>
  4050ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4050ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4050b2:	1ad3      	subs	r3, r2, r3
  4050b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4050b8:	e5b6      	b.n	404c28 <_vfprintf_r+0xe0c>
  4050ba:	46a2      	mov	sl, r4
  4050bc:	f7ff bb18 	b.w	4046f0 <_vfprintf_r+0x8d4>
  4050c0:	a821      	add	r0, sp, #132	; 0x84
  4050c2:	a91e      	add	r1, sp, #120	; 0x78
  4050c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4050c6:	9004      	str	r0, [sp, #16]
  4050c8:	9103      	str	r1, [sp, #12]
  4050ca:	a81d      	add	r0, sp, #116	; 0x74
  4050cc:	2103      	movs	r1, #3
  4050ce:	9002      	str	r0, [sp, #8]
  4050d0:	9a07      	ldr	r2, [sp, #28]
  4050d2:	9501      	str	r5, [sp, #4]
  4050d4:	4653      	mov	r3, sl
  4050d6:	9100      	str	r1, [sp, #0]
  4050d8:	9808      	ldr	r0, [sp, #32]
  4050da:	f000 fa95 	bl	405608 <_dtoa_r>
  4050de:	4607      	mov	r7, r0
  4050e0:	1944      	adds	r4, r0, r5
  4050e2:	783b      	ldrb	r3, [r7, #0]
  4050e4:	2b30      	cmp	r3, #48	; 0x30
  4050e6:	f000 80ca 	beq.w	40527e <_vfprintf_r+0x1462>
  4050ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4050ec:	442c      	add	r4, r5
  4050ee:	e689      	b.n	404e04 <_vfprintf_r+0xfe8>
  4050f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4050f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4050f4:	4413      	add	r3, r2
  4050f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4050f8:	930d      	str	r3, [sp, #52]	; 0x34
  4050fa:	2a00      	cmp	r2, #0
  4050fc:	f340 80e4 	ble.w	4052c8 <_vfprintf_r+0x14ac>
  405100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405104:	9307      	str	r3, [sp, #28]
  405106:	2667      	movs	r6, #103	; 0x67
  405108:	e6ac      	b.n	404e64 <_vfprintf_r+0x1048>
  40510a:	2b00      	cmp	r3, #0
  40510c:	f340 80fb 	ble.w	405306 <_vfprintf_r+0x14ea>
  405110:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405112:	2a00      	cmp	r2, #0
  405114:	f040 80ce 	bne.w	4052b4 <_vfprintf_r+0x1498>
  405118:	f01b 0f01 	tst.w	fp, #1
  40511c:	f040 80ca 	bne.w	4052b4 <_vfprintf_r+0x1498>
  405120:	9307      	str	r3, [sp, #28]
  405122:	930d      	str	r3, [sp, #52]	; 0x34
  405124:	e69e      	b.n	404e64 <_vfprintf_r+0x1048>
  405126:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405128:	9307      	str	r3, [sp, #28]
  40512a:	930d      	str	r3, [sp, #52]	; 0x34
  40512c:	9009      	str	r0, [sp, #36]	; 0x24
  40512e:	950e      	str	r5, [sp, #56]	; 0x38
  405130:	f8cd b018 	str.w	fp, [sp, #24]
  405134:	9010      	str	r0, [sp, #64]	; 0x40
  405136:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40513a:	f7fe bfa1 	b.w	404080 <_vfprintf_r+0x264>
  40513e:	aa23      	add	r2, sp, #140	; 0x8c
  405140:	990a      	ldr	r1, [sp, #40]	; 0x28
  405142:	9808      	ldr	r0, [sp, #32]
  405144:	f002 fc14 	bl	407970 <__sprint_r>
  405148:	2800      	cmp	r0, #0
  40514a:	f47f abf1 	bne.w	404930 <_vfprintf_r+0xb14>
  40514e:	991d      	ldr	r1, [sp, #116]	; 0x74
  405150:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405152:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405156:	e6d0      	b.n	404efa <_vfprintf_r+0x10de>
  405158:	2e47      	cmp	r6, #71	; 0x47
  40515a:	f47f ae52 	bne.w	404e02 <_vfprintf_r+0xfe6>
  40515e:	f01b 0f01 	tst.w	fp, #1
  405162:	f000 80da 	beq.w	40531a <_vfprintf_r+0x14fe>
  405166:	2e46      	cmp	r6, #70	; 0x46
  405168:	eb07 0405 	add.w	r4, r7, r5
  40516c:	d0b9      	beq.n	4050e2 <_vfprintf_r+0x12c6>
  40516e:	e649      	b.n	404e04 <_vfprintf_r+0xfe8>
  405170:	a821      	add	r0, sp, #132	; 0x84
  405172:	a91e      	add	r1, sp, #120	; 0x78
  405174:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405176:	9004      	str	r0, [sp, #16]
  405178:	9103      	str	r1, [sp, #12]
  40517a:	a81d      	add	r0, sp, #116	; 0x74
  40517c:	2103      	movs	r1, #3
  40517e:	9002      	str	r0, [sp, #8]
  405180:	9a07      	ldr	r2, [sp, #28]
  405182:	9401      	str	r4, [sp, #4]
  405184:	4653      	mov	r3, sl
  405186:	9100      	str	r1, [sp, #0]
  405188:	9808      	ldr	r0, [sp, #32]
  40518a:	f000 fa3d 	bl	405608 <_dtoa_r>
  40518e:	4625      	mov	r5, r4
  405190:	4607      	mov	r7, r0
  405192:	e7e8      	b.n	405166 <_vfprintf_r+0x134a>
  405194:	2300      	movs	r3, #0
  405196:	9309      	str	r3, [sp, #36]	; 0x24
  405198:	f7fe bec1 	b.w	403f1e <_vfprintf_r+0x102>
  40519c:	424e      	negs	r6, r1
  40519e:	3110      	adds	r1, #16
  4051a0:	4d06      	ldr	r5, [pc, #24]	; (4051bc <_vfprintf_r+0x13a0>)
  4051a2:	da43      	bge.n	40522c <_vfprintf_r+0x1410>
  4051a4:	2410      	movs	r4, #16
  4051a6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4051aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4051ae:	e00c      	b.n	4051ca <_vfprintf_r+0x13ae>
  4051b0:	004089b0 	.word	0x004089b0
  4051b4:	66666667 	.word	0x66666667
  4051b8:	004089a8 	.word	0x004089a8
  4051bc:	004089c4 	.word	0x004089c4
  4051c0:	f108 0808 	add.w	r8, r8, #8
  4051c4:	3e10      	subs	r6, #16
  4051c6:	2e10      	cmp	r6, #16
  4051c8:	dd30      	ble.n	40522c <_vfprintf_r+0x1410>
  4051ca:	3301      	adds	r3, #1
  4051cc:	3210      	adds	r2, #16
  4051ce:	2b07      	cmp	r3, #7
  4051d0:	9225      	str	r2, [sp, #148]	; 0x94
  4051d2:	9324      	str	r3, [sp, #144]	; 0x90
  4051d4:	f8c8 5000 	str.w	r5, [r8]
  4051d8:	f8c8 4004 	str.w	r4, [r8, #4]
  4051dc:	ddf0      	ble.n	4051c0 <_vfprintf_r+0x13a4>
  4051de:	aa23      	add	r2, sp, #140	; 0x8c
  4051e0:	4659      	mov	r1, fp
  4051e2:	4650      	mov	r0, sl
  4051e4:	f002 fbc4 	bl	407970 <__sprint_r>
  4051e8:	2800      	cmp	r0, #0
  4051ea:	f47f aeba 	bne.w	404f62 <_vfprintf_r+0x1146>
  4051ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4051f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051f2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4051f6:	e7e5      	b.n	4051c4 <_vfprintf_r+0x13a8>
  4051f8:	aa23      	add	r2, sp, #140	; 0x8c
  4051fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051fc:	9808      	ldr	r0, [sp, #32]
  4051fe:	f002 fbb7 	bl	407970 <__sprint_r>
  405202:	2800      	cmp	r0, #0
  405204:	f47f ab94 	bne.w	404930 <_vfprintf_r+0xb14>
  405208:	991d      	ldr	r1, [sp, #116]	; 0x74
  40520a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40520c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40520e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405212:	e68a      	b.n	404f2a <_vfprintf_r+0x110e>
  405214:	9808      	ldr	r0, [sp, #32]
  405216:	aa23      	add	r2, sp, #140	; 0x8c
  405218:	4651      	mov	r1, sl
  40521a:	f002 fba9 	bl	407970 <__sprint_r>
  40521e:	2800      	cmp	r0, #0
  405220:	f43f aa64 	beq.w	4046ec <_vfprintf_r+0x8d0>
  405224:	f7ff ba64 	b.w	4046f0 <_vfprintf_r+0x8d4>
  405228:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40522a:	e5fe      	b.n	404e2a <_vfprintf_r+0x100e>
  40522c:	3301      	adds	r3, #1
  40522e:	4432      	add	r2, r6
  405230:	2b07      	cmp	r3, #7
  405232:	e888 0060 	stmia.w	r8, {r5, r6}
  405236:	9225      	str	r2, [sp, #148]	; 0x94
  405238:	9324      	str	r3, [sp, #144]	; 0x90
  40523a:	f108 0808 	add.w	r8, r8, #8
  40523e:	f77f ae77 	ble.w	404f30 <_vfprintf_r+0x1114>
  405242:	aa23      	add	r2, sp, #140	; 0x8c
  405244:	990a      	ldr	r1, [sp, #40]	; 0x28
  405246:	9808      	ldr	r0, [sp, #32]
  405248:	f002 fb92 	bl	407970 <__sprint_r>
  40524c:	2800      	cmp	r0, #0
  40524e:	f47f ab6f 	bne.w	404930 <_vfprintf_r+0xb14>
  405252:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405254:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405256:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40525a:	e669      	b.n	404f30 <_vfprintf_r+0x1114>
  40525c:	3330      	adds	r3, #48	; 0x30
  40525e:	2230      	movs	r2, #48	; 0x30
  405260:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405264:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405268:	ab20      	add	r3, sp, #128	; 0x80
  40526a:	e6e7      	b.n	40503c <_vfprintf_r+0x1220>
  40526c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40526e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405270:	4413      	add	r3, r2
  405272:	930d      	str	r3, [sp, #52]	; 0x34
  405274:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405278:	9307      	str	r3, [sp, #28]
  40527a:	2667      	movs	r6, #103	; 0x67
  40527c:	e5f2      	b.n	404e64 <_vfprintf_r+0x1048>
  40527e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405280:	9807      	ldr	r0, [sp, #28]
  405282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405284:	4651      	mov	r1, sl
  405286:	f003 f88b 	bl	4083a0 <__aeabi_dcmpeq>
  40528a:	2800      	cmp	r0, #0
  40528c:	f47f af2d 	bne.w	4050ea <_vfprintf_r+0x12ce>
  405290:	f1c5 0501 	rsb	r5, r5, #1
  405294:	951d      	str	r5, [sp, #116]	; 0x74
  405296:	442c      	add	r4, r5
  405298:	e5b4      	b.n	404e04 <_vfprintf_r+0xfe8>
  40529a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40529c:	4f33      	ldr	r7, [pc, #204]	; (40536c <_vfprintf_r+0x1550>)
  40529e:	2b00      	cmp	r3, #0
  4052a0:	bfb6      	itet	lt
  4052a2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4052a6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4052aa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4052ae:	4b30      	ldr	r3, [pc, #192]	; (405370 <_vfprintf_r+0x1554>)
  4052b0:	f7ff b9d1 	b.w	404656 <_vfprintf_r+0x83a>
  4052b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4052b8:	4413      	add	r3, r2
  4052ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4052bc:	441a      	add	r2, r3
  4052be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4052c2:	920d      	str	r2, [sp, #52]	; 0x34
  4052c4:	9307      	str	r3, [sp, #28]
  4052c6:	e5cd      	b.n	404e64 <_vfprintf_r+0x1048>
  4052c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4052cc:	f1c3 0301 	rsb	r3, r3, #1
  4052d0:	441a      	add	r2, r3
  4052d2:	4613      	mov	r3, r2
  4052d4:	920d      	str	r2, [sp, #52]	; 0x34
  4052d6:	e713      	b.n	405100 <_vfprintf_r+0x12e4>
  4052d8:	f01b 0301 	ands.w	r3, fp, #1
  4052dc:	9310      	str	r3, [sp, #64]	; 0x40
  4052de:	f47f aeb6 	bne.w	40504e <_vfprintf_r+0x1232>
  4052e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4052e8:	9307      	str	r3, [sp, #28]
  4052ea:	e5bb      	b.n	404e64 <_vfprintf_r+0x1048>
  4052ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4052ee:	f899 6001 	ldrb.w	r6, [r9, #1]
  4052f2:	6823      	ldr	r3, [r4, #0]
  4052f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  4052f8:	9309      	str	r3, [sp, #36]	; 0x24
  4052fa:	4623      	mov	r3, r4
  4052fc:	3304      	adds	r3, #4
  4052fe:	4681      	mov	r9, r0
  405300:	930e      	str	r3, [sp, #56]	; 0x38
  405302:	f7fe be0a 	b.w	403f1a <_vfprintf_r+0xfe>
  405306:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405308:	b913      	cbnz	r3, 405310 <_vfprintf_r+0x14f4>
  40530a:	f01b 0f01 	tst.w	fp, #1
  40530e:	d002      	beq.n	405316 <_vfprintf_r+0x14fa>
  405310:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405312:	3301      	adds	r3, #1
  405314:	e7d1      	b.n	4052ba <_vfprintf_r+0x149e>
  405316:	2301      	movs	r3, #1
  405318:	e702      	b.n	405120 <_vfprintf_r+0x1304>
  40531a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40531c:	1bdb      	subs	r3, r3, r7
  40531e:	9311      	str	r3, [sp, #68]	; 0x44
  405320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405322:	2b47      	cmp	r3, #71	; 0x47
  405324:	f43f ae40 	beq.w	404fa8 <_vfprintf_r+0x118c>
  405328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40532a:	9310      	str	r3, [sp, #64]	; 0x40
  40532c:	e647      	b.n	404fbe <_vfprintf_r+0x11a2>
  40532e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405332:	f7ff b81d 	b.w	404370 <_vfprintf_r+0x554>
  405336:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40533a:	f7ff b918 	b.w	40456e <_vfprintf_r+0x752>
  40533e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405342:	e67b      	b.n	40503c <_vfprintf_r+0x1220>
  405344:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405348:	f7ff b866 	b.w	404418 <_vfprintf_r+0x5fc>
  40534c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405350:	f7ff b9ac 	b.w	4046ac <_vfprintf_r+0x890>
  405354:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405358:	f7ff b934 	b.w	4045c4 <_vfprintf_r+0x7a8>
  40535c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405360:	f7ff b8b0 	b.w	4044c4 <_vfprintf_r+0x6a8>
  405364:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405368:	f7ff b945 	b.w	4045f6 <_vfprintf_r+0x7da>
  40536c:	0040897c 	.word	0x0040897c
  405370:	00408978 	.word	0x00408978

00405374 <__sbprintf>:
  405374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405378:	460c      	mov	r4, r1
  40537a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40537e:	8989      	ldrh	r1, [r1, #12]
  405380:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405382:	89e5      	ldrh	r5, [r4, #14]
  405384:	9619      	str	r6, [sp, #100]	; 0x64
  405386:	f021 0102 	bic.w	r1, r1, #2
  40538a:	4606      	mov	r6, r0
  40538c:	69e0      	ldr	r0, [r4, #28]
  40538e:	f8ad 100c 	strh.w	r1, [sp, #12]
  405392:	4617      	mov	r7, r2
  405394:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405398:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40539a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40539e:	4698      	mov	r8, r3
  4053a0:	ad1a      	add	r5, sp, #104	; 0x68
  4053a2:	2300      	movs	r3, #0
  4053a4:	9007      	str	r0, [sp, #28]
  4053a6:	a816      	add	r0, sp, #88	; 0x58
  4053a8:	9209      	str	r2, [sp, #36]	; 0x24
  4053aa:	9306      	str	r3, [sp, #24]
  4053ac:	9500      	str	r5, [sp, #0]
  4053ae:	9504      	str	r5, [sp, #16]
  4053b0:	9102      	str	r1, [sp, #8]
  4053b2:	9105      	str	r1, [sp, #20]
  4053b4:	f001 fc82 	bl	406cbc <__retarget_lock_init_recursive>
  4053b8:	4643      	mov	r3, r8
  4053ba:	463a      	mov	r2, r7
  4053bc:	4669      	mov	r1, sp
  4053be:	4630      	mov	r0, r6
  4053c0:	f7fe fd2c 	bl	403e1c <_vfprintf_r>
  4053c4:	1e05      	subs	r5, r0, #0
  4053c6:	db07      	blt.n	4053d8 <__sbprintf+0x64>
  4053c8:	4630      	mov	r0, r6
  4053ca:	4669      	mov	r1, sp
  4053cc:	f001 f8e6 	bl	40659c <_fflush_r>
  4053d0:	2800      	cmp	r0, #0
  4053d2:	bf18      	it	ne
  4053d4:	f04f 35ff 	movne.w	r5, #4294967295
  4053d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4053dc:	065b      	lsls	r3, r3, #25
  4053de:	d503      	bpl.n	4053e8 <__sbprintf+0x74>
  4053e0:	89a3      	ldrh	r3, [r4, #12]
  4053e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053e6:	81a3      	strh	r3, [r4, #12]
  4053e8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4053ea:	f001 fc69 	bl	406cc0 <__retarget_lock_close_recursive>
  4053ee:	4628      	mov	r0, r5
  4053f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004053f8 <__swsetup_r>:
  4053f8:	b538      	push	{r3, r4, r5, lr}
  4053fa:	4b30      	ldr	r3, [pc, #192]	; (4054bc <__swsetup_r+0xc4>)
  4053fc:	681b      	ldr	r3, [r3, #0]
  4053fe:	4605      	mov	r5, r0
  405400:	460c      	mov	r4, r1
  405402:	b113      	cbz	r3, 40540a <__swsetup_r+0x12>
  405404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405406:	2a00      	cmp	r2, #0
  405408:	d038      	beq.n	40547c <__swsetup_r+0x84>
  40540a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40540e:	b293      	uxth	r3, r2
  405410:	0718      	lsls	r0, r3, #28
  405412:	d50c      	bpl.n	40542e <__swsetup_r+0x36>
  405414:	6920      	ldr	r0, [r4, #16]
  405416:	b1a8      	cbz	r0, 405444 <__swsetup_r+0x4c>
  405418:	f013 0201 	ands.w	r2, r3, #1
  40541c:	d01e      	beq.n	40545c <__swsetup_r+0x64>
  40541e:	6963      	ldr	r3, [r4, #20]
  405420:	2200      	movs	r2, #0
  405422:	425b      	negs	r3, r3
  405424:	61a3      	str	r3, [r4, #24]
  405426:	60a2      	str	r2, [r4, #8]
  405428:	b1f0      	cbz	r0, 405468 <__swsetup_r+0x70>
  40542a:	2000      	movs	r0, #0
  40542c:	bd38      	pop	{r3, r4, r5, pc}
  40542e:	06d9      	lsls	r1, r3, #27
  405430:	d53c      	bpl.n	4054ac <__swsetup_r+0xb4>
  405432:	0758      	lsls	r0, r3, #29
  405434:	d426      	bmi.n	405484 <__swsetup_r+0x8c>
  405436:	6920      	ldr	r0, [r4, #16]
  405438:	f042 0308 	orr.w	r3, r2, #8
  40543c:	81a3      	strh	r3, [r4, #12]
  40543e:	b29b      	uxth	r3, r3
  405440:	2800      	cmp	r0, #0
  405442:	d1e9      	bne.n	405418 <__swsetup_r+0x20>
  405444:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405448:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40544c:	d0e4      	beq.n	405418 <__swsetup_r+0x20>
  40544e:	4628      	mov	r0, r5
  405450:	4621      	mov	r1, r4
  405452:	f001 fc69 	bl	406d28 <__smakebuf_r>
  405456:	89a3      	ldrh	r3, [r4, #12]
  405458:	6920      	ldr	r0, [r4, #16]
  40545a:	e7dd      	b.n	405418 <__swsetup_r+0x20>
  40545c:	0799      	lsls	r1, r3, #30
  40545e:	bf58      	it	pl
  405460:	6962      	ldrpl	r2, [r4, #20]
  405462:	60a2      	str	r2, [r4, #8]
  405464:	2800      	cmp	r0, #0
  405466:	d1e0      	bne.n	40542a <__swsetup_r+0x32>
  405468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40546c:	061a      	lsls	r2, r3, #24
  40546e:	d5dd      	bpl.n	40542c <__swsetup_r+0x34>
  405470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405474:	81a3      	strh	r3, [r4, #12]
  405476:	f04f 30ff 	mov.w	r0, #4294967295
  40547a:	bd38      	pop	{r3, r4, r5, pc}
  40547c:	4618      	mov	r0, r3
  40547e:	f001 f8e5 	bl	40664c <__sinit>
  405482:	e7c2      	b.n	40540a <__swsetup_r+0x12>
  405484:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405486:	b151      	cbz	r1, 40549e <__swsetup_r+0xa6>
  405488:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40548c:	4299      	cmp	r1, r3
  40548e:	d004      	beq.n	40549a <__swsetup_r+0xa2>
  405490:	4628      	mov	r0, r5
  405492:	f001 f97d 	bl	406790 <_free_r>
  405496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40549a:	2300      	movs	r3, #0
  40549c:	6323      	str	r3, [r4, #48]	; 0x30
  40549e:	2300      	movs	r3, #0
  4054a0:	6920      	ldr	r0, [r4, #16]
  4054a2:	6063      	str	r3, [r4, #4]
  4054a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4054a8:	6020      	str	r0, [r4, #0]
  4054aa:	e7c5      	b.n	405438 <__swsetup_r+0x40>
  4054ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4054b0:	2309      	movs	r3, #9
  4054b2:	602b      	str	r3, [r5, #0]
  4054b4:	f04f 30ff 	mov.w	r0, #4294967295
  4054b8:	81a2      	strh	r2, [r4, #12]
  4054ba:	bd38      	pop	{r3, r4, r5, pc}
  4054bc:	2040000c 	.word	0x2040000c

004054c0 <register_fini>:
  4054c0:	4b02      	ldr	r3, [pc, #8]	; (4054cc <register_fini+0xc>)
  4054c2:	b113      	cbz	r3, 4054ca <register_fini+0xa>
  4054c4:	4802      	ldr	r0, [pc, #8]	; (4054d0 <register_fini+0x10>)
  4054c6:	f000 b805 	b.w	4054d4 <atexit>
  4054ca:	4770      	bx	lr
  4054cc:	00000000 	.word	0x00000000
  4054d0:	004066bd 	.word	0x004066bd

004054d4 <atexit>:
  4054d4:	2300      	movs	r3, #0
  4054d6:	4601      	mov	r1, r0
  4054d8:	461a      	mov	r2, r3
  4054da:	4618      	mov	r0, r3
  4054dc:	f002 ba68 	b.w	4079b0 <__register_exitproc>

004054e0 <quorem>:
  4054e0:	6902      	ldr	r2, [r0, #16]
  4054e2:	690b      	ldr	r3, [r1, #16]
  4054e4:	4293      	cmp	r3, r2
  4054e6:	f300 808d 	bgt.w	405604 <quorem+0x124>
  4054ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054ee:	f103 38ff 	add.w	r8, r3, #4294967295
  4054f2:	f101 0714 	add.w	r7, r1, #20
  4054f6:	f100 0b14 	add.w	fp, r0, #20
  4054fa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4054fe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405502:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405506:	b083      	sub	sp, #12
  405508:	3201      	adds	r2, #1
  40550a:	fbb3 f9f2 	udiv	r9, r3, r2
  40550e:	eb0b 0304 	add.w	r3, fp, r4
  405512:	9400      	str	r4, [sp, #0]
  405514:	eb07 0a04 	add.w	sl, r7, r4
  405518:	9301      	str	r3, [sp, #4]
  40551a:	f1b9 0f00 	cmp.w	r9, #0
  40551e:	d039      	beq.n	405594 <quorem+0xb4>
  405520:	2500      	movs	r5, #0
  405522:	462e      	mov	r6, r5
  405524:	46bc      	mov	ip, r7
  405526:	46de      	mov	lr, fp
  405528:	f85c 4b04 	ldr.w	r4, [ip], #4
  40552c:	f8de 3000 	ldr.w	r3, [lr]
  405530:	b2a2      	uxth	r2, r4
  405532:	fb09 5502 	mla	r5, r9, r2, r5
  405536:	0c22      	lsrs	r2, r4, #16
  405538:	0c2c      	lsrs	r4, r5, #16
  40553a:	fb09 4202 	mla	r2, r9, r2, r4
  40553e:	b2ad      	uxth	r5, r5
  405540:	1b75      	subs	r5, r6, r5
  405542:	b296      	uxth	r6, r2
  405544:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405548:	fa15 f383 	uxtah	r3, r5, r3
  40554c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405550:	b29b      	uxth	r3, r3
  405552:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405556:	45e2      	cmp	sl, ip
  405558:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40555c:	f84e 3b04 	str.w	r3, [lr], #4
  405560:	ea4f 4626 	mov.w	r6, r6, asr #16
  405564:	d2e0      	bcs.n	405528 <quorem+0x48>
  405566:	9b00      	ldr	r3, [sp, #0]
  405568:	f85b 3003 	ldr.w	r3, [fp, r3]
  40556c:	b993      	cbnz	r3, 405594 <quorem+0xb4>
  40556e:	9c01      	ldr	r4, [sp, #4]
  405570:	1f23      	subs	r3, r4, #4
  405572:	459b      	cmp	fp, r3
  405574:	d20c      	bcs.n	405590 <quorem+0xb0>
  405576:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40557a:	b94b      	cbnz	r3, 405590 <quorem+0xb0>
  40557c:	f1a4 0308 	sub.w	r3, r4, #8
  405580:	e002      	b.n	405588 <quorem+0xa8>
  405582:	681a      	ldr	r2, [r3, #0]
  405584:	3b04      	subs	r3, #4
  405586:	b91a      	cbnz	r2, 405590 <quorem+0xb0>
  405588:	459b      	cmp	fp, r3
  40558a:	f108 38ff 	add.w	r8, r8, #4294967295
  40558e:	d3f8      	bcc.n	405582 <quorem+0xa2>
  405590:	f8c0 8010 	str.w	r8, [r0, #16]
  405594:	4604      	mov	r4, r0
  405596:	f001 fec5 	bl	407324 <__mcmp>
  40559a:	2800      	cmp	r0, #0
  40559c:	db2e      	blt.n	4055fc <quorem+0x11c>
  40559e:	f109 0901 	add.w	r9, r9, #1
  4055a2:	465d      	mov	r5, fp
  4055a4:	2300      	movs	r3, #0
  4055a6:	f857 1b04 	ldr.w	r1, [r7], #4
  4055aa:	6828      	ldr	r0, [r5, #0]
  4055ac:	b28a      	uxth	r2, r1
  4055ae:	1a9a      	subs	r2, r3, r2
  4055b0:	0c0b      	lsrs	r3, r1, #16
  4055b2:	fa12 f280 	uxtah	r2, r2, r0
  4055b6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4055ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4055be:	b292      	uxth	r2, r2
  4055c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4055c4:	45ba      	cmp	sl, r7
  4055c6:	f845 2b04 	str.w	r2, [r5], #4
  4055ca:	ea4f 4323 	mov.w	r3, r3, asr #16
  4055ce:	d2ea      	bcs.n	4055a6 <quorem+0xc6>
  4055d0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4055d4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4055d8:	b982      	cbnz	r2, 4055fc <quorem+0x11c>
  4055da:	1f1a      	subs	r2, r3, #4
  4055dc:	4593      	cmp	fp, r2
  4055de:	d20b      	bcs.n	4055f8 <quorem+0x118>
  4055e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4055e4:	b942      	cbnz	r2, 4055f8 <quorem+0x118>
  4055e6:	3b08      	subs	r3, #8
  4055e8:	e002      	b.n	4055f0 <quorem+0x110>
  4055ea:	681a      	ldr	r2, [r3, #0]
  4055ec:	3b04      	subs	r3, #4
  4055ee:	b91a      	cbnz	r2, 4055f8 <quorem+0x118>
  4055f0:	459b      	cmp	fp, r3
  4055f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4055f6:	d3f8      	bcc.n	4055ea <quorem+0x10a>
  4055f8:	f8c4 8010 	str.w	r8, [r4, #16]
  4055fc:	4648      	mov	r0, r9
  4055fe:	b003      	add	sp, #12
  405600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405604:	2000      	movs	r0, #0
  405606:	4770      	bx	lr

00405608 <_dtoa_r>:
  405608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40560c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40560e:	b09b      	sub	sp, #108	; 0x6c
  405610:	4604      	mov	r4, r0
  405612:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405614:	4692      	mov	sl, r2
  405616:	469b      	mov	fp, r3
  405618:	b141      	cbz	r1, 40562c <_dtoa_r+0x24>
  40561a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40561c:	604a      	str	r2, [r1, #4]
  40561e:	2301      	movs	r3, #1
  405620:	4093      	lsls	r3, r2
  405622:	608b      	str	r3, [r1, #8]
  405624:	f001 fca6 	bl	406f74 <_Bfree>
  405628:	2300      	movs	r3, #0
  40562a:	6423      	str	r3, [r4, #64]	; 0x40
  40562c:	f1bb 0f00 	cmp.w	fp, #0
  405630:	465d      	mov	r5, fp
  405632:	db35      	blt.n	4056a0 <_dtoa_r+0x98>
  405634:	2300      	movs	r3, #0
  405636:	6033      	str	r3, [r6, #0]
  405638:	4b9d      	ldr	r3, [pc, #628]	; (4058b0 <_dtoa_r+0x2a8>)
  40563a:	43ab      	bics	r3, r5
  40563c:	d015      	beq.n	40566a <_dtoa_r+0x62>
  40563e:	4650      	mov	r0, sl
  405640:	4659      	mov	r1, fp
  405642:	2200      	movs	r2, #0
  405644:	2300      	movs	r3, #0
  405646:	f002 feab 	bl	4083a0 <__aeabi_dcmpeq>
  40564a:	4680      	mov	r8, r0
  40564c:	2800      	cmp	r0, #0
  40564e:	d02d      	beq.n	4056ac <_dtoa_r+0xa4>
  405650:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405652:	2301      	movs	r3, #1
  405654:	6013      	str	r3, [r2, #0]
  405656:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405658:	2b00      	cmp	r3, #0
  40565a:	f000 80bd 	beq.w	4057d8 <_dtoa_r+0x1d0>
  40565e:	4895      	ldr	r0, [pc, #596]	; (4058b4 <_dtoa_r+0x2ac>)
  405660:	6018      	str	r0, [r3, #0]
  405662:	3801      	subs	r0, #1
  405664:	b01b      	add	sp, #108	; 0x6c
  405666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40566a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40566c:	f242 730f 	movw	r3, #9999	; 0x270f
  405670:	6013      	str	r3, [r2, #0]
  405672:	f1ba 0f00 	cmp.w	sl, #0
  405676:	d10d      	bne.n	405694 <_dtoa_r+0x8c>
  405678:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40567c:	b955      	cbnz	r5, 405694 <_dtoa_r+0x8c>
  40567e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405680:	488d      	ldr	r0, [pc, #564]	; (4058b8 <_dtoa_r+0x2b0>)
  405682:	2b00      	cmp	r3, #0
  405684:	d0ee      	beq.n	405664 <_dtoa_r+0x5c>
  405686:	f100 0308 	add.w	r3, r0, #8
  40568a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40568c:	6013      	str	r3, [r2, #0]
  40568e:	b01b      	add	sp, #108	; 0x6c
  405690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405694:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405696:	4889      	ldr	r0, [pc, #548]	; (4058bc <_dtoa_r+0x2b4>)
  405698:	2b00      	cmp	r3, #0
  40569a:	d0e3      	beq.n	405664 <_dtoa_r+0x5c>
  40569c:	1cc3      	adds	r3, r0, #3
  40569e:	e7f4      	b.n	40568a <_dtoa_r+0x82>
  4056a0:	2301      	movs	r3, #1
  4056a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4056a6:	6033      	str	r3, [r6, #0]
  4056a8:	46ab      	mov	fp, r5
  4056aa:	e7c5      	b.n	405638 <_dtoa_r+0x30>
  4056ac:	aa18      	add	r2, sp, #96	; 0x60
  4056ae:	ab19      	add	r3, sp, #100	; 0x64
  4056b0:	9201      	str	r2, [sp, #4]
  4056b2:	9300      	str	r3, [sp, #0]
  4056b4:	4652      	mov	r2, sl
  4056b6:	465b      	mov	r3, fp
  4056b8:	4620      	mov	r0, r4
  4056ba:	f001 fed3 	bl	407464 <__d2b>
  4056be:	0d2b      	lsrs	r3, r5, #20
  4056c0:	4681      	mov	r9, r0
  4056c2:	d071      	beq.n	4057a8 <_dtoa_r+0x1a0>
  4056c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4056c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4056cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4056ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4056d2:	4650      	mov	r0, sl
  4056d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4056d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4056dc:	2200      	movs	r2, #0
  4056de:	4b78      	ldr	r3, [pc, #480]	; (4058c0 <_dtoa_r+0x2b8>)
  4056e0:	f7fd fc46 	bl	402f70 <__aeabi_dsub>
  4056e4:	a36c      	add	r3, pc, #432	; (adr r3, 405898 <_dtoa_r+0x290>)
  4056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056ea:	f002 fbf1 	bl	407ed0 <__aeabi_dmul>
  4056ee:	a36c      	add	r3, pc, #432	; (adr r3, 4058a0 <_dtoa_r+0x298>)
  4056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056f4:	f7fd fc3e 	bl	402f74 <__adddf3>
  4056f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4056fc:	4630      	mov	r0, r6
  4056fe:	f7fd fd85 	bl	40320c <__aeabi_i2d>
  405702:	a369      	add	r3, pc, #420	; (adr r3, 4058a8 <_dtoa_r+0x2a0>)
  405704:	e9d3 2300 	ldrd	r2, r3, [r3]
  405708:	f002 fbe2 	bl	407ed0 <__aeabi_dmul>
  40570c:	4602      	mov	r2, r0
  40570e:	460b      	mov	r3, r1
  405710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405714:	f7fd fc2e 	bl	402f74 <__adddf3>
  405718:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40571c:	f002 fe88 	bl	408430 <__aeabi_d2iz>
  405720:	2200      	movs	r2, #0
  405722:	9002      	str	r0, [sp, #8]
  405724:	2300      	movs	r3, #0
  405726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40572a:	f002 fe43 	bl	4083b4 <__aeabi_dcmplt>
  40572e:	2800      	cmp	r0, #0
  405730:	f040 8173 	bne.w	405a1a <_dtoa_r+0x412>
  405734:	9d02      	ldr	r5, [sp, #8]
  405736:	2d16      	cmp	r5, #22
  405738:	f200 815d 	bhi.w	4059f6 <_dtoa_r+0x3ee>
  40573c:	4b61      	ldr	r3, [pc, #388]	; (4058c4 <_dtoa_r+0x2bc>)
  40573e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405742:	e9d3 0100 	ldrd	r0, r1, [r3]
  405746:	4652      	mov	r2, sl
  405748:	465b      	mov	r3, fp
  40574a:	f002 fe51 	bl	4083f0 <__aeabi_dcmpgt>
  40574e:	2800      	cmp	r0, #0
  405750:	f000 81c5 	beq.w	405ade <_dtoa_r+0x4d6>
  405754:	1e6b      	subs	r3, r5, #1
  405756:	9302      	str	r3, [sp, #8]
  405758:	2300      	movs	r3, #0
  40575a:	930e      	str	r3, [sp, #56]	; 0x38
  40575c:	1bbf      	subs	r7, r7, r6
  40575e:	1e7b      	subs	r3, r7, #1
  405760:	9306      	str	r3, [sp, #24]
  405762:	f100 8154 	bmi.w	405a0e <_dtoa_r+0x406>
  405766:	2300      	movs	r3, #0
  405768:	9308      	str	r3, [sp, #32]
  40576a:	9b02      	ldr	r3, [sp, #8]
  40576c:	2b00      	cmp	r3, #0
  40576e:	f2c0 8145 	blt.w	4059fc <_dtoa_r+0x3f4>
  405772:	9a06      	ldr	r2, [sp, #24]
  405774:	930d      	str	r3, [sp, #52]	; 0x34
  405776:	4611      	mov	r1, r2
  405778:	4419      	add	r1, r3
  40577a:	2300      	movs	r3, #0
  40577c:	9106      	str	r1, [sp, #24]
  40577e:	930c      	str	r3, [sp, #48]	; 0x30
  405780:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405782:	2b09      	cmp	r3, #9
  405784:	d82a      	bhi.n	4057dc <_dtoa_r+0x1d4>
  405786:	2b05      	cmp	r3, #5
  405788:	f340 865b 	ble.w	406442 <_dtoa_r+0xe3a>
  40578c:	3b04      	subs	r3, #4
  40578e:	9324      	str	r3, [sp, #144]	; 0x90
  405790:	2500      	movs	r5, #0
  405792:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405794:	3b02      	subs	r3, #2
  405796:	2b03      	cmp	r3, #3
  405798:	f200 8642 	bhi.w	406420 <_dtoa_r+0xe18>
  40579c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4057a0:	02c903d4 	.word	0x02c903d4
  4057a4:	046103df 	.word	0x046103df
  4057a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4057aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4057ac:	443e      	add	r6, r7
  4057ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4057b2:	2b20      	cmp	r3, #32
  4057b4:	f340 818e 	ble.w	405ad4 <_dtoa_r+0x4cc>
  4057b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4057bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4057c0:	409d      	lsls	r5, r3
  4057c2:	fa2a f000 	lsr.w	r0, sl, r0
  4057c6:	4328      	orrs	r0, r5
  4057c8:	f7fd fd10 	bl	4031ec <__aeabi_ui2d>
  4057cc:	2301      	movs	r3, #1
  4057ce:	3e01      	subs	r6, #1
  4057d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4057d4:	9314      	str	r3, [sp, #80]	; 0x50
  4057d6:	e781      	b.n	4056dc <_dtoa_r+0xd4>
  4057d8:	483b      	ldr	r0, [pc, #236]	; (4058c8 <_dtoa_r+0x2c0>)
  4057da:	e743      	b.n	405664 <_dtoa_r+0x5c>
  4057dc:	2100      	movs	r1, #0
  4057de:	6461      	str	r1, [r4, #68]	; 0x44
  4057e0:	4620      	mov	r0, r4
  4057e2:	9125      	str	r1, [sp, #148]	; 0x94
  4057e4:	f001 fba0 	bl	406f28 <_Balloc>
  4057e8:	f04f 33ff 	mov.w	r3, #4294967295
  4057ec:	930a      	str	r3, [sp, #40]	; 0x28
  4057ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4057f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4057f2:	2301      	movs	r3, #1
  4057f4:	9004      	str	r0, [sp, #16]
  4057f6:	6420      	str	r0, [r4, #64]	; 0x40
  4057f8:	9224      	str	r2, [sp, #144]	; 0x90
  4057fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4057fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4057fe:	2b00      	cmp	r3, #0
  405800:	f2c0 80d9 	blt.w	4059b6 <_dtoa_r+0x3ae>
  405804:	9a02      	ldr	r2, [sp, #8]
  405806:	2a0e      	cmp	r2, #14
  405808:	f300 80d5 	bgt.w	4059b6 <_dtoa_r+0x3ae>
  40580c:	4b2d      	ldr	r3, [pc, #180]	; (4058c4 <_dtoa_r+0x2bc>)
  40580e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405812:	e9d3 2300 	ldrd	r2, r3, [r3]
  405816:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40581a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40581c:	2b00      	cmp	r3, #0
  40581e:	f2c0 83ba 	blt.w	405f96 <_dtoa_r+0x98e>
  405822:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405826:	4650      	mov	r0, sl
  405828:	462a      	mov	r2, r5
  40582a:	4633      	mov	r3, r6
  40582c:	4659      	mov	r1, fp
  40582e:	f002 fc79 	bl	408124 <__aeabi_ddiv>
  405832:	f002 fdfd 	bl	408430 <__aeabi_d2iz>
  405836:	4680      	mov	r8, r0
  405838:	f7fd fce8 	bl	40320c <__aeabi_i2d>
  40583c:	462a      	mov	r2, r5
  40583e:	4633      	mov	r3, r6
  405840:	f002 fb46 	bl	407ed0 <__aeabi_dmul>
  405844:	460b      	mov	r3, r1
  405846:	4602      	mov	r2, r0
  405848:	4659      	mov	r1, fp
  40584a:	4650      	mov	r0, sl
  40584c:	f7fd fb90 	bl	402f70 <__aeabi_dsub>
  405850:	9d04      	ldr	r5, [sp, #16]
  405852:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405856:	702b      	strb	r3, [r5, #0]
  405858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40585a:	2b01      	cmp	r3, #1
  40585c:	4606      	mov	r6, r0
  40585e:	460f      	mov	r7, r1
  405860:	f105 0501 	add.w	r5, r5, #1
  405864:	d068      	beq.n	405938 <_dtoa_r+0x330>
  405866:	2200      	movs	r2, #0
  405868:	4b18      	ldr	r3, [pc, #96]	; (4058cc <_dtoa_r+0x2c4>)
  40586a:	f002 fb31 	bl	407ed0 <__aeabi_dmul>
  40586e:	2200      	movs	r2, #0
  405870:	2300      	movs	r3, #0
  405872:	4606      	mov	r6, r0
  405874:	460f      	mov	r7, r1
  405876:	f002 fd93 	bl	4083a0 <__aeabi_dcmpeq>
  40587a:	2800      	cmp	r0, #0
  40587c:	f040 8088 	bne.w	405990 <_dtoa_r+0x388>
  405880:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405884:	f04f 0a00 	mov.w	sl, #0
  405888:	f8df b040 	ldr.w	fp, [pc, #64]	; 4058cc <_dtoa_r+0x2c4>
  40588c:	940c      	str	r4, [sp, #48]	; 0x30
  40588e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405892:	e028      	b.n	4058e6 <_dtoa_r+0x2de>
  405894:	f3af 8000 	nop.w
  405898:	636f4361 	.word	0x636f4361
  40589c:	3fd287a7 	.word	0x3fd287a7
  4058a0:	8b60c8b3 	.word	0x8b60c8b3
  4058a4:	3fc68a28 	.word	0x3fc68a28
  4058a8:	509f79fb 	.word	0x509f79fb
  4058ac:	3fd34413 	.word	0x3fd34413
  4058b0:	7ff00000 	.word	0x7ff00000
  4058b4:	004089b1 	.word	0x004089b1
  4058b8:	004089d4 	.word	0x004089d4
  4058bc:	004089e0 	.word	0x004089e0
  4058c0:	3ff80000 	.word	0x3ff80000
  4058c4:	00408a10 	.word	0x00408a10
  4058c8:	004089b0 	.word	0x004089b0
  4058cc:	40240000 	.word	0x40240000
  4058d0:	f002 fafe 	bl	407ed0 <__aeabi_dmul>
  4058d4:	2200      	movs	r2, #0
  4058d6:	2300      	movs	r3, #0
  4058d8:	4606      	mov	r6, r0
  4058da:	460f      	mov	r7, r1
  4058dc:	f002 fd60 	bl	4083a0 <__aeabi_dcmpeq>
  4058e0:	2800      	cmp	r0, #0
  4058e2:	f040 83c1 	bne.w	406068 <_dtoa_r+0xa60>
  4058e6:	4642      	mov	r2, r8
  4058e8:	464b      	mov	r3, r9
  4058ea:	4630      	mov	r0, r6
  4058ec:	4639      	mov	r1, r7
  4058ee:	f002 fc19 	bl	408124 <__aeabi_ddiv>
  4058f2:	f002 fd9d 	bl	408430 <__aeabi_d2iz>
  4058f6:	4604      	mov	r4, r0
  4058f8:	f7fd fc88 	bl	40320c <__aeabi_i2d>
  4058fc:	4642      	mov	r2, r8
  4058fe:	464b      	mov	r3, r9
  405900:	f002 fae6 	bl	407ed0 <__aeabi_dmul>
  405904:	4602      	mov	r2, r0
  405906:	460b      	mov	r3, r1
  405908:	4630      	mov	r0, r6
  40590a:	4639      	mov	r1, r7
  40590c:	f7fd fb30 	bl	402f70 <__aeabi_dsub>
  405910:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405914:	9e04      	ldr	r6, [sp, #16]
  405916:	f805 eb01 	strb.w	lr, [r5], #1
  40591a:	eba5 0e06 	sub.w	lr, r5, r6
  40591e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405920:	45b6      	cmp	lr, r6
  405922:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405926:	4652      	mov	r2, sl
  405928:	465b      	mov	r3, fp
  40592a:	d1d1      	bne.n	4058d0 <_dtoa_r+0x2c8>
  40592c:	46a0      	mov	r8, r4
  40592e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405932:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405934:	4606      	mov	r6, r0
  405936:	460f      	mov	r7, r1
  405938:	4632      	mov	r2, r6
  40593a:	463b      	mov	r3, r7
  40593c:	4630      	mov	r0, r6
  40593e:	4639      	mov	r1, r7
  405940:	f7fd fb18 	bl	402f74 <__adddf3>
  405944:	4606      	mov	r6, r0
  405946:	460f      	mov	r7, r1
  405948:	4602      	mov	r2, r0
  40594a:	460b      	mov	r3, r1
  40594c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405950:	f002 fd30 	bl	4083b4 <__aeabi_dcmplt>
  405954:	b948      	cbnz	r0, 40596a <_dtoa_r+0x362>
  405956:	4632      	mov	r2, r6
  405958:	463b      	mov	r3, r7
  40595a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40595e:	f002 fd1f 	bl	4083a0 <__aeabi_dcmpeq>
  405962:	b1a8      	cbz	r0, 405990 <_dtoa_r+0x388>
  405964:	f018 0f01 	tst.w	r8, #1
  405968:	d012      	beq.n	405990 <_dtoa_r+0x388>
  40596a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40596e:	9a04      	ldr	r2, [sp, #16]
  405970:	1e6b      	subs	r3, r5, #1
  405972:	e004      	b.n	40597e <_dtoa_r+0x376>
  405974:	429a      	cmp	r2, r3
  405976:	f000 8401 	beq.w	40617c <_dtoa_r+0xb74>
  40597a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40597e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405982:	f103 0501 	add.w	r5, r3, #1
  405986:	d0f5      	beq.n	405974 <_dtoa_r+0x36c>
  405988:	f108 0801 	add.w	r8, r8, #1
  40598c:	f883 8000 	strb.w	r8, [r3]
  405990:	4649      	mov	r1, r9
  405992:	4620      	mov	r0, r4
  405994:	f001 faee 	bl	406f74 <_Bfree>
  405998:	2200      	movs	r2, #0
  40599a:	9b02      	ldr	r3, [sp, #8]
  40599c:	702a      	strb	r2, [r5, #0]
  40599e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4059a0:	3301      	adds	r3, #1
  4059a2:	6013      	str	r3, [r2, #0]
  4059a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4059a6:	2b00      	cmp	r3, #0
  4059a8:	f000 839e 	beq.w	4060e8 <_dtoa_r+0xae0>
  4059ac:	9804      	ldr	r0, [sp, #16]
  4059ae:	601d      	str	r5, [r3, #0]
  4059b0:	b01b      	add	sp, #108	; 0x6c
  4059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4059b8:	2a00      	cmp	r2, #0
  4059ba:	d03e      	beq.n	405a3a <_dtoa_r+0x432>
  4059bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4059be:	2a01      	cmp	r2, #1
  4059c0:	f340 8311 	ble.w	405fe6 <_dtoa_r+0x9de>
  4059c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4059c8:	1e5f      	subs	r7, r3, #1
  4059ca:	42ba      	cmp	r2, r7
  4059cc:	f2c0 838f 	blt.w	4060ee <_dtoa_r+0xae6>
  4059d0:	1bd7      	subs	r7, r2, r7
  4059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059d4:	2b00      	cmp	r3, #0
  4059d6:	f2c0 848b 	blt.w	4062f0 <_dtoa_r+0xce8>
  4059da:	9d08      	ldr	r5, [sp, #32]
  4059dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059de:	9a08      	ldr	r2, [sp, #32]
  4059e0:	441a      	add	r2, r3
  4059e2:	9208      	str	r2, [sp, #32]
  4059e4:	9a06      	ldr	r2, [sp, #24]
  4059e6:	2101      	movs	r1, #1
  4059e8:	441a      	add	r2, r3
  4059ea:	4620      	mov	r0, r4
  4059ec:	9206      	str	r2, [sp, #24]
  4059ee:	f001 fb5b 	bl	4070a8 <__i2b>
  4059f2:	4606      	mov	r6, r0
  4059f4:	e024      	b.n	405a40 <_dtoa_r+0x438>
  4059f6:	2301      	movs	r3, #1
  4059f8:	930e      	str	r3, [sp, #56]	; 0x38
  4059fa:	e6af      	b.n	40575c <_dtoa_r+0x154>
  4059fc:	9a08      	ldr	r2, [sp, #32]
  4059fe:	9b02      	ldr	r3, [sp, #8]
  405a00:	1ad2      	subs	r2, r2, r3
  405a02:	425b      	negs	r3, r3
  405a04:	930c      	str	r3, [sp, #48]	; 0x30
  405a06:	2300      	movs	r3, #0
  405a08:	9208      	str	r2, [sp, #32]
  405a0a:	930d      	str	r3, [sp, #52]	; 0x34
  405a0c:	e6b8      	b.n	405780 <_dtoa_r+0x178>
  405a0e:	f1c7 0301 	rsb	r3, r7, #1
  405a12:	9308      	str	r3, [sp, #32]
  405a14:	2300      	movs	r3, #0
  405a16:	9306      	str	r3, [sp, #24]
  405a18:	e6a7      	b.n	40576a <_dtoa_r+0x162>
  405a1a:	9d02      	ldr	r5, [sp, #8]
  405a1c:	4628      	mov	r0, r5
  405a1e:	f7fd fbf5 	bl	40320c <__aeabi_i2d>
  405a22:	4602      	mov	r2, r0
  405a24:	460b      	mov	r3, r1
  405a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405a2a:	f002 fcb9 	bl	4083a0 <__aeabi_dcmpeq>
  405a2e:	2800      	cmp	r0, #0
  405a30:	f47f ae80 	bne.w	405734 <_dtoa_r+0x12c>
  405a34:	1e6b      	subs	r3, r5, #1
  405a36:	9302      	str	r3, [sp, #8]
  405a38:	e67c      	b.n	405734 <_dtoa_r+0x12c>
  405a3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405a3c:	9d08      	ldr	r5, [sp, #32]
  405a3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405a40:	2d00      	cmp	r5, #0
  405a42:	dd0c      	ble.n	405a5e <_dtoa_r+0x456>
  405a44:	9906      	ldr	r1, [sp, #24]
  405a46:	2900      	cmp	r1, #0
  405a48:	460b      	mov	r3, r1
  405a4a:	dd08      	ble.n	405a5e <_dtoa_r+0x456>
  405a4c:	42a9      	cmp	r1, r5
  405a4e:	9a08      	ldr	r2, [sp, #32]
  405a50:	bfa8      	it	ge
  405a52:	462b      	movge	r3, r5
  405a54:	1ad2      	subs	r2, r2, r3
  405a56:	1aed      	subs	r5, r5, r3
  405a58:	1acb      	subs	r3, r1, r3
  405a5a:	9208      	str	r2, [sp, #32]
  405a5c:	9306      	str	r3, [sp, #24]
  405a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a60:	b1d3      	cbz	r3, 405a98 <_dtoa_r+0x490>
  405a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405a64:	2b00      	cmp	r3, #0
  405a66:	f000 82b7 	beq.w	405fd8 <_dtoa_r+0x9d0>
  405a6a:	2f00      	cmp	r7, #0
  405a6c:	dd10      	ble.n	405a90 <_dtoa_r+0x488>
  405a6e:	4631      	mov	r1, r6
  405a70:	463a      	mov	r2, r7
  405a72:	4620      	mov	r0, r4
  405a74:	f001 fbb4 	bl	4071e0 <__pow5mult>
  405a78:	464a      	mov	r2, r9
  405a7a:	4601      	mov	r1, r0
  405a7c:	4606      	mov	r6, r0
  405a7e:	4620      	mov	r0, r4
  405a80:	f001 fb1c 	bl	4070bc <__multiply>
  405a84:	4649      	mov	r1, r9
  405a86:	4680      	mov	r8, r0
  405a88:	4620      	mov	r0, r4
  405a8a:	f001 fa73 	bl	406f74 <_Bfree>
  405a8e:	46c1      	mov	r9, r8
  405a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a92:	1bda      	subs	r2, r3, r7
  405a94:	f040 82a1 	bne.w	405fda <_dtoa_r+0x9d2>
  405a98:	2101      	movs	r1, #1
  405a9a:	4620      	mov	r0, r4
  405a9c:	f001 fb04 	bl	4070a8 <__i2b>
  405aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405aa2:	2b00      	cmp	r3, #0
  405aa4:	4680      	mov	r8, r0
  405aa6:	dd1c      	ble.n	405ae2 <_dtoa_r+0x4da>
  405aa8:	4601      	mov	r1, r0
  405aaa:	461a      	mov	r2, r3
  405aac:	4620      	mov	r0, r4
  405aae:	f001 fb97 	bl	4071e0 <__pow5mult>
  405ab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ab4:	2b01      	cmp	r3, #1
  405ab6:	4680      	mov	r8, r0
  405ab8:	f340 8254 	ble.w	405f64 <_dtoa_r+0x95c>
  405abc:	2300      	movs	r3, #0
  405abe:	930c      	str	r3, [sp, #48]	; 0x30
  405ac0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405ac4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405ac8:	6918      	ldr	r0, [r3, #16]
  405aca:	f001 fa9d 	bl	407008 <__hi0bits>
  405ace:	f1c0 0020 	rsb	r0, r0, #32
  405ad2:	e010      	b.n	405af6 <_dtoa_r+0x4ee>
  405ad4:	f1c3 0520 	rsb	r5, r3, #32
  405ad8:	fa0a f005 	lsl.w	r0, sl, r5
  405adc:	e674      	b.n	4057c8 <_dtoa_r+0x1c0>
  405ade:	900e      	str	r0, [sp, #56]	; 0x38
  405ae0:	e63c      	b.n	40575c <_dtoa_r+0x154>
  405ae2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ae4:	2b01      	cmp	r3, #1
  405ae6:	f340 8287 	ble.w	405ff8 <_dtoa_r+0x9f0>
  405aea:	2300      	movs	r3, #0
  405aec:	930c      	str	r3, [sp, #48]	; 0x30
  405aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405af0:	2001      	movs	r0, #1
  405af2:	2b00      	cmp	r3, #0
  405af4:	d1e4      	bne.n	405ac0 <_dtoa_r+0x4b8>
  405af6:	9a06      	ldr	r2, [sp, #24]
  405af8:	4410      	add	r0, r2
  405afa:	f010 001f 	ands.w	r0, r0, #31
  405afe:	f000 80a1 	beq.w	405c44 <_dtoa_r+0x63c>
  405b02:	f1c0 0320 	rsb	r3, r0, #32
  405b06:	2b04      	cmp	r3, #4
  405b08:	f340 849e 	ble.w	406448 <_dtoa_r+0xe40>
  405b0c:	9b08      	ldr	r3, [sp, #32]
  405b0e:	f1c0 001c 	rsb	r0, r0, #28
  405b12:	4403      	add	r3, r0
  405b14:	9308      	str	r3, [sp, #32]
  405b16:	4613      	mov	r3, r2
  405b18:	4403      	add	r3, r0
  405b1a:	4405      	add	r5, r0
  405b1c:	9306      	str	r3, [sp, #24]
  405b1e:	9b08      	ldr	r3, [sp, #32]
  405b20:	2b00      	cmp	r3, #0
  405b22:	dd05      	ble.n	405b30 <_dtoa_r+0x528>
  405b24:	4649      	mov	r1, r9
  405b26:	461a      	mov	r2, r3
  405b28:	4620      	mov	r0, r4
  405b2a:	f001 fba9 	bl	407280 <__lshift>
  405b2e:	4681      	mov	r9, r0
  405b30:	9b06      	ldr	r3, [sp, #24]
  405b32:	2b00      	cmp	r3, #0
  405b34:	dd05      	ble.n	405b42 <_dtoa_r+0x53a>
  405b36:	4641      	mov	r1, r8
  405b38:	461a      	mov	r2, r3
  405b3a:	4620      	mov	r0, r4
  405b3c:	f001 fba0 	bl	407280 <__lshift>
  405b40:	4680      	mov	r8, r0
  405b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b44:	2b00      	cmp	r3, #0
  405b46:	f040 8086 	bne.w	405c56 <_dtoa_r+0x64e>
  405b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b4c:	2b00      	cmp	r3, #0
  405b4e:	f340 8266 	ble.w	40601e <_dtoa_r+0xa16>
  405b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405b54:	2b00      	cmp	r3, #0
  405b56:	f000 8098 	beq.w	405c8a <_dtoa_r+0x682>
  405b5a:	2d00      	cmp	r5, #0
  405b5c:	dd05      	ble.n	405b6a <_dtoa_r+0x562>
  405b5e:	4631      	mov	r1, r6
  405b60:	462a      	mov	r2, r5
  405b62:	4620      	mov	r0, r4
  405b64:	f001 fb8c 	bl	407280 <__lshift>
  405b68:	4606      	mov	r6, r0
  405b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405b6c:	2b00      	cmp	r3, #0
  405b6e:	f040 8337 	bne.w	4061e0 <_dtoa_r+0xbd8>
  405b72:	9606      	str	r6, [sp, #24]
  405b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b76:	9a04      	ldr	r2, [sp, #16]
  405b78:	f8dd b018 	ldr.w	fp, [sp, #24]
  405b7c:	3b01      	subs	r3, #1
  405b7e:	18d3      	adds	r3, r2, r3
  405b80:	930b      	str	r3, [sp, #44]	; 0x2c
  405b82:	f00a 0301 	and.w	r3, sl, #1
  405b86:	930c      	str	r3, [sp, #48]	; 0x30
  405b88:	4617      	mov	r7, r2
  405b8a:	46c2      	mov	sl, r8
  405b8c:	4651      	mov	r1, sl
  405b8e:	4648      	mov	r0, r9
  405b90:	f7ff fca6 	bl	4054e0 <quorem>
  405b94:	4631      	mov	r1, r6
  405b96:	4605      	mov	r5, r0
  405b98:	4648      	mov	r0, r9
  405b9a:	f001 fbc3 	bl	407324 <__mcmp>
  405b9e:	465a      	mov	r2, fp
  405ba0:	900a      	str	r0, [sp, #40]	; 0x28
  405ba2:	4651      	mov	r1, sl
  405ba4:	4620      	mov	r0, r4
  405ba6:	f001 fbd9 	bl	40735c <__mdiff>
  405baa:	68c2      	ldr	r2, [r0, #12]
  405bac:	4680      	mov	r8, r0
  405bae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405bb2:	2a00      	cmp	r2, #0
  405bb4:	f040 822b 	bne.w	40600e <_dtoa_r+0xa06>
  405bb8:	4601      	mov	r1, r0
  405bba:	4648      	mov	r0, r9
  405bbc:	9308      	str	r3, [sp, #32]
  405bbe:	f001 fbb1 	bl	407324 <__mcmp>
  405bc2:	4641      	mov	r1, r8
  405bc4:	9006      	str	r0, [sp, #24]
  405bc6:	4620      	mov	r0, r4
  405bc8:	f001 f9d4 	bl	406f74 <_Bfree>
  405bcc:	9a06      	ldr	r2, [sp, #24]
  405bce:	9b08      	ldr	r3, [sp, #32]
  405bd0:	b932      	cbnz	r2, 405be0 <_dtoa_r+0x5d8>
  405bd2:	9924      	ldr	r1, [sp, #144]	; 0x90
  405bd4:	b921      	cbnz	r1, 405be0 <_dtoa_r+0x5d8>
  405bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405bd8:	2a00      	cmp	r2, #0
  405bda:	f000 83ef 	beq.w	4063bc <_dtoa_r+0xdb4>
  405bde:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405be0:	990a      	ldr	r1, [sp, #40]	; 0x28
  405be2:	2900      	cmp	r1, #0
  405be4:	f2c0 829f 	blt.w	406126 <_dtoa_r+0xb1e>
  405be8:	d105      	bne.n	405bf6 <_dtoa_r+0x5ee>
  405bea:	9924      	ldr	r1, [sp, #144]	; 0x90
  405bec:	b919      	cbnz	r1, 405bf6 <_dtoa_r+0x5ee>
  405bee:	990c      	ldr	r1, [sp, #48]	; 0x30
  405bf0:	2900      	cmp	r1, #0
  405bf2:	f000 8298 	beq.w	406126 <_dtoa_r+0xb1e>
  405bf6:	2a00      	cmp	r2, #0
  405bf8:	f300 8306 	bgt.w	406208 <_dtoa_r+0xc00>
  405bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405bfe:	703b      	strb	r3, [r7, #0]
  405c00:	f107 0801 	add.w	r8, r7, #1
  405c04:	4297      	cmp	r7, r2
  405c06:	4645      	mov	r5, r8
  405c08:	f000 830c 	beq.w	406224 <_dtoa_r+0xc1c>
  405c0c:	4649      	mov	r1, r9
  405c0e:	2300      	movs	r3, #0
  405c10:	220a      	movs	r2, #10
  405c12:	4620      	mov	r0, r4
  405c14:	f001 f9b8 	bl	406f88 <__multadd>
  405c18:	455e      	cmp	r6, fp
  405c1a:	4681      	mov	r9, r0
  405c1c:	4631      	mov	r1, r6
  405c1e:	f04f 0300 	mov.w	r3, #0
  405c22:	f04f 020a 	mov.w	r2, #10
  405c26:	4620      	mov	r0, r4
  405c28:	f000 81eb 	beq.w	406002 <_dtoa_r+0x9fa>
  405c2c:	f001 f9ac 	bl	406f88 <__multadd>
  405c30:	4659      	mov	r1, fp
  405c32:	4606      	mov	r6, r0
  405c34:	2300      	movs	r3, #0
  405c36:	220a      	movs	r2, #10
  405c38:	4620      	mov	r0, r4
  405c3a:	f001 f9a5 	bl	406f88 <__multadd>
  405c3e:	4647      	mov	r7, r8
  405c40:	4683      	mov	fp, r0
  405c42:	e7a3      	b.n	405b8c <_dtoa_r+0x584>
  405c44:	201c      	movs	r0, #28
  405c46:	9b08      	ldr	r3, [sp, #32]
  405c48:	4403      	add	r3, r0
  405c4a:	9308      	str	r3, [sp, #32]
  405c4c:	9b06      	ldr	r3, [sp, #24]
  405c4e:	4403      	add	r3, r0
  405c50:	4405      	add	r5, r0
  405c52:	9306      	str	r3, [sp, #24]
  405c54:	e763      	b.n	405b1e <_dtoa_r+0x516>
  405c56:	4641      	mov	r1, r8
  405c58:	4648      	mov	r0, r9
  405c5a:	f001 fb63 	bl	407324 <__mcmp>
  405c5e:	2800      	cmp	r0, #0
  405c60:	f6bf af73 	bge.w	405b4a <_dtoa_r+0x542>
  405c64:	9f02      	ldr	r7, [sp, #8]
  405c66:	4649      	mov	r1, r9
  405c68:	2300      	movs	r3, #0
  405c6a:	220a      	movs	r2, #10
  405c6c:	4620      	mov	r0, r4
  405c6e:	3f01      	subs	r7, #1
  405c70:	9702      	str	r7, [sp, #8]
  405c72:	f001 f989 	bl	406f88 <__multadd>
  405c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405c78:	4681      	mov	r9, r0
  405c7a:	2b00      	cmp	r3, #0
  405c7c:	f040 83b6 	bne.w	4063ec <_dtoa_r+0xde4>
  405c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405c82:	2b00      	cmp	r3, #0
  405c84:	f340 83bf 	ble.w	406406 <_dtoa_r+0xdfe>
  405c88:	930a      	str	r3, [sp, #40]	; 0x28
  405c8a:	f8dd b010 	ldr.w	fp, [sp, #16]
  405c8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405c90:	465d      	mov	r5, fp
  405c92:	e002      	b.n	405c9a <_dtoa_r+0x692>
  405c94:	f001 f978 	bl	406f88 <__multadd>
  405c98:	4681      	mov	r9, r0
  405c9a:	4641      	mov	r1, r8
  405c9c:	4648      	mov	r0, r9
  405c9e:	f7ff fc1f 	bl	4054e0 <quorem>
  405ca2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405ca6:	f805 ab01 	strb.w	sl, [r5], #1
  405caa:	eba5 030b 	sub.w	r3, r5, fp
  405cae:	42bb      	cmp	r3, r7
  405cb0:	f04f 020a 	mov.w	r2, #10
  405cb4:	f04f 0300 	mov.w	r3, #0
  405cb8:	4649      	mov	r1, r9
  405cba:	4620      	mov	r0, r4
  405cbc:	dbea      	blt.n	405c94 <_dtoa_r+0x68c>
  405cbe:	9b04      	ldr	r3, [sp, #16]
  405cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405cc2:	2a01      	cmp	r2, #1
  405cc4:	bfac      	ite	ge
  405cc6:	189b      	addge	r3, r3, r2
  405cc8:	3301      	addlt	r3, #1
  405cca:	461d      	mov	r5, r3
  405ccc:	f04f 0b00 	mov.w	fp, #0
  405cd0:	4649      	mov	r1, r9
  405cd2:	2201      	movs	r2, #1
  405cd4:	4620      	mov	r0, r4
  405cd6:	f001 fad3 	bl	407280 <__lshift>
  405cda:	4641      	mov	r1, r8
  405cdc:	4681      	mov	r9, r0
  405cde:	f001 fb21 	bl	407324 <__mcmp>
  405ce2:	2800      	cmp	r0, #0
  405ce4:	f340 823d 	ble.w	406162 <_dtoa_r+0xb5a>
  405ce8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405cec:	9904      	ldr	r1, [sp, #16]
  405cee:	1e6b      	subs	r3, r5, #1
  405cf0:	e004      	b.n	405cfc <_dtoa_r+0x6f4>
  405cf2:	428b      	cmp	r3, r1
  405cf4:	f000 81ae 	beq.w	406054 <_dtoa_r+0xa4c>
  405cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405cfc:	2a39      	cmp	r2, #57	; 0x39
  405cfe:	f103 0501 	add.w	r5, r3, #1
  405d02:	d0f6      	beq.n	405cf2 <_dtoa_r+0x6ea>
  405d04:	3201      	adds	r2, #1
  405d06:	701a      	strb	r2, [r3, #0]
  405d08:	4641      	mov	r1, r8
  405d0a:	4620      	mov	r0, r4
  405d0c:	f001 f932 	bl	406f74 <_Bfree>
  405d10:	2e00      	cmp	r6, #0
  405d12:	f43f ae3d 	beq.w	405990 <_dtoa_r+0x388>
  405d16:	f1bb 0f00 	cmp.w	fp, #0
  405d1a:	d005      	beq.n	405d28 <_dtoa_r+0x720>
  405d1c:	45b3      	cmp	fp, r6
  405d1e:	d003      	beq.n	405d28 <_dtoa_r+0x720>
  405d20:	4659      	mov	r1, fp
  405d22:	4620      	mov	r0, r4
  405d24:	f001 f926 	bl	406f74 <_Bfree>
  405d28:	4631      	mov	r1, r6
  405d2a:	4620      	mov	r0, r4
  405d2c:	f001 f922 	bl	406f74 <_Bfree>
  405d30:	e62e      	b.n	405990 <_dtoa_r+0x388>
  405d32:	2300      	movs	r3, #0
  405d34:	930b      	str	r3, [sp, #44]	; 0x2c
  405d36:	9b02      	ldr	r3, [sp, #8]
  405d38:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405d3a:	4413      	add	r3, r2
  405d3c:	930f      	str	r3, [sp, #60]	; 0x3c
  405d3e:	3301      	adds	r3, #1
  405d40:	2b01      	cmp	r3, #1
  405d42:	461f      	mov	r7, r3
  405d44:	461e      	mov	r6, r3
  405d46:	930a      	str	r3, [sp, #40]	; 0x28
  405d48:	bfb8      	it	lt
  405d4a:	2701      	movlt	r7, #1
  405d4c:	2100      	movs	r1, #0
  405d4e:	2f17      	cmp	r7, #23
  405d50:	6461      	str	r1, [r4, #68]	; 0x44
  405d52:	d90a      	bls.n	405d6a <_dtoa_r+0x762>
  405d54:	2201      	movs	r2, #1
  405d56:	2304      	movs	r3, #4
  405d58:	005b      	lsls	r3, r3, #1
  405d5a:	f103 0014 	add.w	r0, r3, #20
  405d5e:	4287      	cmp	r7, r0
  405d60:	4611      	mov	r1, r2
  405d62:	f102 0201 	add.w	r2, r2, #1
  405d66:	d2f7      	bcs.n	405d58 <_dtoa_r+0x750>
  405d68:	6461      	str	r1, [r4, #68]	; 0x44
  405d6a:	4620      	mov	r0, r4
  405d6c:	f001 f8dc 	bl	406f28 <_Balloc>
  405d70:	2e0e      	cmp	r6, #14
  405d72:	9004      	str	r0, [sp, #16]
  405d74:	6420      	str	r0, [r4, #64]	; 0x40
  405d76:	f63f ad41 	bhi.w	4057fc <_dtoa_r+0x1f4>
  405d7a:	2d00      	cmp	r5, #0
  405d7c:	f43f ad3e 	beq.w	4057fc <_dtoa_r+0x1f4>
  405d80:	9902      	ldr	r1, [sp, #8]
  405d82:	2900      	cmp	r1, #0
  405d84:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405d88:	f340 8202 	ble.w	406190 <_dtoa_r+0xb88>
  405d8c:	4bb8      	ldr	r3, [pc, #736]	; (406070 <_dtoa_r+0xa68>)
  405d8e:	f001 020f 	and.w	r2, r1, #15
  405d92:	110d      	asrs	r5, r1, #4
  405d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d98:	06e9      	lsls	r1, r5, #27
  405d9a:	e9d3 6700 	ldrd	r6, r7, [r3]
  405d9e:	f140 81ae 	bpl.w	4060fe <_dtoa_r+0xaf6>
  405da2:	4bb4      	ldr	r3, [pc, #720]	; (406074 <_dtoa_r+0xa6c>)
  405da4:	4650      	mov	r0, sl
  405da6:	4659      	mov	r1, fp
  405da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405dac:	f002 f9ba 	bl	408124 <__aeabi_ddiv>
  405db0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405db4:	f005 050f 	and.w	r5, r5, #15
  405db8:	f04f 0a03 	mov.w	sl, #3
  405dbc:	b18d      	cbz	r5, 405de2 <_dtoa_r+0x7da>
  405dbe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406074 <_dtoa_r+0xa6c>
  405dc2:	07ea      	lsls	r2, r5, #31
  405dc4:	d509      	bpl.n	405dda <_dtoa_r+0x7d2>
  405dc6:	4630      	mov	r0, r6
  405dc8:	4639      	mov	r1, r7
  405dca:	e9d8 2300 	ldrd	r2, r3, [r8]
  405dce:	f002 f87f 	bl	407ed0 <__aeabi_dmul>
  405dd2:	f10a 0a01 	add.w	sl, sl, #1
  405dd6:	4606      	mov	r6, r0
  405dd8:	460f      	mov	r7, r1
  405dda:	106d      	asrs	r5, r5, #1
  405ddc:	f108 0808 	add.w	r8, r8, #8
  405de0:	d1ef      	bne.n	405dc2 <_dtoa_r+0x7ba>
  405de2:	463b      	mov	r3, r7
  405de4:	4632      	mov	r2, r6
  405de6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405dea:	f002 f99b 	bl	408124 <__aeabi_ddiv>
  405dee:	4607      	mov	r7, r0
  405df0:	4688      	mov	r8, r1
  405df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405df4:	b143      	cbz	r3, 405e08 <_dtoa_r+0x800>
  405df6:	2200      	movs	r2, #0
  405df8:	4b9f      	ldr	r3, [pc, #636]	; (406078 <_dtoa_r+0xa70>)
  405dfa:	4638      	mov	r0, r7
  405dfc:	4641      	mov	r1, r8
  405dfe:	f002 fad9 	bl	4083b4 <__aeabi_dcmplt>
  405e02:	2800      	cmp	r0, #0
  405e04:	f040 8286 	bne.w	406314 <_dtoa_r+0xd0c>
  405e08:	4650      	mov	r0, sl
  405e0a:	f7fd f9ff 	bl	40320c <__aeabi_i2d>
  405e0e:	463a      	mov	r2, r7
  405e10:	4643      	mov	r3, r8
  405e12:	f002 f85d 	bl	407ed0 <__aeabi_dmul>
  405e16:	4b99      	ldr	r3, [pc, #612]	; (40607c <_dtoa_r+0xa74>)
  405e18:	2200      	movs	r2, #0
  405e1a:	f7fd f8ab 	bl	402f74 <__adddf3>
  405e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e20:	4605      	mov	r5, r0
  405e22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405e26:	2b00      	cmp	r3, #0
  405e28:	f000 813e 	beq.w	4060a8 <_dtoa_r+0xaa0>
  405e2c:	9b02      	ldr	r3, [sp, #8]
  405e2e:	9315      	str	r3, [sp, #84]	; 0x54
  405e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e32:	9312      	str	r3, [sp, #72]	; 0x48
  405e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405e36:	2b00      	cmp	r3, #0
  405e38:	f000 81fa 	beq.w	406230 <_dtoa_r+0xc28>
  405e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405e3e:	4b8c      	ldr	r3, [pc, #560]	; (406070 <_dtoa_r+0xa68>)
  405e40:	498f      	ldr	r1, [pc, #572]	; (406080 <_dtoa_r+0xa78>)
  405e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405e4a:	2000      	movs	r0, #0
  405e4c:	f002 f96a 	bl	408124 <__aeabi_ddiv>
  405e50:	462a      	mov	r2, r5
  405e52:	4633      	mov	r3, r6
  405e54:	f7fd f88c 	bl	402f70 <__aeabi_dsub>
  405e58:	4682      	mov	sl, r0
  405e5a:	468b      	mov	fp, r1
  405e5c:	4638      	mov	r0, r7
  405e5e:	4641      	mov	r1, r8
  405e60:	f002 fae6 	bl	408430 <__aeabi_d2iz>
  405e64:	4605      	mov	r5, r0
  405e66:	f7fd f9d1 	bl	40320c <__aeabi_i2d>
  405e6a:	4602      	mov	r2, r0
  405e6c:	460b      	mov	r3, r1
  405e6e:	4638      	mov	r0, r7
  405e70:	4641      	mov	r1, r8
  405e72:	f7fd f87d 	bl	402f70 <__aeabi_dsub>
  405e76:	3530      	adds	r5, #48	; 0x30
  405e78:	fa5f f885 	uxtb.w	r8, r5
  405e7c:	9d04      	ldr	r5, [sp, #16]
  405e7e:	4606      	mov	r6, r0
  405e80:	460f      	mov	r7, r1
  405e82:	f885 8000 	strb.w	r8, [r5]
  405e86:	4602      	mov	r2, r0
  405e88:	460b      	mov	r3, r1
  405e8a:	4650      	mov	r0, sl
  405e8c:	4659      	mov	r1, fp
  405e8e:	3501      	adds	r5, #1
  405e90:	f002 faae 	bl	4083f0 <__aeabi_dcmpgt>
  405e94:	2800      	cmp	r0, #0
  405e96:	d154      	bne.n	405f42 <_dtoa_r+0x93a>
  405e98:	4632      	mov	r2, r6
  405e9a:	463b      	mov	r3, r7
  405e9c:	2000      	movs	r0, #0
  405e9e:	4976      	ldr	r1, [pc, #472]	; (406078 <_dtoa_r+0xa70>)
  405ea0:	f7fd f866 	bl	402f70 <__aeabi_dsub>
  405ea4:	4602      	mov	r2, r0
  405ea6:	460b      	mov	r3, r1
  405ea8:	4650      	mov	r0, sl
  405eaa:	4659      	mov	r1, fp
  405eac:	f002 faa0 	bl	4083f0 <__aeabi_dcmpgt>
  405eb0:	2800      	cmp	r0, #0
  405eb2:	f040 8270 	bne.w	406396 <_dtoa_r+0xd8e>
  405eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405eb8:	2a01      	cmp	r2, #1
  405eba:	f000 8111 	beq.w	4060e0 <_dtoa_r+0xad8>
  405ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ec0:	9a04      	ldr	r2, [sp, #16]
  405ec2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405ec6:	4413      	add	r3, r2
  405ec8:	4699      	mov	r9, r3
  405eca:	e00d      	b.n	405ee8 <_dtoa_r+0x8e0>
  405ecc:	2000      	movs	r0, #0
  405ece:	496a      	ldr	r1, [pc, #424]	; (406078 <_dtoa_r+0xa70>)
  405ed0:	f7fd f84e 	bl	402f70 <__aeabi_dsub>
  405ed4:	4652      	mov	r2, sl
  405ed6:	465b      	mov	r3, fp
  405ed8:	f002 fa6c 	bl	4083b4 <__aeabi_dcmplt>
  405edc:	2800      	cmp	r0, #0
  405ede:	f040 8258 	bne.w	406392 <_dtoa_r+0xd8a>
  405ee2:	454d      	cmp	r5, r9
  405ee4:	f000 80fa 	beq.w	4060dc <_dtoa_r+0xad4>
  405ee8:	4650      	mov	r0, sl
  405eea:	4659      	mov	r1, fp
  405eec:	2200      	movs	r2, #0
  405eee:	4b65      	ldr	r3, [pc, #404]	; (406084 <_dtoa_r+0xa7c>)
  405ef0:	f001 ffee 	bl	407ed0 <__aeabi_dmul>
  405ef4:	2200      	movs	r2, #0
  405ef6:	4b63      	ldr	r3, [pc, #396]	; (406084 <_dtoa_r+0xa7c>)
  405ef8:	4682      	mov	sl, r0
  405efa:	468b      	mov	fp, r1
  405efc:	4630      	mov	r0, r6
  405efe:	4639      	mov	r1, r7
  405f00:	f001 ffe6 	bl	407ed0 <__aeabi_dmul>
  405f04:	460f      	mov	r7, r1
  405f06:	4606      	mov	r6, r0
  405f08:	f002 fa92 	bl	408430 <__aeabi_d2iz>
  405f0c:	4680      	mov	r8, r0
  405f0e:	f7fd f97d 	bl	40320c <__aeabi_i2d>
  405f12:	4602      	mov	r2, r0
  405f14:	460b      	mov	r3, r1
  405f16:	4630      	mov	r0, r6
  405f18:	4639      	mov	r1, r7
  405f1a:	f7fd f829 	bl	402f70 <__aeabi_dsub>
  405f1e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405f22:	fa5f f888 	uxtb.w	r8, r8
  405f26:	4652      	mov	r2, sl
  405f28:	465b      	mov	r3, fp
  405f2a:	f805 8b01 	strb.w	r8, [r5], #1
  405f2e:	4606      	mov	r6, r0
  405f30:	460f      	mov	r7, r1
  405f32:	f002 fa3f 	bl	4083b4 <__aeabi_dcmplt>
  405f36:	4632      	mov	r2, r6
  405f38:	463b      	mov	r3, r7
  405f3a:	2800      	cmp	r0, #0
  405f3c:	d0c6      	beq.n	405ecc <_dtoa_r+0x8c4>
  405f3e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f44:	9302      	str	r3, [sp, #8]
  405f46:	e523      	b.n	405990 <_dtoa_r+0x388>
  405f48:	2300      	movs	r3, #0
  405f4a:	930b      	str	r3, [sp, #44]	; 0x2c
  405f4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405f4e:	2b00      	cmp	r3, #0
  405f50:	f340 80dc 	ble.w	40610c <_dtoa_r+0xb04>
  405f54:	461f      	mov	r7, r3
  405f56:	461e      	mov	r6, r3
  405f58:	930f      	str	r3, [sp, #60]	; 0x3c
  405f5a:	930a      	str	r3, [sp, #40]	; 0x28
  405f5c:	e6f6      	b.n	405d4c <_dtoa_r+0x744>
  405f5e:	2301      	movs	r3, #1
  405f60:	930b      	str	r3, [sp, #44]	; 0x2c
  405f62:	e7f3      	b.n	405f4c <_dtoa_r+0x944>
  405f64:	f1ba 0f00 	cmp.w	sl, #0
  405f68:	f47f ada8 	bne.w	405abc <_dtoa_r+0x4b4>
  405f6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405f70:	2b00      	cmp	r3, #0
  405f72:	f47f adba 	bne.w	405aea <_dtoa_r+0x4e2>
  405f76:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405f7a:	0d3f      	lsrs	r7, r7, #20
  405f7c:	053f      	lsls	r7, r7, #20
  405f7e:	2f00      	cmp	r7, #0
  405f80:	f000 820d 	beq.w	40639e <_dtoa_r+0xd96>
  405f84:	9b08      	ldr	r3, [sp, #32]
  405f86:	3301      	adds	r3, #1
  405f88:	9308      	str	r3, [sp, #32]
  405f8a:	9b06      	ldr	r3, [sp, #24]
  405f8c:	3301      	adds	r3, #1
  405f8e:	9306      	str	r3, [sp, #24]
  405f90:	2301      	movs	r3, #1
  405f92:	930c      	str	r3, [sp, #48]	; 0x30
  405f94:	e5ab      	b.n	405aee <_dtoa_r+0x4e6>
  405f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f98:	2b00      	cmp	r3, #0
  405f9a:	f73f ac42 	bgt.w	405822 <_dtoa_r+0x21a>
  405f9e:	f040 8221 	bne.w	4063e4 <_dtoa_r+0xddc>
  405fa2:	2200      	movs	r2, #0
  405fa4:	4b38      	ldr	r3, [pc, #224]	; (406088 <_dtoa_r+0xa80>)
  405fa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405faa:	f001 ff91 	bl	407ed0 <__aeabi_dmul>
  405fae:	4652      	mov	r2, sl
  405fb0:	465b      	mov	r3, fp
  405fb2:	f002 fa13 	bl	4083dc <__aeabi_dcmpge>
  405fb6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405fba:	4646      	mov	r6, r8
  405fbc:	2800      	cmp	r0, #0
  405fbe:	d041      	beq.n	406044 <_dtoa_r+0xa3c>
  405fc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405fc2:	9d04      	ldr	r5, [sp, #16]
  405fc4:	43db      	mvns	r3, r3
  405fc6:	9302      	str	r3, [sp, #8]
  405fc8:	4641      	mov	r1, r8
  405fca:	4620      	mov	r0, r4
  405fcc:	f000 ffd2 	bl	406f74 <_Bfree>
  405fd0:	2e00      	cmp	r6, #0
  405fd2:	f43f acdd 	beq.w	405990 <_dtoa_r+0x388>
  405fd6:	e6a7      	b.n	405d28 <_dtoa_r+0x720>
  405fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405fda:	4649      	mov	r1, r9
  405fdc:	4620      	mov	r0, r4
  405fde:	f001 f8ff 	bl	4071e0 <__pow5mult>
  405fe2:	4681      	mov	r9, r0
  405fe4:	e558      	b.n	405a98 <_dtoa_r+0x490>
  405fe6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405fe8:	2a00      	cmp	r2, #0
  405fea:	f000 8187 	beq.w	4062fc <_dtoa_r+0xcf4>
  405fee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405ff2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ff4:	9d08      	ldr	r5, [sp, #32]
  405ff6:	e4f2      	b.n	4059de <_dtoa_r+0x3d6>
  405ff8:	f1ba 0f00 	cmp.w	sl, #0
  405ffc:	f47f ad75 	bne.w	405aea <_dtoa_r+0x4e2>
  406000:	e7b4      	b.n	405f6c <_dtoa_r+0x964>
  406002:	f000 ffc1 	bl	406f88 <__multadd>
  406006:	4647      	mov	r7, r8
  406008:	4606      	mov	r6, r0
  40600a:	4683      	mov	fp, r0
  40600c:	e5be      	b.n	405b8c <_dtoa_r+0x584>
  40600e:	4601      	mov	r1, r0
  406010:	4620      	mov	r0, r4
  406012:	9306      	str	r3, [sp, #24]
  406014:	f000 ffae 	bl	406f74 <_Bfree>
  406018:	2201      	movs	r2, #1
  40601a:	9b06      	ldr	r3, [sp, #24]
  40601c:	e5e0      	b.n	405be0 <_dtoa_r+0x5d8>
  40601e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406020:	2b02      	cmp	r3, #2
  406022:	f77f ad96 	ble.w	405b52 <_dtoa_r+0x54a>
  406026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406028:	2b00      	cmp	r3, #0
  40602a:	d1c9      	bne.n	405fc0 <_dtoa_r+0x9b8>
  40602c:	4641      	mov	r1, r8
  40602e:	2205      	movs	r2, #5
  406030:	4620      	mov	r0, r4
  406032:	f000 ffa9 	bl	406f88 <__multadd>
  406036:	4601      	mov	r1, r0
  406038:	4680      	mov	r8, r0
  40603a:	4648      	mov	r0, r9
  40603c:	f001 f972 	bl	407324 <__mcmp>
  406040:	2800      	cmp	r0, #0
  406042:	ddbd      	ble.n	405fc0 <_dtoa_r+0x9b8>
  406044:	9a02      	ldr	r2, [sp, #8]
  406046:	9904      	ldr	r1, [sp, #16]
  406048:	2331      	movs	r3, #49	; 0x31
  40604a:	3201      	adds	r2, #1
  40604c:	9202      	str	r2, [sp, #8]
  40604e:	700b      	strb	r3, [r1, #0]
  406050:	1c4d      	adds	r5, r1, #1
  406052:	e7b9      	b.n	405fc8 <_dtoa_r+0x9c0>
  406054:	9a02      	ldr	r2, [sp, #8]
  406056:	3201      	adds	r2, #1
  406058:	9202      	str	r2, [sp, #8]
  40605a:	9a04      	ldr	r2, [sp, #16]
  40605c:	2331      	movs	r3, #49	; 0x31
  40605e:	7013      	strb	r3, [r2, #0]
  406060:	e652      	b.n	405d08 <_dtoa_r+0x700>
  406062:	2301      	movs	r3, #1
  406064:	930b      	str	r3, [sp, #44]	; 0x2c
  406066:	e666      	b.n	405d36 <_dtoa_r+0x72e>
  406068:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40606c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40606e:	e48f      	b.n	405990 <_dtoa_r+0x388>
  406070:	00408a10 	.word	0x00408a10
  406074:	004089e8 	.word	0x004089e8
  406078:	3ff00000 	.word	0x3ff00000
  40607c:	401c0000 	.word	0x401c0000
  406080:	3fe00000 	.word	0x3fe00000
  406084:	40240000 	.word	0x40240000
  406088:	40140000 	.word	0x40140000
  40608c:	4650      	mov	r0, sl
  40608e:	f7fd f8bd 	bl	40320c <__aeabi_i2d>
  406092:	463a      	mov	r2, r7
  406094:	4643      	mov	r3, r8
  406096:	f001 ff1b 	bl	407ed0 <__aeabi_dmul>
  40609a:	2200      	movs	r2, #0
  40609c:	4bc1      	ldr	r3, [pc, #772]	; (4063a4 <_dtoa_r+0xd9c>)
  40609e:	f7fc ff69 	bl	402f74 <__adddf3>
  4060a2:	4605      	mov	r5, r0
  4060a4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4060a8:	4641      	mov	r1, r8
  4060aa:	2200      	movs	r2, #0
  4060ac:	4bbe      	ldr	r3, [pc, #760]	; (4063a8 <_dtoa_r+0xda0>)
  4060ae:	4638      	mov	r0, r7
  4060b0:	f7fc ff5e 	bl	402f70 <__aeabi_dsub>
  4060b4:	462a      	mov	r2, r5
  4060b6:	4633      	mov	r3, r6
  4060b8:	4682      	mov	sl, r0
  4060ba:	468b      	mov	fp, r1
  4060bc:	f002 f998 	bl	4083f0 <__aeabi_dcmpgt>
  4060c0:	4680      	mov	r8, r0
  4060c2:	2800      	cmp	r0, #0
  4060c4:	f040 8110 	bne.w	4062e8 <_dtoa_r+0xce0>
  4060c8:	462a      	mov	r2, r5
  4060ca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4060ce:	4650      	mov	r0, sl
  4060d0:	4659      	mov	r1, fp
  4060d2:	f002 f96f 	bl	4083b4 <__aeabi_dcmplt>
  4060d6:	b118      	cbz	r0, 4060e0 <_dtoa_r+0xad8>
  4060d8:	4646      	mov	r6, r8
  4060da:	e771      	b.n	405fc0 <_dtoa_r+0x9b8>
  4060dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4060e0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4060e4:	f7ff bb8a 	b.w	4057fc <_dtoa_r+0x1f4>
  4060e8:	9804      	ldr	r0, [sp, #16]
  4060ea:	f7ff babb 	b.w	405664 <_dtoa_r+0x5c>
  4060ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4060f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4060f2:	970c      	str	r7, [sp, #48]	; 0x30
  4060f4:	1afb      	subs	r3, r7, r3
  4060f6:	441a      	add	r2, r3
  4060f8:	920d      	str	r2, [sp, #52]	; 0x34
  4060fa:	2700      	movs	r7, #0
  4060fc:	e469      	b.n	4059d2 <_dtoa_r+0x3ca>
  4060fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406102:	f04f 0a02 	mov.w	sl, #2
  406106:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40610a:	e657      	b.n	405dbc <_dtoa_r+0x7b4>
  40610c:	2100      	movs	r1, #0
  40610e:	2301      	movs	r3, #1
  406110:	6461      	str	r1, [r4, #68]	; 0x44
  406112:	4620      	mov	r0, r4
  406114:	9325      	str	r3, [sp, #148]	; 0x94
  406116:	f000 ff07 	bl	406f28 <_Balloc>
  40611a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40611c:	9004      	str	r0, [sp, #16]
  40611e:	6420      	str	r0, [r4, #64]	; 0x40
  406120:	930a      	str	r3, [sp, #40]	; 0x28
  406122:	930f      	str	r3, [sp, #60]	; 0x3c
  406124:	e629      	b.n	405d7a <_dtoa_r+0x772>
  406126:	2a00      	cmp	r2, #0
  406128:	46d0      	mov	r8, sl
  40612a:	f8cd b018 	str.w	fp, [sp, #24]
  40612e:	469a      	mov	sl, r3
  406130:	dd11      	ble.n	406156 <_dtoa_r+0xb4e>
  406132:	4649      	mov	r1, r9
  406134:	2201      	movs	r2, #1
  406136:	4620      	mov	r0, r4
  406138:	f001 f8a2 	bl	407280 <__lshift>
  40613c:	4641      	mov	r1, r8
  40613e:	4681      	mov	r9, r0
  406140:	f001 f8f0 	bl	407324 <__mcmp>
  406144:	2800      	cmp	r0, #0
  406146:	f340 8146 	ble.w	4063d6 <_dtoa_r+0xdce>
  40614a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40614e:	f000 8106 	beq.w	40635e <_dtoa_r+0xd56>
  406152:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406156:	46b3      	mov	fp, r6
  406158:	f887 a000 	strb.w	sl, [r7]
  40615c:	1c7d      	adds	r5, r7, #1
  40615e:	9e06      	ldr	r6, [sp, #24]
  406160:	e5d2      	b.n	405d08 <_dtoa_r+0x700>
  406162:	d104      	bne.n	40616e <_dtoa_r+0xb66>
  406164:	f01a 0f01 	tst.w	sl, #1
  406168:	d001      	beq.n	40616e <_dtoa_r+0xb66>
  40616a:	e5bd      	b.n	405ce8 <_dtoa_r+0x6e0>
  40616c:	4615      	mov	r5, r2
  40616e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406172:	2b30      	cmp	r3, #48	; 0x30
  406174:	f105 32ff 	add.w	r2, r5, #4294967295
  406178:	d0f8      	beq.n	40616c <_dtoa_r+0xb64>
  40617a:	e5c5      	b.n	405d08 <_dtoa_r+0x700>
  40617c:	9904      	ldr	r1, [sp, #16]
  40617e:	2230      	movs	r2, #48	; 0x30
  406180:	700a      	strb	r2, [r1, #0]
  406182:	9a02      	ldr	r2, [sp, #8]
  406184:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406188:	3201      	adds	r2, #1
  40618a:	9202      	str	r2, [sp, #8]
  40618c:	f7ff bbfc 	b.w	405988 <_dtoa_r+0x380>
  406190:	f000 80bb 	beq.w	40630a <_dtoa_r+0xd02>
  406194:	9b02      	ldr	r3, [sp, #8]
  406196:	425d      	negs	r5, r3
  406198:	4b84      	ldr	r3, [pc, #528]	; (4063ac <_dtoa_r+0xda4>)
  40619a:	f005 020f 	and.w	r2, r5, #15
  40619e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4061a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4061aa:	f001 fe91 	bl	407ed0 <__aeabi_dmul>
  4061ae:	112d      	asrs	r5, r5, #4
  4061b0:	4607      	mov	r7, r0
  4061b2:	4688      	mov	r8, r1
  4061b4:	f000 812c 	beq.w	406410 <_dtoa_r+0xe08>
  4061b8:	4e7d      	ldr	r6, [pc, #500]	; (4063b0 <_dtoa_r+0xda8>)
  4061ba:	f04f 0a02 	mov.w	sl, #2
  4061be:	07eb      	lsls	r3, r5, #31
  4061c0:	d509      	bpl.n	4061d6 <_dtoa_r+0xbce>
  4061c2:	4638      	mov	r0, r7
  4061c4:	4641      	mov	r1, r8
  4061c6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4061ca:	f001 fe81 	bl	407ed0 <__aeabi_dmul>
  4061ce:	f10a 0a01 	add.w	sl, sl, #1
  4061d2:	4607      	mov	r7, r0
  4061d4:	4688      	mov	r8, r1
  4061d6:	106d      	asrs	r5, r5, #1
  4061d8:	f106 0608 	add.w	r6, r6, #8
  4061dc:	d1ef      	bne.n	4061be <_dtoa_r+0xbb6>
  4061de:	e608      	b.n	405df2 <_dtoa_r+0x7ea>
  4061e0:	6871      	ldr	r1, [r6, #4]
  4061e2:	4620      	mov	r0, r4
  4061e4:	f000 fea0 	bl	406f28 <_Balloc>
  4061e8:	6933      	ldr	r3, [r6, #16]
  4061ea:	3302      	adds	r3, #2
  4061ec:	009a      	lsls	r2, r3, #2
  4061ee:	4605      	mov	r5, r0
  4061f0:	f106 010c 	add.w	r1, r6, #12
  4061f4:	300c      	adds	r0, #12
  4061f6:	f7fd fb57 	bl	4038a8 <memcpy>
  4061fa:	4629      	mov	r1, r5
  4061fc:	2201      	movs	r2, #1
  4061fe:	4620      	mov	r0, r4
  406200:	f001 f83e 	bl	407280 <__lshift>
  406204:	9006      	str	r0, [sp, #24]
  406206:	e4b5      	b.n	405b74 <_dtoa_r+0x56c>
  406208:	2b39      	cmp	r3, #57	; 0x39
  40620a:	f8cd b018 	str.w	fp, [sp, #24]
  40620e:	46d0      	mov	r8, sl
  406210:	f000 80a5 	beq.w	40635e <_dtoa_r+0xd56>
  406214:	f103 0a01 	add.w	sl, r3, #1
  406218:	46b3      	mov	fp, r6
  40621a:	f887 a000 	strb.w	sl, [r7]
  40621e:	1c7d      	adds	r5, r7, #1
  406220:	9e06      	ldr	r6, [sp, #24]
  406222:	e571      	b.n	405d08 <_dtoa_r+0x700>
  406224:	465a      	mov	r2, fp
  406226:	46d0      	mov	r8, sl
  406228:	46b3      	mov	fp, r6
  40622a:	469a      	mov	sl, r3
  40622c:	4616      	mov	r6, r2
  40622e:	e54f      	b.n	405cd0 <_dtoa_r+0x6c8>
  406230:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406232:	495e      	ldr	r1, [pc, #376]	; (4063ac <_dtoa_r+0xda4>)
  406234:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406238:	462a      	mov	r2, r5
  40623a:	4633      	mov	r3, r6
  40623c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406240:	f001 fe46 	bl	407ed0 <__aeabi_dmul>
  406244:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406248:	4638      	mov	r0, r7
  40624a:	4641      	mov	r1, r8
  40624c:	f002 f8f0 	bl	408430 <__aeabi_d2iz>
  406250:	4605      	mov	r5, r0
  406252:	f7fc ffdb 	bl	40320c <__aeabi_i2d>
  406256:	460b      	mov	r3, r1
  406258:	4602      	mov	r2, r0
  40625a:	4641      	mov	r1, r8
  40625c:	4638      	mov	r0, r7
  40625e:	f7fc fe87 	bl	402f70 <__aeabi_dsub>
  406262:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406264:	460f      	mov	r7, r1
  406266:	9904      	ldr	r1, [sp, #16]
  406268:	3530      	adds	r5, #48	; 0x30
  40626a:	2b01      	cmp	r3, #1
  40626c:	700d      	strb	r5, [r1, #0]
  40626e:	4606      	mov	r6, r0
  406270:	f101 0501 	add.w	r5, r1, #1
  406274:	d026      	beq.n	4062c4 <_dtoa_r+0xcbc>
  406276:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406278:	9a04      	ldr	r2, [sp, #16]
  40627a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4063b8 <_dtoa_r+0xdb0>
  40627e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406282:	4413      	add	r3, r2
  406284:	f04f 0a00 	mov.w	sl, #0
  406288:	4699      	mov	r9, r3
  40628a:	4652      	mov	r2, sl
  40628c:	465b      	mov	r3, fp
  40628e:	4630      	mov	r0, r6
  406290:	4639      	mov	r1, r7
  406292:	f001 fe1d 	bl	407ed0 <__aeabi_dmul>
  406296:	460f      	mov	r7, r1
  406298:	4606      	mov	r6, r0
  40629a:	f002 f8c9 	bl	408430 <__aeabi_d2iz>
  40629e:	4680      	mov	r8, r0
  4062a0:	f7fc ffb4 	bl	40320c <__aeabi_i2d>
  4062a4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4062a8:	4602      	mov	r2, r0
  4062aa:	460b      	mov	r3, r1
  4062ac:	4630      	mov	r0, r6
  4062ae:	4639      	mov	r1, r7
  4062b0:	f7fc fe5e 	bl	402f70 <__aeabi_dsub>
  4062b4:	f805 8b01 	strb.w	r8, [r5], #1
  4062b8:	454d      	cmp	r5, r9
  4062ba:	4606      	mov	r6, r0
  4062bc:	460f      	mov	r7, r1
  4062be:	d1e4      	bne.n	40628a <_dtoa_r+0xc82>
  4062c0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4062c4:	4b3b      	ldr	r3, [pc, #236]	; (4063b4 <_dtoa_r+0xdac>)
  4062c6:	2200      	movs	r2, #0
  4062c8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4062cc:	f7fc fe52 	bl	402f74 <__adddf3>
  4062d0:	4632      	mov	r2, r6
  4062d2:	463b      	mov	r3, r7
  4062d4:	f002 f86e 	bl	4083b4 <__aeabi_dcmplt>
  4062d8:	2800      	cmp	r0, #0
  4062da:	d046      	beq.n	40636a <_dtoa_r+0xd62>
  4062dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4062de:	9302      	str	r3, [sp, #8]
  4062e0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4062e4:	f7ff bb43 	b.w	40596e <_dtoa_r+0x366>
  4062e8:	f04f 0800 	mov.w	r8, #0
  4062ec:	4646      	mov	r6, r8
  4062ee:	e6a9      	b.n	406044 <_dtoa_r+0xa3c>
  4062f0:	9b08      	ldr	r3, [sp, #32]
  4062f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4062f4:	1a9d      	subs	r5, r3, r2
  4062f6:	2300      	movs	r3, #0
  4062f8:	f7ff bb71 	b.w	4059de <_dtoa_r+0x3d6>
  4062fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4062fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406300:	9d08      	ldr	r5, [sp, #32]
  406302:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406306:	f7ff bb6a 	b.w	4059de <_dtoa_r+0x3d6>
  40630a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40630e:	f04f 0a02 	mov.w	sl, #2
  406312:	e56e      	b.n	405df2 <_dtoa_r+0x7ea>
  406314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406316:	2b00      	cmp	r3, #0
  406318:	f43f aeb8 	beq.w	40608c <_dtoa_r+0xa84>
  40631c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40631e:	2b00      	cmp	r3, #0
  406320:	f77f aede 	ble.w	4060e0 <_dtoa_r+0xad8>
  406324:	2200      	movs	r2, #0
  406326:	4b24      	ldr	r3, [pc, #144]	; (4063b8 <_dtoa_r+0xdb0>)
  406328:	4638      	mov	r0, r7
  40632a:	4641      	mov	r1, r8
  40632c:	f001 fdd0 	bl	407ed0 <__aeabi_dmul>
  406330:	4607      	mov	r7, r0
  406332:	4688      	mov	r8, r1
  406334:	f10a 0001 	add.w	r0, sl, #1
  406338:	f7fc ff68 	bl	40320c <__aeabi_i2d>
  40633c:	463a      	mov	r2, r7
  40633e:	4643      	mov	r3, r8
  406340:	f001 fdc6 	bl	407ed0 <__aeabi_dmul>
  406344:	2200      	movs	r2, #0
  406346:	4b17      	ldr	r3, [pc, #92]	; (4063a4 <_dtoa_r+0xd9c>)
  406348:	f7fc fe14 	bl	402f74 <__adddf3>
  40634c:	9a02      	ldr	r2, [sp, #8]
  40634e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406350:	9312      	str	r3, [sp, #72]	; 0x48
  406352:	3a01      	subs	r2, #1
  406354:	4605      	mov	r5, r0
  406356:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40635a:	9215      	str	r2, [sp, #84]	; 0x54
  40635c:	e56a      	b.n	405e34 <_dtoa_r+0x82c>
  40635e:	2239      	movs	r2, #57	; 0x39
  406360:	46b3      	mov	fp, r6
  406362:	703a      	strb	r2, [r7, #0]
  406364:	9e06      	ldr	r6, [sp, #24]
  406366:	1c7d      	adds	r5, r7, #1
  406368:	e4c0      	b.n	405cec <_dtoa_r+0x6e4>
  40636a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40636e:	2000      	movs	r0, #0
  406370:	4910      	ldr	r1, [pc, #64]	; (4063b4 <_dtoa_r+0xdac>)
  406372:	f7fc fdfd 	bl	402f70 <__aeabi_dsub>
  406376:	4632      	mov	r2, r6
  406378:	463b      	mov	r3, r7
  40637a:	f002 f839 	bl	4083f0 <__aeabi_dcmpgt>
  40637e:	b908      	cbnz	r0, 406384 <_dtoa_r+0xd7c>
  406380:	e6ae      	b.n	4060e0 <_dtoa_r+0xad8>
  406382:	4615      	mov	r5, r2
  406384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406388:	2b30      	cmp	r3, #48	; 0x30
  40638a:	f105 32ff 	add.w	r2, r5, #4294967295
  40638e:	d0f8      	beq.n	406382 <_dtoa_r+0xd7a>
  406390:	e5d7      	b.n	405f42 <_dtoa_r+0x93a>
  406392:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406396:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406398:	9302      	str	r3, [sp, #8]
  40639a:	f7ff bae8 	b.w	40596e <_dtoa_r+0x366>
  40639e:	970c      	str	r7, [sp, #48]	; 0x30
  4063a0:	f7ff bba5 	b.w	405aee <_dtoa_r+0x4e6>
  4063a4:	401c0000 	.word	0x401c0000
  4063a8:	40140000 	.word	0x40140000
  4063ac:	00408a10 	.word	0x00408a10
  4063b0:	004089e8 	.word	0x004089e8
  4063b4:	3fe00000 	.word	0x3fe00000
  4063b8:	40240000 	.word	0x40240000
  4063bc:	2b39      	cmp	r3, #57	; 0x39
  4063be:	f8cd b018 	str.w	fp, [sp, #24]
  4063c2:	46d0      	mov	r8, sl
  4063c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4063c8:	469a      	mov	sl, r3
  4063ca:	d0c8      	beq.n	40635e <_dtoa_r+0xd56>
  4063cc:	f1bb 0f00 	cmp.w	fp, #0
  4063d0:	f73f aebf 	bgt.w	406152 <_dtoa_r+0xb4a>
  4063d4:	e6bf      	b.n	406156 <_dtoa_r+0xb4e>
  4063d6:	f47f aebe 	bne.w	406156 <_dtoa_r+0xb4e>
  4063da:	f01a 0f01 	tst.w	sl, #1
  4063de:	f43f aeba 	beq.w	406156 <_dtoa_r+0xb4e>
  4063e2:	e6b2      	b.n	40614a <_dtoa_r+0xb42>
  4063e4:	f04f 0800 	mov.w	r8, #0
  4063e8:	4646      	mov	r6, r8
  4063ea:	e5e9      	b.n	405fc0 <_dtoa_r+0x9b8>
  4063ec:	4631      	mov	r1, r6
  4063ee:	2300      	movs	r3, #0
  4063f0:	220a      	movs	r2, #10
  4063f2:	4620      	mov	r0, r4
  4063f4:	f000 fdc8 	bl	406f88 <__multadd>
  4063f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4063fa:	2b00      	cmp	r3, #0
  4063fc:	4606      	mov	r6, r0
  4063fe:	dd0a      	ble.n	406416 <_dtoa_r+0xe0e>
  406400:	930a      	str	r3, [sp, #40]	; 0x28
  406402:	f7ff bbaa 	b.w	405b5a <_dtoa_r+0x552>
  406406:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406408:	2b02      	cmp	r3, #2
  40640a:	dc23      	bgt.n	406454 <_dtoa_r+0xe4c>
  40640c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40640e:	e43b      	b.n	405c88 <_dtoa_r+0x680>
  406410:	f04f 0a02 	mov.w	sl, #2
  406414:	e4ed      	b.n	405df2 <_dtoa_r+0x7ea>
  406416:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406418:	2b02      	cmp	r3, #2
  40641a:	dc1b      	bgt.n	406454 <_dtoa_r+0xe4c>
  40641c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40641e:	e7ef      	b.n	406400 <_dtoa_r+0xdf8>
  406420:	2500      	movs	r5, #0
  406422:	6465      	str	r5, [r4, #68]	; 0x44
  406424:	4629      	mov	r1, r5
  406426:	4620      	mov	r0, r4
  406428:	f000 fd7e 	bl	406f28 <_Balloc>
  40642c:	f04f 33ff 	mov.w	r3, #4294967295
  406430:	930a      	str	r3, [sp, #40]	; 0x28
  406432:	930f      	str	r3, [sp, #60]	; 0x3c
  406434:	2301      	movs	r3, #1
  406436:	9004      	str	r0, [sp, #16]
  406438:	9525      	str	r5, [sp, #148]	; 0x94
  40643a:	6420      	str	r0, [r4, #64]	; 0x40
  40643c:	930b      	str	r3, [sp, #44]	; 0x2c
  40643e:	f7ff b9dd 	b.w	4057fc <_dtoa_r+0x1f4>
  406442:	2501      	movs	r5, #1
  406444:	f7ff b9a5 	b.w	405792 <_dtoa_r+0x18a>
  406448:	f43f ab69 	beq.w	405b1e <_dtoa_r+0x516>
  40644c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406450:	f7ff bbf9 	b.w	405c46 <_dtoa_r+0x63e>
  406454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406456:	930a      	str	r3, [sp, #40]	; 0x28
  406458:	e5e5      	b.n	406026 <_dtoa_r+0xa1e>
  40645a:	bf00      	nop

0040645c <__sflush_r>:
  40645c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406460:	b29a      	uxth	r2, r3
  406462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406466:	460d      	mov	r5, r1
  406468:	0711      	lsls	r1, r2, #28
  40646a:	4680      	mov	r8, r0
  40646c:	d43a      	bmi.n	4064e4 <__sflush_r+0x88>
  40646e:	686a      	ldr	r2, [r5, #4]
  406470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406474:	2a00      	cmp	r2, #0
  406476:	81ab      	strh	r3, [r5, #12]
  406478:	dd6f      	ble.n	40655a <__sflush_r+0xfe>
  40647a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40647c:	2c00      	cmp	r4, #0
  40647e:	d049      	beq.n	406514 <__sflush_r+0xb8>
  406480:	2200      	movs	r2, #0
  406482:	b29b      	uxth	r3, r3
  406484:	f8d8 6000 	ldr.w	r6, [r8]
  406488:	f8c8 2000 	str.w	r2, [r8]
  40648c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406490:	d067      	beq.n	406562 <__sflush_r+0x106>
  406492:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406494:	075f      	lsls	r7, r3, #29
  406496:	d505      	bpl.n	4064a4 <__sflush_r+0x48>
  406498:	6869      	ldr	r1, [r5, #4]
  40649a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40649c:	1a52      	subs	r2, r2, r1
  40649e:	b10b      	cbz	r3, 4064a4 <__sflush_r+0x48>
  4064a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4064a2:	1ad2      	subs	r2, r2, r3
  4064a4:	2300      	movs	r3, #0
  4064a6:	69e9      	ldr	r1, [r5, #28]
  4064a8:	4640      	mov	r0, r8
  4064aa:	47a0      	blx	r4
  4064ac:	1c44      	adds	r4, r0, #1
  4064ae:	d03c      	beq.n	40652a <__sflush_r+0xce>
  4064b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4064b4:	692a      	ldr	r2, [r5, #16]
  4064b6:	602a      	str	r2, [r5, #0]
  4064b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4064bc:	2200      	movs	r2, #0
  4064be:	81ab      	strh	r3, [r5, #12]
  4064c0:	04db      	lsls	r3, r3, #19
  4064c2:	606a      	str	r2, [r5, #4]
  4064c4:	d447      	bmi.n	406556 <__sflush_r+0xfa>
  4064c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4064c8:	f8c8 6000 	str.w	r6, [r8]
  4064cc:	b311      	cbz	r1, 406514 <__sflush_r+0xb8>
  4064ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4064d2:	4299      	cmp	r1, r3
  4064d4:	d002      	beq.n	4064dc <__sflush_r+0x80>
  4064d6:	4640      	mov	r0, r8
  4064d8:	f000 f95a 	bl	406790 <_free_r>
  4064dc:	2000      	movs	r0, #0
  4064de:	6328      	str	r0, [r5, #48]	; 0x30
  4064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064e4:	692e      	ldr	r6, [r5, #16]
  4064e6:	b1ae      	cbz	r6, 406514 <__sflush_r+0xb8>
  4064e8:	682c      	ldr	r4, [r5, #0]
  4064ea:	602e      	str	r6, [r5, #0]
  4064ec:	0791      	lsls	r1, r2, #30
  4064ee:	bf0c      	ite	eq
  4064f0:	696b      	ldreq	r3, [r5, #20]
  4064f2:	2300      	movne	r3, #0
  4064f4:	1ba4      	subs	r4, r4, r6
  4064f6:	60ab      	str	r3, [r5, #8]
  4064f8:	e00a      	b.n	406510 <__sflush_r+0xb4>
  4064fa:	4623      	mov	r3, r4
  4064fc:	4632      	mov	r2, r6
  4064fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406500:	69e9      	ldr	r1, [r5, #28]
  406502:	4640      	mov	r0, r8
  406504:	47b8      	blx	r7
  406506:	2800      	cmp	r0, #0
  406508:	eba4 0400 	sub.w	r4, r4, r0
  40650c:	4406      	add	r6, r0
  40650e:	dd04      	ble.n	40651a <__sflush_r+0xbe>
  406510:	2c00      	cmp	r4, #0
  406512:	dcf2      	bgt.n	4064fa <__sflush_r+0x9e>
  406514:	2000      	movs	r0, #0
  406516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40651a:	89ab      	ldrh	r3, [r5, #12]
  40651c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406520:	81ab      	strh	r3, [r5, #12]
  406522:	f04f 30ff 	mov.w	r0, #4294967295
  406526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40652a:	f8d8 4000 	ldr.w	r4, [r8]
  40652e:	2c1d      	cmp	r4, #29
  406530:	d8f3      	bhi.n	40651a <__sflush_r+0xbe>
  406532:	4b19      	ldr	r3, [pc, #100]	; (406598 <__sflush_r+0x13c>)
  406534:	40e3      	lsrs	r3, r4
  406536:	43db      	mvns	r3, r3
  406538:	f013 0301 	ands.w	r3, r3, #1
  40653c:	d1ed      	bne.n	40651a <__sflush_r+0xbe>
  40653e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406542:	606b      	str	r3, [r5, #4]
  406544:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406548:	6929      	ldr	r1, [r5, #16]
  40654a:	81ab      	strh	r3, [r5, #12]
  40654c:	04da      	lsls	r2, r3, #19
  40654e:	6029      	str	r1, [r5, #0]
  406550:	d5b9      	bpl.n	4064c6 <__sflush_r+0x6a>
  406552:	2c00      	cmp	r4, #0
  406554:	d1b7      	bne.n	4064c6 <__sflush_r+0x6a>
  406556:	6528      	str	r0, [r5, #80]	; 0x50
  406558:	e7b5      	b.n	4064c6 <__sflush_r+0x6a>
  40655a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40655c:	2a00      	cmp	r2, #0
  40655e:	dc8c      	bgt.n	40647a <__sflush_r+0x1e>
  406560:	e7d8      	b.n	406514 <__sflush_r+0xb8>
  406562:	2301      	movs	r3, #1
  406564:	69e9      	ldr	r1, [r5, #28]
  406566:	4640      	mov	r0, r8
  406568:	47a0      	blx	r4
  40656a:	1c43      	adds	r3, r0, #1
  40656c:	4602      	mov	r2, r0
  40656e:	d002      	beq.n	406576 <__sflush_r+0x11a>
  406570:	89ab      	ldrh	r3, [r5, #12]
  406572:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406574:	e78e      	b.n	406494 <__sflush_r+0x38>
  406576:	f8d8 3000 	ldr.w	r3, [r8]
  40657a:	2b00      	cmp	r3, #0
  40657c:	d0f8      	beq.n	406570 <__sflush_r+0x114>
  40657e:	2b1d      	cmp	r3, #29
  406580:	d001      	beq.n	406586 <__sflush_r+0x12a>
  406582:	2b16      	cmp	r3, #22
  406584:	d102      	bne.n	40658c <__sflush_r+0x130>
  406586:	f8c8 6000 	str.w	r6, [r8]
  40658a:	e7c3      	b.n	406514 <__sflush_r+0xb8>
  40658c:	89ab      	ldrh	r3, [r5, #12]
  40658e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406592:	81ab      	strh	r3, [r5, #12]
  406594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406598:	20400001 	.word	0x20400001

0040659c <_fflush_r>:
  40659c:	b538      	push	{r3, r4, r5, lr}
  40659e:	460d      	mov	r5, r1
  4065a0:	4604      	mov	r4, r0
  4065a2:	b108      	cbz	r0, 4065a8 <_fflush_r+0xc>
  4065a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4065a6:	b1bb      	cbz	r3, 4065d8 <_fflush_r+0x3c>
  4065a8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4065ac:	b188      	cbz	r0, 4065d2 <_fflush_r+0x36>
  4065ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4065b0:	07db      	lsls	r3, r3, #31
  4065b2:	d401      	bmi.n	4065b8 <_fflush_r+0x1c>
  4065b4:	0581      	lsls	r1, r0, #22
  4065b6:	d517      	bpl.n	4065e8 <_fflush_r+0x4c>
  4065b8:	4620      	mov	r0, r4
  4065ba:	4629      	mov	r1, r5
  4065bc:	f7ff ff4e 	bl	40645c <__sflush_r>
  4065c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4065c2:	07da      	lsls	r2, r3, #31
  4065c4:	4604      	mov	r4, r0
  4065c6:	d402      	bmi.n	4065ce <_fflush_r+0x32>
  4065c8:	89ab      	ldrh	r3, [r5, #12]
  4065ca:	059b      	lsls	r3, r3, #22
  4065cc:	d507      	bpl.n	4065de <_fflush_r+0x42>
  4065ce:	4620      	mov	r0, r4
  4065d0:	bd38      	pop	{r3, r4, r5, pc}
  4065d2:	4604      	mov	r4, r0
  4065d4:	4620      	mov	r0, r4
  4065d6:	bd38      	pop	{r3, r4, r5, pc}
  4065d8:	f000 f838 	bl	40664c <__sinit>
  4065dc:	e7e4      	b.n	4065a8 <_fflush_r+0xc>
  4065de:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4065e0:	f000 fb72 	bl	406cc8 <__retarget_lock_release_recursive>
  4065e4:	4620      	mov	r0, r4
  4065e6:	bd38      	pop	{r3, r4, r5, pc}
  4065e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4065ea:	f000 fb6b 	bl	406cc4 <__retarget_lock_acquire_recursive>
  4065ee:	e7e3      	b.n	4065b8 <_fflush_r+0x1c>

004065f0 <_cleanup_r>:
  4065f0:	4901      	ldr	r1, [pc, #4]	; (4065f8 <_cleanup_r+0x8>)
  4065f2:	f000 bb2b 	b.w	406c4c <_fwalk_reent>
  4065f6:	bf00      	nop
  4065f8:	00407af9 	.word	0x00407af9

004065fc <std.isra.0>:
  4065fc:	b510      	push	{r4, lr}
  4065fe:	2300      	movs	r3, #0
  406600:	4604      	mov	r4, r0
  406602:	8181      	strh	r1, [r0, #12]
  406604:	81c2      	strh	r2, [r0, #14]
  406606:	6003      	str	r3, [r0, #0]
  406608:	6043      	str	r3, [r0, #4]
  40660a:	6083      	str	r3, [r0, #8]
  40660c:	6643      	str	r3, [r0, #100]	; 0x64
  40660e:	6103      	str	r3, [r0, #16]
  406610:	6143      	str	r3, [r0, #20]
  406612:	6183      	str	r3, [r0, #24]
  406614:	4619      	mov	r1, r3
  406616:	2208      	movs	r2, #8
  406618:	305c      	adds	r0, #92	; 0x5c
  40661a:	f7fd f9df 	bl	4039dc <memset>
  40661e:	4807      	ldr	r0, [pc, #28]	; (40663c <std.isra.0+0x40>)
  406620:	4907      	ldr	r1, [pc, #28]	; (406640 <std.isra.0+0x44>)
  406622:	4a08      	ldr	r2, [pc, #32]	; (406644 <std.isra.0+0x48>)
  406624:	4b08      	ldr	r3, [pc, #32]	; (406648 <std.isra.0+0x4c>)
  406626:	6220      	str	r0, [r4, #32]
  406628:	61e4      	str	r4, [r4, #28]
  40662a:	6261      	str	r1, [r4, #36]	; 0x24
  40662c:	62a2      	str	r2, [r4, #40]	; 0x28
  40662e:	62e3      	str	r3, [r4, #44]	; 0x2c
  406630:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406638:	f000 bb40 	b.w	406cbc <__retarget_lock_init_recursive>
  40663c:	00407869 	.word	0x00407869
  406640:	0040788d 	.word	0x0040788d
  406644:	004078c9 	.word	0x004078c9
  406648:	004078e9 	.word	0x004078e9

0040664c <__sinit>:
  40664c:	b510      	push	{r4, lr}
  40664e:	4604      	mov	r4, r0
  406650:	4812      	ldr	r0, [pc, #72]	; (40669c <__sinit+0x50>)
  406652:	f000 fb37 	bl	406cc4 <__retarget_lock_acquire_recursive>
  406656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406658:	b9d2      	cbnz	r2, 406690 <__sinit+0x44>
  40665a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40665e:	4810      	ldr	r0, [pc, #64]	; (4066a0 <__sinit+0x54>)
  406660:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406664:	2103      	movs	r1, #3
  406666:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40666a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40666c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406670:	6860      	ldr	r0, [r4, #4]
  406672:	2104      	movs	r1, #4
  406674:	f7ff ffc2 	bl	4065fc <std.isra.0>
  406678:	2201      	movs	r2, #1
  40667a:	2109      	movs	r1, #9
  40667c:	68a0      	ldr	r0, [r4, #8]
  40667e:	f7ff ffbd 	bl	4065fc <std.isra.0>
  406682:	2202      	movs	r2, #2
  406684:	2112      	movs	r1, #18
  406686:	68e0      	ldr	r0, [r4, #12]
  406688:	f7ff ffb8 	bl	4065fc <std.isra.0>
  40668c:	2301      	movs	r3, #1
  40668e:	63a3      	str	r3, [r4, #56]	; 0x38
  406690:	4802      	ldr	r0, [pc, #8]	; (40669c <__sinit+0x50>)
  406692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406696:	f000 bb17 	b.w	406cc8 <__retarget_lock_release_recursive>
  40669a:	bf00      	nop
  40669c:	20400c20 	.word	0x20400c20
  4066a0:	004065f1 	.word	0x004065f1

004066a4 <__sfp_lock_acquire>:
  4066a4:	4801      	ldr	r0, [pc, #4]	; (4066ac <__sfp_lock_acquire+0x8>)
  4066a6:	f000 bb0d 	b.w	406cc4 <__retarget_lock_acquire_recursive>
  4066aa:	bf00      	nop
  4066ac:	20400c34 	.word	0x20400c34

004066b0 <__sfp_lock_release>:
  4066b0:	4801      	ldr	r0, [pc, #4]	; (4066b8 <__sfp_lock_release+0x8>)
  4066b2:	f000 bb09 	b.w	406cc8 <__retarget_lock_release_recursive>
  4066b6:	bf00      	nop
  4066b8:	20400c34 	.word	0x20400c34

004066bc <__libc_fini_array>:
  4066bc:	b538      	push	{r3, r4, r5, lr}
  4066be:	4c0a      	ldr	r4, [pc, #40]	; (4066e8 <__libc_fini_array+0x2c>)
  4066c0:	4d0a      	ldr	r5, [pc, #40]	; (4066ec <__libc_fini_array+0x30>)
  4066c2:	1b64      	subs	r4, r4, r5
  4066c4:	10a4      	asrs	r4, r4, #2
  4066c6:	d00a      	beq.n	4066de <__libc_fini_array+0x22>
  4066c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4066cc:	3b01      	subs	r3, #1
  4066ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4066d2:	3c01      	subs	r4, #1
  4066d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4066d8:	4798      	blx	r3
  4066da:	2c00      	cmp	r4, #0
  4066dc:	d1f9      	bne.n	4066d2 <__libc_fini_array+0x16>
  4066de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4066e2:	f002 ba93 	b.w	408c0c <_fini>
  4066e6:	bf00      	nop
  4066e8:	00408c1c 	.word	0x00408c1c
  4066ec:	00408c18 	.word	0x00408c18

004066f0 <_malloc_trim_r>:
  4066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4066f2:	4f24      	ldr	r7, [pc, #144]	; (406784 <_malloc_trim_r+0x94>)
  4066f4:	460c      	mov	r4, r1
  4066f6:	4606      	mov	r6, r0
  4066f8:	f7fd f9be 	bl	403a78 <__malloc_lock>
  4066fc:	68bb      	ldr	r3, [r7, #8]
  4066fe:	685d      	ldr	r5, [r3, #4]
  406700:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406704:	310f      	adds	r1, #15
  406706:	f025 0503 	bic.w	r5, r5, #3
  40670a:	4429      	add	r1, r5
  40670c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406710:	f021 010f 	bic.w	r1, r1, #15
  406714:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406718:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40671c:	db07      	blt.n	40672e <_malloc_trim_r+0x3e>
  40671e:	2100      	movs	r1, #0
  406720:	4630      	mov	r0, r6
  406722:	f7fd fa1f 	bl	403b64 <_sbrk_r>
  406726:	68bb      	ldr	r3, [r7, #8]
  406728:	442b      	add	r3, r5
  40672a:	4298      	cmp	r0, r3
  40672c:	d004      	beq.n	406738 <_malloc_trim_r+0x48>
  40672e:	4630      	mov	r0, r6
  406730:	f7fd f9a8 	bl	403a84 <__malloc_unlock>
  406734:	2000      	movs	r0, #0
  406736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406738:	4261      	negs	r1, r4
  40673a:	4630      	mov	r0, r6
  40673c:	f7fd fa12 	bl	403b64 <_sbrk_r>
  406740:	3001      	adds	r0, #1
  406742:	d00d      	beq.n	406760 <_malloc_trim_r+0x70>
  406744:	4b10      	ldr	r3, [pc, #64]	; (406788 <_malloc_trim_r+0x98>)
  406746:	68ba      	ldr	r2, [r7, #8]
  406748:	6819      	ldr	r1, [r3, #0]
  40674a:	1b2d      	subs	r5, r5, r4
  40674c:	f045 0501 	orr.w	r5, r5, #1
  406750:	4630      	mov	r0, r6
  406752:	1b09      	subs	r1, r1, r4
  406754:	6055      	str	r5, [r2, #4]
  406756:	6019      	str	r1, [r3, #0]
  406758:	f7fd f994 	bl	403a84 <__malloc_unlock>
  40675c:	2001      	movs	r0, #1
  40675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406760:	2100      	movs	r1, #0
  406762:	4630      	mov	r0, r6
  406764:	f7fd f9fe 	bl	403b64 <_sbrk_r>
  406768:	68ba      	ldr	r2, [r7, #8]
  40676a:	1a83      	subs	r3, r0, r2
  40676c:	2b0f      	cmp	r3, #15
  40676e:	ddde      	ble.n	40672e <_malloc_trim_r+0x3e>
  406770:	4c06      	ldr	r4, [pc, #24]	; (40678c <_malloc_trim_r+0x9c>)
  406772:	4905      	ldr	r1, [pc, #20]	; (406788 <_malloc_trim_r+0x98>)
  406774:	6824      	ldr	r4, [r4, #0]
  406776:	f043 0301 	orr.w	r3, r3, #1
  40677a:	1b00      	subs	r0, r0, r4
  40677c:	6053      	str	r3, [r2, #4]
  40677e:	6008      	str	r0, [r1, #0]
  406780:	e7d5      	b.n	40672e <_malloc_trim_r+0x3e>
  406782:	bf00      	nop
  406784:	20400438 	.word	0x20400438
  406788:	20400b94 	.word	0x20400b94
  40678c:	20400840 	.word	0x20400840

00406790 <_free_r>:
  406790:	2900      	cmp	r1, #0
  406792:	d044      	beq.n	40681e <_free_r+0x8e>
  406794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406798:	460d      	mov	r5, r1
  40679a:	4680      	mov	r8, r0
  40679c:	f7fd f96c 	bl	403a78 <__malloc_lock>
  4067a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4067a4:	4969      	ldr	r1, [pc, #420]	; (40694c <_free_r+0x1bc>)
  4067a6:	f027 0301 	bic.w	r3, r7, #1
  4067aa:	f1a5 0408 	sub.w	r4, r5, #8
  4067ae:	18e2      	adds	r2, r4, r3
  4067b0:	688e      	ldr	r6, [r1, #8]
  4067b2:	6850      	ldr	r0, [r2, #4]
  4067b4:	42b2      	cmp	r2, r6
  4067b6:	f020 0003 	bic.w	r0, r0, #3
  4067ba:	d05e      	beq.n	40687a <_free_r+0xea>
  4067bc:	07fe      	lsls	r6, r7, #31
  4067be:	6050      	str	r0, [r2, #4]
  4067c0:	d40b      	bmi.n	4067da <_free_r+0x4a>
  4067c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4067c6:	1be4      	subs	r4, r4, r7
  4067c8:	f101 0e08 	add.w	lr, r1, #8
  4067cc:	68a5      	ldr	r5, [r4, #8]
  4067ce:	4575      	cmp	r5, lr
  4067d0:	443b      	add	r3, r7
  4067d2:	d06d      	beq.n	4068b0 <_free_r+0x120>
  4067d4:	68e7      	ldr	r7, [r4, #12]
  4067d6:	60ef      	str	r7, [r5, #12]
  4067d8:	60bd      	str	r5, [r7, #8]
  4067da:	1815      	adds	r5, r2, r0
  4067dc:	686d      	ldr	r5, [r5, #4]
  4067de:	07ed      	lsls	r5, r5, #31
  4067e0:	d53e      	bpl.n	406860 <_free_r+0xd0>
  4067e2:	f043 0201 	orr.w	r2, r3, #1
  4067e6:	6062      	str	r2, [r4, #4]
  4067e8:	50e3      	str	r3, [r4, r3]
  4067ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4067ee:	d217      	bcs.n	406820 <_free_r+0x90>
  4067f0:	08db      	lsrs	r3, r3, #3
  4067f2:	1c58      	adds	r0, r3, #1
  4067f4:	109a      	asrs	r2, r3, #2
  4067f6:	684d      	ldr	r5, [r1, #4]
  4067f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4067fc:	60a7      	str	r7, [r4, #8]
  4067fe:	2301      	movs	r3, #1
  406800:	4093      	lsls	r3, r2
  406802:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406806:	432b      	orrs	r3, r5
  406808:	3a08      	subs	r2, #8
  40680a:	60e2      	str	r2, [r4, #12]
  40680c:	604b      	str	r3, [r1, #4]
  40680e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406812:	60fc      	str	r4, [r7, #12]
  406814:	4640      	mov	r0, r8
  406816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40681a:	f7fd b933 	b.w	403a84 <__malloc_unlock>
  40681e:	4770      	bx	lr
  406820:	0a5a      	lsrs	r2, r3, #9
  406822:	2a04      	cmp	r2, #4
  406824:	d852      	bhi.n	4068cc <_free_r+0x13c>
  406826:	099a      	lsrs	r2, r3, #6
  406828:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40682c:	00ff      	lsls	r7, r7, #3
  40682e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406832:	19c8      	adds	r0, r1, r7
  406834:	59ca      	ldr	r2, [r1, r7]
  406836:	3808      	subs	r0, #8
  406838:	4290      	cmp	r0, r2
  40683a:	d04f      	beq.n	4068dc <_free_r+0x14c>
  40683c:	6851      	ldr	r1, [r2, #4]
  40683e:	f021 0103 	bic.w	r1, r1, #3
  406842:	428b      	cmp	r3, r1
  406844:	d232      	bcs.n	4068ac <_free_r+0x11c>
  406846:	6892      	ldr	r2, [r2, #8]
  406848:	4290      	cmp	r0, r2
  40684a:	d1f7      	bne.n	40683c <_free_r+0xac>
  40684c:	68c3      	ldr	r3, [r0, #12]
  40684e:	60a0      	str	r0, [r4, #8]
  406850:	60e3      	str	r3, [r4, #12]
  406852:	609c      	str	r4, [r3, #8]
  406854:	60c4      	str	r4, [r0, #12]
  406856:	4640      	mov	r0, r8
  406858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40685c:	f7fd b912 	b.w	403a84 <__malloc_unlock>
  406860:	6895      	ldr	r5, [r2, #8]
  406862:	4f3b      	ldr	r7, [pc, #236]	; (406950 <_free_r+0x1c0>)
  406864:	42bd      	cmp	r5, r7
  406866:	4403      	add	r3, r0
  406868:	d040      	beq.n	4068ec <_free_r+0x15c>
  40686a:	68d0      	ldr	r0, [r2, #12]
  40686c:	60e8      	str	r0, [r5, #12]
  40686e:	f043 0201 	orr.w	r2, r3, #1
  406872:	6085      	str	r5, [r0, #8]
  406874:	6062      	str	r2, [r4, #4]
  406876:	50e3      	str	r3, [r4, r3]
  406878:	e7b7      	b.n	4067ea <_free_r+0x5a>
  40687a:	07ff      	lsls	r7, r7, #31
  40687c:	4403      	add	r3, r0
  40687e:	d407      	bmi.n	406890 <_free_r+0x100>
  406880:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406884:	1aa4      	subs	r4, r4, r2
  406886:	4413      	add	r3, r2
  406888:	68a0      	ldr	r0, [r4, #8]
  40688a:	68e2      	ldr	r2, [r4, #12]
  40688c:	60c2      	str	r2, [r0, #12]
  40688e:	6090      	str	r0, [r2, #8]
  406890:	4a30      	ldr	r2, [pc, #192]	; (406954 <_free_r+0x1c4>)
  406892:	6812      	ldr	r2, [r2, #0]
  406894:	f043 0001 	orr.w	r0, r3, #1
  406898:	4293      	cmp	r3, r2
  40689a:	6060      	str	r0, [r4, #4]
  40689c:	608c      	str	r4, [r1, #8]
  40689e:	d3b9      	bcc.n	406814 <_free_r+0x84>
  4068a0:	4b2d      	ldr	r3, [pc, #180]	; (406958 <_free_r+0x1c8>)
  4068a2:	4640      	mov	r0, r8
  4068a4:	6819      	ldr	r1, [r3, #0]
  4068a6:	f7ff ff23 	bl	4066f0 <_malloc_trim_r>
  4068aa:	e7b3      	b.n	406814 <_free_r+0x84>
  4068ac:	4610      	mov	r0, r2
  4068ae:	e7cd      	b.n	40684c <_free_r+0xbc>
  4068b0:	1811      	adds	r1, r2, r0
  4068b2:	6849      	ldr	r1, [r1, #4]
  4068b4:	07c9      	lsls	r1, r1, #31
  4068b6:	d444      	bmi.n	406942 <_free_r+0x1b2>
  4068b8:	6891      	ldr	r1, [r2, #8]
  4068ba:	68d2      	ldr	r2, [r2, #12]
  4068bc:	60ca      	str	r2, [r1, #12]
  4068be:	4403      	add	r3, r0
  4068c0:	f043 0001 	orr.w	r0, r3, #1
  4068c4:	6091      	str	r1, [r2, #8]
  4068c6:	6060      	str	r0, [r4, #4]
  4068c8:	50e3      	str	r3, [r4, r3]
  4068ca:	e7a3      	b.n	406814 <_free_r+0x84>
  4068cc:	2a14      	cmp	r2, #20
  4068ce:	d816      	bhi.n	4068fe <_free_r+0x16e>
  4068d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4068d4:	00ff      	lsls	r7, r7, #3
  4068d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4068da:	e7aa      	b.n	406832 <_free_r+0xa2>
  4068dc:	10aa      	asrs	r2, r5, #2
  4068de:	2301      	movs	r3, #1
  4068e0:	684d      	ldr	r5, [r1, #4]
  4068e2:	4093      	lsls	r3, r2
  4068e4:	432b      	orrs	r3, r5
  4068e6:	604b      	str	r3, [r1, #4]
  4068e8:	4603      	mov	r3, r0
  4068ea:	e7b0      	b.n	40684e <_free_r+0xbe>
  4068ec:	f043 0201 	orr.w	r2, r3, #1
  4068f0:	614c      	str	r4, [r1, #20]
  4068f2:	610c      	str	r4, [r1, #16]
  4068f4:	60e5      	str	r5, [r4, #12]
  4068f6:	60a5      	str	r5, [r4, #8]
  4068f8:	6062      	str	r2, [r4, #4]
  4068fa:	50e3      	str	r3, [r4, r3]
  4068fc:	e78a      	b.n	406814 <_free_r+0x84>
  4068fe:	2a54      	cmp	r2, #84	; 0x54
  406900:	d806      	bhi.n	406910 <_free_r+0x180>
  406902:	0b1a      	lsrs	r2, r3, #12
  406904:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406908:	00ff      	lsls	r7, r7, #3
  40690a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40690e:	e790      	b.n	406832 <_free_r+0xa2>
  406910:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406914:	d806      	bhi.n	406924 <_free_r+0x194>
  406916:	0bda      	lsrs	r2, r3, #15
  406918:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40691c:	00ff      	lsls	r7, r7, #3
  40691e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406922:	e786      	b.n	406832 <_free_r+0xa2>
  406924:	f240 5054 	movw	r0, #1364	; 0x554
  406928:	4282      	cmp	r2, r0
  40692a:	d806      	bhi.n	40693a <_free_r+0x1aa>
  40692c:	0c9a      	lsrs	r2, r3, #18
  40692e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406932:	00ff      	lsls	r7, r7, #3
  406934:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406938:	e77b      	b.n	406832 <_free_r+0xa2>
  40693a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40693e:	257e      	movs	r5, #126	; 0x7e
  406940:	e777      	b.n	406832 <_free_r+0xa2>
  406942:	f043 0101 	orr.w	r1, r3, #1
  406946:	6061      	str	r1, [r4, #4]
  406948:	6013      	str	r3, [r2, #0]
  40694a:	e763      	b.n	406814 <_free_r+0x84>
  40694c:	20400438 	.word	0x20400438
  406950:	20400440 	.word	0x20400440
  406954:	20400844 	.word	0x20400844
  406958:	20400bc4 	.word	0x20400bc4

0040695c <__sfvwrite_r>:
  40695c:	6893      	ldr	r3, [r2, #8]
  40695e:	2b00      	cmp	r3, #0
  406960:	d073      	beq.n	406a4a <__sfvwrite_r+0xee>
  406962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406966:	898b      	ldrh	r3, [r1, #12]
  406968:	b083      	sub	sp, #12
  40696a:	460c      	mov	r4, r1
  40696c:	0719      	lsls	r1, r3, #28
  40696e:	9000      	str	r0, [sp, #0]
  406970:	4616      	mov	r6, r2
  406972:	d526      	bpl.n	4069c2 <__sfvwrite_r+0x66>
  406974:	6922      	ldr	r2, [r4, #16]
  406976:	b322      	cbz	r2, 4069c2 <__sfvwrite_r+0x66>
  406978:	f013 0002 	ands.w	r0, r3, #2
  40697c:	6835      	ldr	r5, [r6, #0]
  40697e:	d02c      	beq.n	4069da <__sfvwrite_r+0x7e>
  406980:	f04f 0900 	mov.w	r9, #0
  406984:	4fb0      	ldr	r7, [pc, #704]	; (406c48 <__sfvwrite_r+0x2ec>)
  406986:	46c8      	mov	r8, r9
  406988:	46b2      	mov	sl, r6
  40698a:	45b8      	cmp	r8, r7
  40698c:	4643      	mov	r3, r8
  40698e:	464a      	mov	r2, r9
  406990:	bf28      	it	cs
  406992:	463b      	movcs	r3, r7
  406994:	9800      	ldr	r0, [sp, #0]
  406996:	f1b8 0f00 	cmp.w	r8, #0
  40699a:	d050      	beq.n	406a3e <__sfvwrite_r+0xe2>
  40699c:	69e1      	ldr	r1, [r4, #28]
  40699e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4069a0:	47b0      	blx	r6
  4069a2:	2800      	cmp	r0, #0
  4069a4:	dd58      	ble.n	406a58 <__sfvwrite_r+0xfc>
  4069a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4069aa:	1a1b      	subs	r3, r3, r0
  4069ac:	4481      	add	r9, r0
  4069ae:	eba8 0800 	sub.w	r8, r8, r0
  4069b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4069b6:	2b00      	cmp	r3, #0
  4069b8:	d1e7      	bne.n	40698a <__sfvwrite_r+0x2e>
  4069ba:	2000      	movs	r0, #0
  4069bc:	b003      	add	sp, #12
  4069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069c2:	4621      	mov	r1, r4
  4069c4:	9800      	ldr	r0, [sp, #0]
  4069c6:	f7fe fd17 	bl	4053f8 <__swsetup_r>
  4069ca:	2800      	cmp	r0, #0
  4069cc:	f040 8133 	bne.w	406c36 <__sfvwrite_r+0x2da>
  4069d0:	89a3      	ldrh	r3, [r4, #12]
  4069d2:	6835      	ldr	r5, [r6, #0]
  4069d4:	f013 0002 	ands.w	r0, r3, #2
  4069d8:	d1d2      	bne.n	406980 <__sfvwrite_r+0x24>
  4069da:	f013 0901 	ands.w	r9, r3, #1
  4069de:	d145      	bne.n	406a6c <__sfvwrite_r+0x110>
  4069e0:	464f      	mov	r7, r9
  4069e2:	9601      	str	r6, [sp, #4]
  4069e4:	b337      	cbz	r7, 406a34 <__sfvwrite_r+0xd8>
  4069e6:	059a      	lsls	r2, r3, #22
  4069e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4069ec:	f140 8083 	bpl.w	406af6 <__sfvwrite_r+0x19a>
  4069f0:	4547      	cmp	r7, r8
  4069f2:	46c3      	mov	fp, r8
  4069f4:	f0c0 80ab 	bcc.w	406b4e <__sfvwrite_r+0x1f2>
  4069f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4069fc:	f040 80ac 	bne.w	406b58 <__sfvwrite_r+0x1fc>
  406a00:	6820      	ldr	r0, [r4, #0]
  406a02:	46ba      	mov	sl, r7
  406a04:	465a      	mov	r2, fp
  406a06:	4649      	mov	r1, r9
  406a08:	f000 fa2a 	bl	406e60 <memmove>
  406a0c:	68a2      	ldr	r2, [r4, #8]
  406a0e:	6823      	ldr	r3, [r4, #0]
  406a10:	eba2 0208 	sub.w	r2, r2, r8
  406a14:	445b      	add	r3, fp
  406a16:	60a2      	str	r2, [r4, #8]
  406a18:	6023      	str	r3, [r4, #0]
  406a1a:	9a01      	ldr	r2, [sp, #4]
  406a1c:	6893      	ldr	r3, [r2, #8]
  406a1e:	eba3 030a 	sub.w	r3, r3, sl
  406a22:	44d1      	add	r9, sl
  406a24:	eba7 070a 	sub.w	r7, r7, sl
  406a28:	6093      	str	r3, [r2, #8]
  406a2a:	2b00      	cmp	r3, #0
  406a2c:	d0c5      	beq.n	4069ba <__sfvwrite_r+0x5e>
  406a2e:	89a3      	ldrh	r3, [r4, #12]
  406a30:	2f00      	cmp	r7, #0
  406a32:	d1d8      	bne.n	4069e6 <__sfvwrite_r+0x8a>
  406a34:	f8d5 9000 	ldr.w	r9, [r5]
  406a38:	686f      	ldr	r7, [r5, #4]
  406a3a:	3508      	adds	r5, #8
  406a3c:	e7d2      	b.n	4069e4 <__sfvwrite_r+0x88>
  406a3e:	f8d5 9000 	ldr.w	r9, [r5]
  406a42:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406a46:	3508      	adds	r5, #8
  406a48:	e79f      	b.n	40698a <__sfvwrite_r+0x2e>
  406a4a:	2000      	movs	r0, #0
  406a4c:	4770      	bx	lr
  406a4e:	4621      	mov	r1, r4
  406a50:	9800      	ldr	r0, [sp, #0]
  406a52:	f7ff fda3 	bl	40659c <_fflush_r>
  406a56:	b370      	cbz	r0, 406ab6 <__sfvwrite_r+0x15a>
  406a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a60:	f04f 30ff 	mov.w	r0, #4294967295
  406a64:	81a3      	strh	r3, [r4, #12]
  406a66:	b003      	add	sp, #12
  406a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a6c:	4681      	mov	r9, r0
  406a6e:	4633      	mov	r3, r6
  406a70:	464e      	mov	r6, r9
  406a72:	46a8      	mov	r8, r5
  406a74:	469a      	mov	sl, r3
  406a76:	464d      	mov	r5, r9
  406a78:	b34e      	cbz	r6, 406ace <__sfvwrite_r+0x172>
  406a7a:	b380      	cbz	r0, 406ade <__sfvwrite_r+0x182>
  406a7c:	6820      	ldr	r0, [r4, #0]
  406a7e:	6923      	ldr	r3, [r4, #16]
  406a80:	6962      	ldr	r2, [r4, #20]
  406a82:	45b1      	cmp	r9, r6
  406a84:	46cb      	mov	fp, r9
  406a86:	bf28      	it	cs
  406a88:	46b3      	movcs	fp, r6
  406a8a:	4298      	cmp	r0, r3
  406a8c:	465f      	mov	r7, fp
  406a8e:	d904      	bls.n	406a9a <__sfvwrite_r+0x13e>
  406a90:	68a3      	ldr	r3, [r4, #8]
  406a92:	4413      	add	r3, r2
  406a94:	459b      	cmp	fp, r3
  406a96:	f300 80a6 	bgt.w	406be6 <__sfvwrite_r+0x28a>
  406a9a:	4593      	cmp	fp, r2
  406a9c:	db4b      	blt.n	406b36 <__sfvwrite_r+0x1da>
  406a9e:	4613      	mov	r3, r2
  406aa0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406aa2:	69e1      	ldr	r1, [r4, #28]
  406aa4:	9800      	ldr	r0, [sp, #0]
  406aa6:	462a      	mov	r2, r5
  406aa8:	47b8      	blx	r7
  406aaa:	1e07      	subs	r7, r0, #0
  406aac:	ddd4      	ble.n	406a58 <__sfvwrite_r+0xfc>
  406aae:	ebb9 0907 	subs.w	r9, r9, r7
  406ab2:	d0cc      	beq.n	406a4e <__sfvwrite_r+0xf2>
  406ab4:	2001      	movs	r0, #1
  406ab6:	f8da 3008 	ldr.w	r3, [sl, #8]
  406aba:	1bdb      	subs	r3, r3, r7
  406abc:	443d      	add	r5, r7
  406abe:	1bf6      	subs	r6, r6, r7
  406ac0:	f8ca 3008 	str.w	r3, [sl, #8]
  406ac4:	2b00      	cmp	r3, #0
  406ac6:	f43f af78 	beq.w	4069ba <__sfvwrite_r+0x5e>
  406aca:	2e00      	cmp	r6, #0
  406acc:	d1d5      	bne.n	406a7a <__sfvwrite_r+0x11e>
  406ace:	f108 0308 	add.w	r3, r8, #8
  406ad2:	e913 0060 	ldmdb	r3, {r5, r6}
  406ad6:	4698      	mov	r8, r3
  406ad8:	3308      	adds	r3, #8
  406ada:	2e00      	cmp	r6, #0
  406adc:	d0f9      	beq.n	406ad2 <__sfvwrite_r+0x176>
  406ade:	4632      	mov	r2, r6
  406ae0:	210a      	movs	r1, #10
  406ae2:	4628      	mov	r0, r5
  406ae4:	f000 f96c 	bl	406dc0 <memchr>
  406ae8:	2800      	cmp	r0, #0
  406aea:	f000 80a1 	beq.w	406c30 <__sfvwrite_r+0x2d4>
  406aee:	3001      	adds	r0, #1
  406af0:	eba0 0905 	sub.w	r9, r0, r5
  406af4:	e7c2      	b.n	406a7c <__sfvwrite_r+0x120>
  406af6:	6820      	ldr	r0, [r4, #0]
  406af8:	6923      	ldr	r3, [r4, #16]
  406afa:	4298      	cmp	r0, r3
  406afc:	d802      	bhi.n	406b04 <__sfvwrite_r+0x1a8>
  406afe:	6963      	ldr	r3, [r4, #20]
  406b00:	429f      	cmp	r7, r3
  406b02:	d25d      	bcs.n	406bc0 <__sfvwrite_r+0x264>
  406b04:	45b8      	cmp	r8, r7
  406b06:	bf28      	it	cs
  406b08:	46b8      	movcs	r8, r7
  406b0a:	4642      	mov	r2, r8
  406b0c:	4649      	mov	r1, r9
  406b0e:	f000 f9a7 	bl	406e60 <memmove>
  406b12:	68a3      	ldr	r3, [r4, #8]
  406b14:	6822      	ldr	r2, [r4, #0]
  406b16:	eba3 0308 	sub.w	r3, r3, r8
  406b1a:	4442      	add	r2, r8
  406b1c:	60a3      	str	r3, [r4, #8]
  406b1e:	6022      	str	r2, [r4, #0]
  406b20:	b10b      	cbz	r3, 406b26 <__sfvwrite_r+0x1ca>
  406b22:	46c2      	mov	sl, r8
  406b24:	e779      	b.n	406a1a <__sfvwrite_r+0xbe>
  406b26:	4621      	mov	r1, r4
  406b28:	9800      	ldr	r0, [sp, #0]
  406b2a:	f7ff fd37 	bl	40659c <_fflush_r>
  406b2e:	2800      	cmp	r0, #0
  406b30:	d192      	bne.n	406a58 <__sfvwrite_r+0xfc>
  406b32:	46c2      	mov	sl, r8
  406b34:	e771      	b.n	406a1a <__sfvwrite_r+0xbe>
  406b36:	465a      	mov	r2, fp
  406b38:	4629      	mov	r1, r5
  406b3a:	f000 f991 	bl	406e60 <memmove>
  406b3e:	68a2      	ldr	r2, [r4, #8]
  406b40:	6823      	ldr	r3, [r4, #0]
  406b42:	eba2 020b 	sub.w	r2, r2, fp
  406b46:	445b      	add	r3, fp
  406b48:	60a2      	str	r2, [r4, #8]
  406b4a:	6023      	str	r3, [r4, #0]
  406b4c:	e7af      	b.n	406aae <__sfvwrite_r+0x152>
  406b4e:	6820      	ldr	r0, [r4, #0]
  406b50:	46b8      	mov	r8, r7
  406b52:	46ba      	mov	sl, r7
  406b54:	46bb      	mov	fp, r7
  406b56:	e755      	b.n	406a04 <__sfvwrite_r+0xa8>
  406b58:	6962      	ldr	r2, [r4, #20]
  406b5a:	6820      	ldr	r0, [r4, #0]
  406b5c:	6921      	ldr	r1, [r4, #16]
  406b5e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406b62:	eba0 0a01 	sub.w	sl, r0, r1
  406b66:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406b6a:	f10a 0001 	add.w	r0, sl, #1
  406b6e:	ea4f 0868 	mov.w	r8, r8, asr #1
  406b72:	4438      	add	r0, r7
  406b74:	4540      	cmp	r0, r8
  406b76:	4642      	mov	r2, r8
  406b78:	bf84      	itt	hi
  406b7a:	4680      	movhi	r8, r0
  406b7c:	4642      	movhi	r2, r8
  406b7e:	055b      	lsls	r3, r3, #21
  406b80:	d544      	bpl.n	406c0c <__sfvwrite_r+0x2b0>
  406b82:	4611      	mov	r1, r2
  406b84:	9800      	ldr	r0, [sp, #0]
  406b86:	f7fc fbdf 	bl	403348 <_malloc_r>
  406b8a:	4683      	mov	fp, r0
  406b8c:	2800      	cmp	r0, #0
  406b8e:	d055      	beq.n	406c3c <__sfvwrite_r+0x2e0>
  406b90:	4652      	mov	r2, sl
  406b92:	6921      	ldr	r1, [r4, #16]
  406b94:	f7fc fe88 	bl	4038a8 <memcpy>
  406b98:	89a3      	ldrh	r3, [r4, #12]
  406b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406ba2:	81a3      	strh	r3, [r4, #12]
  406ba4:	eb0b 000a 	add.w	r0, fp, sl
  406ba8:	eba8 030a 	sub.w	r3, r8, sl
  406bac:	f8c4 b010 	str.w	fp, [r4, #16]
  406bb0:	f8c4 8014 	str.w	r8, [r4, #20]
  406bb4:	6020      	str	r0, [r4, #0]
  406bb6:	60a3      	str	r3, [r4, #8]
  406bb8:	46b8      	mov	r8, r7
  406bba:	46ba      	mov	sl, r7
  406bbc:	46bb      	mov	fp, r7
  406bbe:	e721      	b.n	406a04 <__sfvwrite_r+0xa8>
  406bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406bc4:	42b9      	cmp	r1, r7
  406bc6:	bf28      	it	cs
  406bc8:	4639      	movcs	r1, r7
  406bca:	464a      	mov	r2, r9
  406bcc:	fb91 f1f3 	sdiv	r1, r1, r3
  406bd0:	9800      	ldr	r0, [sp, #0]
  406bd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406bd4:	fb03 f301 	mul.w	r3, r3, r1
  406bd8:	69e1      	ldr	r1, [r4, #28]
  406bda:	47b0      	blx	r6
  406bdc:	f1b0 0a00 	subs.w	sl, r0, #0
  406be0:	f73f af1b 	bgt.w	406a1a <__sfvwrite_r+0xbe>
  406be4:	e738      	b.n	406a58 <__sfvwrite_r+0xfc>
  406be6:	461a      	mov	r2, r3
  406be8:	4629      	mov	r1, r5
  406bea:	9301      	str	r3, [sp, #4]
  406bec:	f000 f938 	bl	406e60 <memmove>
  406bf0:	6822      	ldr	r2, [r4, #0]
  406bf2:	9b01      	ldr	r3, [sp, #4]
  406bf4:	9800      	ldr	r0, [sp, #0]
  406bf6:	441a      	add	r2, r3
  406bf8:	6022      	str	r2, [r4, #0]
  406bfa:	4621      	mov	r1, r4
  406bfc:	f7ff fcce 	bl	40659c <_fflush_r>
  406c00:	9b01      	ldr	r3, [sp, #4]
  406c02:	2800      	cmp	r0, #0
  406c04:	f47f af28 	bne.w	406a58 <__sfvwrite_r+0xfc>
  406c08:	461f      	mov	r7, r3
  406c0a:	e750      	b.n	406aae <__sfvwrite_r+0x152>
  406c0c:	9800      	ldr	r0, [sp, #0]
  406c0e:	f000 fc85 	bl	40751c <_realloc_r>
  406c12:	4683      	mov	fp, r0
  406c14:	2800      	cmp	r0, #0
  406c16:	d1c5      	bne.n	406ba4 <__sfvwrite_r+0x248>
  406c18:	9d00      	ldr	r5, [sp, #0]
  406c1a:	6921      	ldr	r1, [r4, #16]
  406c1c:	4628      	mov	r0, r5
  406c1e:	f7ff fdb7 	bl	406790 <_free_r>
  406c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c26:	220c      	movs	r2, #12
  406c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406c2c:	602a      	str	r2, [r5, #0]
  406c2e:	e715      	b.n	406a5c <__sfvwrite_r+0x100>
  406c30:	f106 0901 	add.w	r9, r6, #1
  406c34:	e722      	b.n	406a7c <__sfvwrite_r+0x120>
  406c36:	f04f 30ff 	mov.w	r0, #4294967295
  406c3a:	e6bf      	b.n	4069bc <__sfvwrite_r+0x60>
  406c3c:	9a00      	ldr	r2, [sp, #0]
  406c3e:	230c      	movs	r3, #12
  406c40:	6013      	str	r3, [r2, #0]
  406c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c46:	e709      	b.n	406a5c <__sfvwrite_r+0x100>
  406c48:	7ffffc00 	.word	0x7ffffc00

00406c4c <_fwalk_reent>:
  406c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406c50:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406c54:	d01f      	beq.n	406c96 <_fwalk_reent+0x4a>
  406c56:	4688      	mov	r8, r1
  406c58:	4606      	mov	r6, r0
  406c5a:	f04f 0900 	mov.w	r9, #0
  406c5e:	687d      	ldr	r5, [r7, #4]
  406c60:	68bc      	ldr	r4, [r7, #8]
  406c62:	3d01      	subs	r5, #1
  406c64:	d411      	bmi.n	406c8a <_fwalk_reent+0x3e>
  406c66:	89a3      	ldrh	r3, [r4, #12]
  406c68:	2b01      	cmp	r3, #1
  406c6a:	f105 35ff 	add.w	r5, r5, #4294967295
  406c6e:	d908      	bls.n	406c82 <_fwalk_reent+0x36>
  406c70:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406c74:	3301      	adds	r3, #1
  406c76:	4621      	mov	r1, r4
  406c78:	4630      	mov	r0, r6
  406c7a:	d002      	beq.n	406c82 <_fwalk_reent+0x36>
  406c7c:	47c0      	blx	r8
  406c7e:	ea49 0900 	orr.w	r9, r9, r0
  406c82:	1c6b      	adds	r3, r5, #1
  406c84:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406c88:	d1ed      	bne.n	406c66 <_fwalk_reent+0x1a>
  406c8a:	683f      	ldr	r7, [r7, #0]
  406c8c:	2f00      	cmp	r7, #0
  406c8e:	d1e6      	bne.n	406c5e <_fwalk_reent+0x12>
  406c90:	4648      	mov	r0, r9
  406c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c96:	46b9      	mov	r9, r7
  406c98:	4648      	mov	r0, r9
  406c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c9e:	bf00      	nop

00406ca0 <_localeconv_r>:
  406ca0:	4a04      	ldr	r2, [pc, #16]	; (406cb4 <_localeconv_r+0x14>)
  406ca2:	4b05      	ldr	r3, [pc, #20]	; (406cb8 <_localeconv_r+0x18>)
  406ca4:	6812      	ldr	r2, [r2, #0]
  406ca6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406ca8:	2800      	cmp	r0, #0
  406caa:	bf08      	it	eq
  406cac:	4618      	moveq	r0, r3
  406cae:	30f0      	adds	r0, #240	; 0xf0
  406cb0:	4770      	bx	lr
  406cb2:	bf00      	nop
  406cb4:	2040000c 	.word	0x2040000c
  406cb8:	2040084c 	.word	0x2040084c

00406cbc <__retarget_lock_init_recursive>:
  406cbc:	4770      	bx	lr
  406cbe:	bf00      	nop

00406cc0 <__retarget_lock_close_recursive>:
  406cc0:	4770      	bx	lr
  406cc2:	bf00      	nop

00406cc4 <__retarget_lock_acquire_recursive>:
  406cc4:	4770      	bx	lr
  406cc6:	bf00      	nop

00406cc8 <__retarget_lock_release_recursive>:
  406cc8:	4770      	bx	lr
  406cca:	bf00      	nop

00406ccc <__swhatbuf_r>:
  406ccc:	b570      	push	{r4, r5, r6, lr}
  406cce:	460c      	mov	r4, r1
  406cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406cd4:	2900      	cmp	r1, #0
  406cd6:	b090      	sub	sp, #64	; 0x40
  406cd8:	4615      	mov	r5, r2
  406cda:	461e      	mov	r6, r3
  406cdc:	db14      	blt.n	406d08 <__swhatbuf_r+0x3c>
  406cde:	aa01      	add	r2, sp, #4
  406ce0:	f000 fff0 	bl	407cc4 <_fstat_r>
  406ce4:	2800      	cmp	r0, #0
  406ce6:	db0f      	blt.n	406d08 <__swhatbuf_r+0x3c>
  406ce8:	9a02      	ldr	r2, [sp, #8]
  406cea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406cee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406cf2:	fab2 f282 	clz	r2, r2
  406cf6:	0952      	lsrs	r2, r2, #5
  406cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406cfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406d00:	6032      	str	r2, [r6, #0]
  406d02:	602b      	str	r3, [r5, #0]
  406d04:	b010      	add	sp, #64	; 0x40
  406d06:	bd70      	pop	{r4, r5, r6, pc}
  406d08:	89a2      	ldrh	r2, [r4, #12]
  406d0a:	2300      	movs	r3, #0
  406d0c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406d10:	6033      	str	r3, [r6, #0]
  406d12:	d004      	beq.n	406d1e <__swhatbuf_r+0x52>
  406d14:	2240      	movs	r2, #64	; 0x40
  406d16:	4618      	mov	r0, r3
  406d18:	602a      	str	r2, [r5, #0]
  406d1a:	b010      	add	sp, #64	; 0x40
  406d1c:	bd70      	pop	{r4, r5, r6, pc}
  406d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406d22:	602b      	str	r3, [r5, #0]
  406d24:	b010      	add	sp, #64	; 0x40
  406d26:	bd70      	pop	{r4, r5, r6, pc}

00406d28 <__smakebuf_r>:
  406d28:	898a      	ldrh	r2, [r1, #12]
  406d2a:	0792      	lsls	r2, r2, #30
  406d2c:	460b      	mov	r3, r1
  406d2e:	d506      	bpl.n	406d3e <__smakebuf_r+0x16>
  406d30:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406d34:	2101      	movs	r1, #1
  406d36:	601a      	str	r2, [r3, #0]
  406d38:	611a      	str	r2, [r3, #16]
  406d3a:	6159      	str	r1, [r3, #20]
  406d3c:	4770      	bx	lr
  406d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406d40:	b083      	sub	sp, #12
  406d42:	ab01      	add	r3, sp, #4
  406d44:	466a      	mov	r2, sp
  406d46:	460c      	mov	r4, r1
  406d48:	4606      	mov	r6, r0
  406d4a:	f7ff ffbf 	bl	406ccc <__swhatbuf_r>
  406d4e:	9900      	ldr	r1, [sp, #0]
  406d50:	4605      	mov	r5, r0
  406d52:	4630      	mov	r0, r6
  406d54:	f7fc faf8 	bl	403348 <_malloc_r>
  406d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d5c:	b1d8      	cbz	r0, 406d96 <__smakebuf_r+0x6e>
  406d5e:	9a01      	ldr	r2, [sp, #4]
  406d60:	4f15      	ldr	r7, [pc, #84]	; (406db8 <__smakebuf_r+0x90>)
  406d62:	9900      	ldr	r1, [sp, #0]
  406d64:	63f7      	str	r7, [r6, #60]	; 0x3c
  406d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406d6a:	81a3      	strh	r3, [r4, #12]
  406d6c:	6020      	str	r0, [r4, #0]
  406d6e:	6120      	str	r0, [r4, #16]
  406d70:	6161      	str	r1, [r4, #20]
  406d72:	b91a      	cbnz	r2, 406d7c <__smakebuf_r+0x54>
  406d74:	432b      	orrs	r3, r5
  406d76:	81a3      	strh	r3, [r4, #12]
  406d78:	b003      	add	sp, #12
  406d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d7c:	4630      	mov	r0, r6
  406d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406d82:	f000 ffb3 	bl	407cec <_isatty_r>
  406d86:	b1a0      	cbz	r0, 406db2 <__smakebuf_r+0x8a>
  406d88:	89a3      	ldrh	r3, [r4, #12]
  406d8a:	f023 0303 	bic.w	r3, r3, #3
  406d8e:	f043 0301 	orr.w	r3, r3, #1
  406d92:	b21b      	sxth	r3, r3
  406d94:	e7ee      	b.n	406d74 <__smakebuf_r+0x4c>
  406d96:	059a      	lsls	r2, r3, #22
  406d98:	d4ee      	bmi.n	406d78 <__smakebuf_r+0x50>
  406d9a:	f023 0303 	bic.w	r3, r3, #3
  406d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406da2:	f043 0302 	orr.w	r3, r3, #2
  406da6:	2101      	movs	r1, #1
  406da8:	81a3      	strh	r3, [r4, #12]
  406daa:	6022      	str	r2, [r4, #0]
  406dac:	6122      	str	r2, [r4, #16]
  406dae:	6161      	str	r1, [r4, #20]
  406db0:	e7e2      	b.n	406d78 <__smakebuf_r+0x50>
  406db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406db6:	e7dd      	b.n	406d74 <__smakebuf_r+0x4c>
  406db8:	004065f1 	.word	0x004065f1
  406dbc:	00000000 	.word	0x00000000

00406dc0 <memchr>:
  406dc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406dc4:	2a10      	cmp	r2, #16
  406dc6:	db2b      	blt.n	406e20 <memchr+0x60>
  406dc8:	f010 0f07 	tst.w	r0, #7
  406dcc:	d008      	beq.n	406de0 <memchr+0x20>
  406dce:	f810 3b01 	ldrb.w	r3, [r0], #1
  406dd2:	3a01      	subs	r2, #1
  406dd4:	428b      	cmp	r3, r1
  406dd6:	d02d      	beq.n	406e34 <memchr+0x74>
  406dd8:	f010 0f07 	tst.w	r0, #7
  406ddc:	b342      	cbz	r2, 406e30 <memchr+0x70>
  406dde:	d1f6      	bne.n	406dce <memchr+0xe>
  406de0:	b4f0      	push	{r4, r5, r6, r7}
  406de2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406de6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406dea:	f022 0407 	bic.w	r4, r2, #7
  406dee:	f07f 0700 	mvns.w	r7, #0
  406df2:	2300      	movs	r3, #0
  406df4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406df8:	3c08      	subs	r4, #8
  406dfa:	ea85 0501 	eor.w	r5, r5, r1
  406dfe:	ea86 0601 	eor.w	r6, r6, r1
  406e02:	fa85 f547 	uadd8	r5, r5, r7
  406e06:	faa3 f587 	sel	r5, r3, r7
  406e0a:	fa86 f647 	uadd8	r6, r6, r7
  406e0e:	faa5 f687 	sel	r6, r5, r7
  406e12:	b98e      	cbnz	r6, 406e38 <memchr+0x78>
  406e14:	d1ee      	bne.n	406df4 <memchr+0x34>
  406e16:	bcf0      	pop	{r4, r5, r6, r7}
  406e18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406e1c:	f002 0207 	and.w	r2, r2, #7
  406e20:	b132      	cbz	r2, 406e30 <memchr+0x70>
  406e22:	f810 3b01 	ldrb.w	r3, [r0], #1
  406e26:	3a01      	subs	r2, #1
  406e28:	ea83 0301 	eor.w	r3, r3, r1
  406e2c:	b113      	cbz	r3, 406e34 <memchr+0x74>
  406e2e:	d1f8      	bne.n	406e22 <memchr+0x62>
  406e30:	2000      	movs	r0, #0
  406e32:	4770      	bx	lr
  406e34:	3801      	subs	r0, #1
  406e36:	4770      	bx	lr
  406e38:	2d00      	cmp	r5, #0
  406e3a:	bf06      	itte	eq
  406e3c:	4635      	moveq	r5, r6
  406e3e:	3803      	subeq	r0, #3
  406e40:	3807      	subne	r0, #7
  406e42:	f015 0f01 	tst.w	r5, #1
  406e46:	d107      	bne.n	406e58 <memchr+0x98>
  406e48:	3001      	adds	r0, #1
  406e4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406e4e:	bf02      	ittt	eq
  406e50:	3001      	addeq	r0, #1
  406e52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406e56:	3001      	addeq	r0, #1
  406e58:	bcf0      	pop	{r4, r5, r6, r7}
  406e5a:	3801      	subs	r0, #1
  406e5c:	4770      	bx	lr
  406e5e:	bf00      	nop

00406e60 <memmove>:
  406e60:	4288      	cmp	r0, r1
  406e62:	b5f0      	push	{r4, r5, r6, r7, lr}
  406e64:	d90d      	bls.n	406e82 <memmove+0x22>
  406e66:	188b      	adds	r3, r1, r2
  406e68:	4298      	cmp	r0, r3
  406e6a:	d20a      	bcs.n	406e82 <memmove+0x22>
  406e6c:	1884      	adds	r4, r0, r2
  406e6e:	2a00      	cmp	r2, #0
  406e70:	d051      	beq.n	406f16 <memmove+0xb6>
  406e72:	4622      	mov	r2, r4
  406e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406e78:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406e7c:	4299      	cmp	r1, r3
  406e7e:	d1f9      	bne.n	406e74 <memmove+0x14>
  406e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e82:	2a0f      	cmp	r2, #15
  406e84:	d948      	bls.n	406f18 <memmove+0xb8>
  406e86:	ea41 0300 	orr.w	r3, r1, r0
  406e8a:	079b      	lsls	r3, r3, #30
  406e8c:	d146      	bne.n	406f1c <memmove+0xbc>
  406e8e:	f100 0410 	add.w	r4, r0, #16
  406e92:	f101 0310 	add.w	r3, r1, #16
  406e96:	4615      	mov	r5, r2
  406e98:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406e9c:	f844 6c10 	str.w	r6, [r4, #-16]
  406ea0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406ea4:	f844 6c0c 	str.w	r6, [r4, #-12]
  406ea8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406eac:	f844 6c08 	str.w	r6, [r4, #-8]
  406eb0:	3d10      	subs	r5, #16
  406eb2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406eb6:	f844 6c04 	str.w	r6, [r4, #-4]
  406eba:	2d0f      	cmp	r5, #15
  406ebc:	f103 0310 	add.w	r3, r3, #16
  406ec0:	f104 0410 	add.w	r4, r4, #16
  406ec4:	d8e8      	bhi.n	406e98 <memmove+0x38>
  406ec6:	f1a2 0310 	sub.w	r3, r2, #16
  406eca:	f023 030f 	bic.w	r3, r3, #15
  406ece:	f002 0e0f 	and.w	lr, r2, #15
  406ed2:	3310      	adds	r3, #16
  406ed4:	f1be 0f03 	cmp.w	lr, #3
  406ed8:	4419      	add	r1, r3
  406eda:	4403      	add	r3, r0
  406edc:	d921      	bls.n	406f22 <memmove+0xc2>
  406ede:	1f1e      	subs	r6, r3, #4
  406ee0:	460d      	mov	r5, r1
  406ee2:	4674      	mov	r4, lr
  406ee4:	3c04      	subs	r4, #4
  406ee6:	f855 7b04 	ldr.w	r7, [r5], #4
  406eea:	f846 7f04 	str.w	r7, [r6, #4]!
  406eee:	2c03      	cmp	r4, #3
  406ef0:	d8f8      	bhi.n	406ee4 <memmove+0x84>
  406ef2:	f1ae 0404 	sub.w	r4, lr, #4
  406ef6:	f024 0403 	bic.w	r4, r4, #3
  406efa:	3404      	adds	r4, #4
  406efc:	4421      	add	r1, r4
  406efe:	4423      	add	r3, r4
  406f00:	f002 0203 	and.w	r2, r2, #3
  406f04:	b162      	cbz	r2, 406f20 <memmove+0xc0>
  406f06:	3b01      	subs	r3, #1
  406f08:	440a      	add	r2, r1
  406f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406f12:	428a      	cmp	r2, r1
  406f14:	d1f9      	bne.n	406f0a <memmove+0xaa>
  406f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f18:	4603      	mov	r3, r0
  406f1a:	e7f3      	b.n	406f04 <memmove+0xa4>
  406f1c:	4603      	mov	r3, r0
  406f1e:	e7f2      	b.n	406f06 <memmove+0xa6>
  406f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f22:	4672      	mov	r2, lr
  406f24:	e7ee      	b.n	406f04 <memmove+0xa4>
  406f26:	bf00      	nop

00406f28 <_Balloc>:
  406f28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406f2a:	b570      	push	{r4, r5, r6, lr}
  406f2c:	4605      	mov	r5, r0
  406f2e:	460c      	mov	r4, r1
  406f30:	b14b      	cbz	r3, 406f46 <_Balloc+0x1e>
  406f32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406f36:	b180      	cbz	r0, 406f5a <_Balloc+0x32>
  406f38:	6802      	ldr	r2, [r0, #0]
  406f3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406f3e:	2300      	movs	r3, #0
  406f40:	6103      	str	r3, [r0, #16]
  406f42:	60c3      	str	r3, [r0, #12]
  406f44:	bd70      	pop	{r4, r5, r6, pc}
  406f46:	2221      	movs	r2, #33	; 0x21
  406f48:	2104      	movs	r1, #4
  406f4a:	f000 fd93 	bl	407a74 <_calloc_r>
  406f4e:	64e8      	str	r0, [r5, #76]	; 0x4c
  406f50:	4603      	mov	r3, r0
  406f52:	2800      	cmp	r0, #0
  406f54:	d1ed      	bne.n	406f32 <_Balloc+0xa>
  406f56:	2000      	movs	r0, #0
  406f58:	bd70      	pop	{r4, r5, r6, pc}
  406f5a:	2101      	movs	r1, #1
  406f5c:	fa01 f604 	lsl.w	r6, r1, r4
  406f60:	1d72      	adds	r2, r6, #5
  406f62:	4628      	mov	r0, r5
  406f64:	0092      	lsls	r2, r2, #2
  406f66:	f000 fd85 	bl	407a74 <_calloc_r>
  406f6a:	2800      	cmp	r0, #0
  406f6c:	d0f3      	beq.n	406f56 <_Balloc+0x2e>
  406f6e:	6044      	str	r4, [r0, #4]
  406f70:	6086      	str	r6, [r0, #8]
  406f72:	e7e4      	b.n	406f3e <_Balloc+0x16>

00406f74 <_Bfree>:
  406f74:	b131      	cbz	r1, 406f84 <_Bfree+0x10>
  406f76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406f78:	684a      	ldr	r2, [r1, #4]
  406f7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406f7e:	6008      	str	r0, [r1, #0]
  406f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406f84:	4770      	bx	lr
  406f86:	bf00      	nop

00406f88 <__multadd>:
  406f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  406f8a:	690c      	ldr	r4, [r1, #16]
  406f8c:	b083      	sub	sp, #12
  406f8e:	460d      	mov	r5, r1
  406f90:	4606      	mov	r6, r0
  406f92:	f101 0e14 	add.w	lr, r1, #20
  406f96:	2700      	movs	r7, #0
  406f98:	f8de 0000 	ldr.w	r0, [lr]
  406f9c:	b281      	uxth	r1, r0
  406f9e:	fb02 3301 	mla	r3, r2, r1, r3
  406fa2:	0c01      	lsrs	r1, r0, #16
  406fa4:	0c18      	lsrs	r0, r3, #16
  406fa6:	fb02 0101 	mla	r1, r2, r1, r0
  406faa:	b29b      	uxth	r3, r3
  406fac:	3701      	adds	r7, #1
  406fae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406fb2:	42bc      	cmp	r4, r7
  406fb4:	f84e 3b04 	str.w	r3, [lr], #4
  406fb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406fbc:	dcec      	bgt.n	406f98 <__multadd+0x10>
  406fbe:	b13b      	cbz	r3, 406fd0 <__multadd+0x48>
  406fc0:	68aa      	ldr	r2, [r5, #8]
  406fc2:	4294      	cmp	r4, r2
  406fc4:	da07      	bge.n	406fd6 <__multadd+0x4e>
  406fc6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406fca:	3401      	adds	r4, #1
  406fcc:	6153      	str	r3, [r2, #20]
  406fce:	612c      	str	r4, [r5, #16]
  406fd0:	4628      	mov	r0, r5
  406fd2:	b003      	add	sp, #12
  406fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406fd6:	6869      	ldr	r1, [r5, #4]
  406fd8:	9301      	str	r3, [sp, #4]
  406fda:	3101      	adds	r1, #1
  406fdc:	4630      	mov	r0, r6
  406fde:	f7ff ffa3 	bl	406f28 <_Balloc>
  406fe2:	692a      	ldr	r2, [r5, #16]
  406fe4:	3202      	adds	r2, #2
  406fe6:	f105 010c 	add.w	r1, r5, #12
  406fea:	4607      	mov	r7, r0
  406fec:	0092      	lsls	r2, r2, #2
  406fee:	300c      	adds	r0, #12
  406ff0:	f7fc fc5a 	bl	4038a8 <memcpy>
  406ff4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406ff6:	6869      	ldr	r1, [r5, #4]
  406ff8:	9b01      	ldr	r3, [sp, #4]
  406ffa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406ffe:	6028      	str	r0, [r5, #0]
  407000:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407004:	463d      	mov	r5, r7
  407006:	e7de      	b.n	406fc6 <__multadd+0x3e>

00407008 <__hi0bits>:
  407008:	0c02      	lsrs	r2, r0, #16
  40700a:	0412      	lsls	r2, r2, #16
  40700c:	4603      	mov	r3, r0
  40700e:	b9b2      	cbnz	r2, 40703e <__hi0bits+0x36>
  407010:	0403      	lsls	r3, r0, #16
  407012:	2010      	movs	r0, #16
  407014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407018:	bf04      	itt	eq
  40701a:	021b      	lsleq	r3, r3, #8
  40701c:	3008      	addeq	r0, #8
  40701e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407022:	bf04      	itt	eq
  407024:	011b      	lsleq	r3, r3, #4
  407026:	3004      	addeq	r0, #4
  407028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40702c:	bf04      	itt	eq
  40702e:	009b      	lsleq	r3, r3, #2
  407030:	3002      	addeq	r0, #2
  407032:	2b00      	cmp	r3, #0
  407034:	db02      	blt.n	40703c <__hi0bits+0x34>
  407036:	005b      	lsls	r3, r3, #1
  407038:	d403      	bmi.n	407042 <__hi0bits+0x3a>
  40703a:	2020      	movs	r0, #32
  40703c:	4770      	bx	lr
  40703e:	2000      	movs	r0, #0
  407040:	e7e8      	b.n	407014 <__hi0bits+0xc>
  407042:	3001      	adds	r0, #1
  407044:	4770      	bx	lr
  407046:	bf00      	nop

00407048 <__lo0bits>:
  407048:	6803      	ldr	r3, [r0, #0]
  40704a:	f013 0207 	ands.w	r2, r3, #7
  40704e:	4601      	mov	r1, r0
  407050:	d007      	beq.n	407062 <__lo0bits+0x1a>
  407052:	07da      	lsls	r2, r3, #31
  407054:	d421      	bmi.n	40709a <__lo0bits+0x52>
  407056:	0798      	lsls	r0, r3, #30
  407058:	d421      	bmi.n	40709e <__lo0bits+0x56>
  40705a:	089b      	lsrs	r3, r3, #2
  40705c:	600b      	str	r3, [r1, #0]
  40705e:	2002      	movs	r0, #2
  407060:	4770      	bx	lr
  407062:	b298      	uxth	r0, r3
  407064:	b198      	cbz	r0, 40708e <__lo0bits+0x46>
  407066:	4610      	mov	r0, r2
  407068:	f013 0fff 	tst.w	r3, #255	; 0xff
  40706c:	bf04      	itt	eq
  40706e:	0a1b      	lsreq	r3, r3, #8
  407070:	3008      	addeq	r0, #8
  407072:	071a      	lsls	r2, r3, #28
  407074:	bf04      	itt	eq
  407076:	091b      	lsreq	r3, r3, #4
  407078:	3004      	addeq	r0, #4
  40707a:	079a      	lsls	r2, r3, #30
  40707c:	bf04      	itt	eq
  40707e:	089b      	lsreq	r3, r3, #2
  407080:	3002      	addeq	r0, #2
  407082:	07da      	lsls	r2, r3, #31
  407084:	d407      	bmi.n	407096 <__lo0bits+0x4e>
  407086:	085b      	lsrs	r3, r3, #1
  407088:	d104      	bne.n	407094 <__lo0bits+0x4c>
  40708a:	2020      	movs	r0, #32
  40708c:	4770      	bx	lr
  40708e:	0c1b      	lsrs	r3, r3, #16
  407090:	2010      	movs	r0, #16
  407092:	e7e9      	b.n	407068 <__lo0bits+0x20>
  407094:	3001      	adds	r0, #1
  407096:	600b      	str	r3, [r1, #0]
  407098:	4770      	bx	lr
  40709a:	2000      	movs	r0, #0
  40709c:	4770      	bx	lr
  40709e:	085b      	lsrs	r3, r3, #1
  4070a0:	600b      	str	r3, [r1, #0]
  4070a2:	2001      	movs	r0, #1
  4070a4:	4770      	bx	lr
  4070a6:	bf00      	nop

004070a8 <__i2b>:
  4070a8:	b510      	push	{r4, lr}
  4070aa:	460c      	mov	r4, r1
  4070ac:	2101      	movs	r1, #1
  4070ae:	f7ff ff3b 	bl	406f28 <_Balloc>
  4070b2:	2201      	movs	r2, #1
  4070b4:	6144      	str	r4, [r0, #20]
  4070b6:	6102      	str	r2, [r0, #16]
  4070b8:	bd10      	pop	{r4, pc}
  4070ba:	bf00      	nop

004070bc <__multiply>:
  4070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070c0:	690c      	ldr	r4, [r1, #16]
  4070c2:	6915      	ldr	r5, [r2, #16]
  4070c4:	42ac      	cmp	r4, r5
  4070c6:	b083      	sub	sp, #12
  4070c8:	468b      	mov	fp, r1
  4070ca:	4616      	mov	r6, r2
  4070cc:	da04      	bge.n	4070d8 <__multiply+0x1c>
  4070ce:	4622      	mov	r2, r4
  4070d0:	46b3      	mov	fp, r6
  4070d2:	462c      	mov	r4, r5
  4070d4:	460e      	mov	r6, r1
  4070d6:	4615      	mov	r5, r2
  4070d8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4070dc:	f8db 1004 	ldr.w	r1, [fp, #4]
  4070e0:	eb04 0805 	add.w	r8, r4, r5
  4070e4:	4598      	cmp	r8, r3
  4070e6:	bfc8      	it	gt
  4070e8:	3101      	addgt	r1, #1
  4070ea:	f7ff ff1d 	bl	406f28 <_Balloc>
  4070ee:	f100 0914 	add.w	r9, r0, #20
  4070f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4070f6:	45d1      	cmp	r9, sl
  4070f8:	9000      	str	r0, [sp, #0]
  4070fa:	d205      	bcs.n	407108 <__multiply+0x4c>
  4070fc:	464b      	mov	r3, r9
  4070fe:	2100      	movs	r1, #0
  407100:	f843 1b04 	str.w	r1, [r3], #4
  407104:	459a      	cmp	sl, r3
  407106:	d8fb      	bhi.n	407100 <__multiply+0x44>
  407108:	f106 0c14 	add.w	ip, r6, #20
  40710c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407110:	f10b 0b14 	add.w	fp, fp, #20
  407114:	459c      	cmp	ip, r3
  407116:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40711a:	d24c      	bcs.n	4071b6 <__multiply+0xfa>
  40711c:	f8cd a004 	str.w	sl, [sp, #4]
  407120:	469a      	mov	sl, r3
  407122:	f8dc 5000 	ldr.w	r5, [ip]
  407126:	b2af      	uxth	r7, r5
  407128:	b1ef      	cbz	r7, 407166 <__multiply+0xaa>
  40712a:	2100      	movs	r1, #0
  40712c:	464d      	mov	r5, r9
  40712e:	465e      	mov	r6, fp
  407130:	460c      	mov	r4, r1
  407132:	f856 2b04 	ldr.w	r2, [r6], #4
  407136:	6828      	ldr	r0, [r5, #0]
  407138:	b293      	uxth	r3, r2
  40713a:	b281      	uxth	r1, r0
  40713c:	fb07 1303 	mla	r3, r7, r3, r1
  407140:	0c12      	lsrs	r2, r2, #16
  407142:	0c01      	lsrs	r1, r0, #16
  407144:	4423      	add	r3, r4
  407146:	fb07 1102 	mla	r1, r7, r2, r1
  40714a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40714e:	b29b      	uxth	r3, r3
  407150:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407154:	45b6      	cmp	lr, r6
  407156:	f845 3b04 	str.w	r3, [r5], #4
  40715a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40715e:	d8e8      	bhi.n	407132 <__multiply+0x76>
  407160:	602c      	str	r4, [r5, #0]
  407162:	f8dc 5000 	ldr.w	r5, [ip]
  407166:	0c2d      	lsrs	r5, r5, #16
  407168:	d01d      	beq.n	4071a6 <__multiply+0xea>
  40716a:	f8d9 3000 	ldr.w	r3, [r9]
  40716e:	4648      	mov	r0, r9
  407170:	461c      	mov	r4, r3
  407172:	4659      	mov	r1, fp
  407174:	2200      	movs	r2, #0
  407176:	880e      	ldrh	r6, [r1, #0]
  407178:	0c24      	lsrs	r4, r4, #16
  40717a:	fb05 4406 	mla	r4, r5, r6, r4
  40717e:	4422      	add	r2, r4
  407180:	b29b      	uxth	r3, r3
  407182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407186:	f840 3b04 	str.w	r3, [r0], #4
  40718a:	f851 3b04 	ldr.w	r3, [r1], #4
  40718e:	6804      	ldr	r4, [r0, #0]
  407190:	0c1b      	lsrs	r3, r3, #16
  407192:	b2a6      	uxth	r6, r4
  407194:	fb05 6303 	mla	r3, r5, r3, r6
  407198:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40719c:	458e      	cmp	lr, r1
  40719e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4071a2:	d8e8      	bhi.n	407176 <__multiply+0xba>
  4071a4:	6003      	str	r3, [r0, #0]
  4071a6:	f10c 0c04 	add.w	ip, ip, #4
  4071aa:	45e2      	cmp	sl, ip
  4071ac:	f109 0904 	add.w	r9, r9, #4
  4071b0:	d8b7      	bhi.n	407122 <__multiply+0x66>
  4071b2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4071b6:	f1b8 0f00 	cmp.w	r8, #0
  4071ba:	dd0b      	ble.n	4071d4 <__multiply+0x118>
  4071bc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4071c0:	f1aa 0a04 	sub.w	sl, sl, #4
  4071c4:	b11b      	cbz	r3, 4071ce <__multiply+0x112>
  4071c6:	e005      	b.n	4071d4 <__multiply+0x118>
  4071c8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4071cc:	b913      	cbnz	r3, 4071d4 <__multiply+0x118>
  4071ce:	f1b8 0801 	subs.w	r8, r8, #1
  4071d2:	d1f9      	bne.n	4071c8 <__multiply+0x10c>
  4071d4:	9800      	ldr	r0, [sp, #0]
  4071d6:	f8c0 8010 	str.w	r8, [r0, #16]
  4071da:	b003      	add	sp, #12
  4071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004071e0 <__pow5mult>:
  4071e0:	f012 0303 	ands.w	r3, r2, #3
  4071e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4071e8:	4614      	mov	r4, r2
  4071ea:	4607      	mov	r7, r0
  4071ec:	d12e      	bne.n	40724c <__pow5mult+0x6c>
  4071ee:	460d      	mov	r5, r1
  4071f0:	10a4      	asrs	r4, r4, #2
  4071f2:	d01c      	beq.n	40722e <__pow5mult+0x4e>
  4071f4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4071f6:	b396      	cbz	r6, 40725e <__pow5mult+0x7e>
  4071f8:	07e3      	lsls	r3, r4, #31
  4071fa:	f04f 0800 	mov.w	r8, #0
  4071fe:	d406      	bmi.n	40720e <__pow5mult+0x2e>
  407200:	1064      	asrs	r4, r4, #1
  407202:	d014      	beq.n	40722e <__pow5mult+0x4e>
  407204:	6830      	ldr	r0, [r6, #0]
  407206:	b1a8      	cbz	r0, 407234 <__pow5mult+0x54>
  407208:	4606      	mov	r6, r0
  40720a:	07e3      	lsls	r3, r4, #31
  40720c:	d5f8      	bpl.n	407200 <__pow5mult+0x20>
  40720e:	4632      	mov	r2, r6
  407210:	4629      	mov	r1, r5
  407212:	4638      	mov	r0, r7
  407214:	f7ff ff52 	bl	4070bc <__multiply>
  407218:	b1b5      	cbz	r5, 407248 <__pow5mult+0x68>
  40721a:	686a      	ldr	r2, [r5, #4]
  40721c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40721e:	1064      	asrs	r4, r4, #1
  407220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407224:	6029      	str	r1, [r5, #0]
  407226:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40722a:	4605      	mov	r5, r0
  40722c:	d1ea      	bne.n	407204 <__pow5mult+0x24>
  40722e:	4628      	mov	r0, r5
  407230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407234:	4632      	mov	r2, r6
  407236:	4631      	mov	r1, r6
  407238:	4638      	mov	r0, r7
  40723a:	f7ff ff3f 	bl	4070bc <__multiply>
  40723e:	6030      	str	r0, [r6, #0]
  407240:	f8c0 8000 	str.w	r8, [r0]
  407244:	4606      	mov	r6, r0
  407246:	e7e0      	b.n	40720a <__pow5mult+0x2a>
  407248:	4605      	mov	r5, r0
  40724a:	e7d9      	b.n	407200 <__pow5mult+0x20>
  40724c:	1e5a      	subs	r2, r3, #1
  40724e:	4d0b      	ldr	r5, [pc, #44]	; (40727c <__pow5mult+0x9c>)
  407250:	2300      	movs	r3, #0
  407252:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407256:	f7ff fe97 	bl	406f88 <__multadd>
  40725a:	4605      	mov	r5, r0
  40725c:	e7c8      	b.n	4071f0 <__pow5mult+0x10>
  40725e:	2101      	movs	r1, #1
  407260:	4638      	mov	r0, r7
  407262:	f7ff fe61 	bl	406f28 <_Balloc>
  407266:	f240 2171 	movw	r1, #625	; 0x271
  40726a:	2201      	movs	r2, #1
  40726c:	2300      	movs	r3, #0
  40726e:	6141      	str	r1, [r0, #20]
  407270:	6102      	str	r2, [r0, #16]
  407272:	4606      	mov	r6, r0
  407274:	64b8      	str	r0, [r7, #72]	; 0x48
  407276:	6003      	str	r3, [r0, #0]
  407278:	e7be      	b.n	4071f8 <__pow5mult+0x18>
  40727a:	bf00      	nop
  40727c:	00408ad8 	.word	0x00408ad8

00407280 <__lshift>:
  407280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407284:	4691      	mov	r9, r2
  407286:	690a      	ldr	r2, [r1, #16]
  407288:	688b      	ldr	r3, [r1, #8]
  40728a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40728e:	eb04 0802 	add.w	r8, r4, r2
  407292:	f108 0501 	add.w	r5, r8, #1
  407296:	429d      	cmp	r5, r3
  407298:	460e      	mov	r6, r1
  40729a:	4607      	mov	r7, r0
  40729c:	6849      	ldr	r1, [r1, #4]
  40729e:	dd04      	ble.n	4072aa <__lshift+0x2a>
  4072a0:	005b      	lsls	r3, r3, #1
  4072a2:	429d      	cmp	r5, r3
  4072a4:	f101 0101 	add.w	r1, r1, #1
  4072a8:	dcfa      	bgt.n	4072a0 <__lshift+0x20>
  4072aa:	4638      	mov	r0, r7
  4072ac:	f7ff fe3c 	bl	406f28 <_Balloc>
  4072b0:	2c00      	cmp	r4, #0
  4072b2:	f100 0314 	add.w	r3, r0, #20
  4072b6:	dd06      	ble.n	4072c6 <__lshift+0x46>
  4072b8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4072bc:	2100      	movs	r1, #0
  4072be:	f843 1b04 	str.w	r1, [r3], #4
  4072c2:	429a      	cmp	r2, r3
  4072c4:	d1fb      	bne.n	4072be <__lshift+0x3e>
  4072c6:	6934      	ldr	r4, [r6, #16]
  4072c8:	f106 0114 	add.w	r1, r6, #20
  4072cc:	f019 091f 	ands.w	r9, r9, #31
  4072d0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4072d4:	d01d      	beq.n	407312 <__lshift+0x92>
  4072d6:	f1c9 0c20 	rsb	ip, r9, #32
  4072da:	2200      	movs	r2, #0
  4072dc:	680c      	ldr	r4, [r1, #0]
  4072de:	fa04 f409 	lsl.w	r4, r4, r9
  4072e2:	4314      	orrs	r4, r2
  4072e4:	f843 4b04 	str.w	r4, [r3], #4
  4072e8:	f851 2b04 	ldr.w	r2, [r1], #4
  4072ec:	458e      	cmp	lr, r1
  4072ee:	fa22 f20c 	lsr.w	r2, r2, ip
  4072f2:	d8f3      	bhi.n	4072dc <__lshift+0x5c>
  4072f4:	601a      	str	r2, [r3, #0]
  4072f6:	b10a      	cbz	r2, 4072fc <__lshift+0x7c>
  4072f8:	f108 0502 	add.w	r5, r8, #2
  4072fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4072fe:	6872      	ldr	r2, [r6, #4]
  407300:	3d01      	subs	r5, #1
  407302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407306:	6105      	str	r5, [r0, #16]
  407308:	6031      	str	r1, [r6, #0]
  40730a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40730e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407312:	3b04      	subs	r3, #4
  407314:	f851 2b04 	ldr.w	r2, [r1], #4
  407318:	f843 2f04 	str.w	r2, [r3, #4]!
  40731c:	458e      	cmp	lr, r1
  40731e:	d8f9      	bhi.n	407314 <__lshift+0x94>
  407320:	e7ec      	b.n	4072fc <__lshift+0x7c>
  407322:	bf00      	nop

00407324 <__mcmp>:
  407324:	b430      	push	{r4, r5}
  407326:	690b      	ldr	r3, [r1, #16]
  407328:	4605      	mov	r5, r0
  40732a:	6900      	ldr	r0, [r0, #16]
  40732c:	1ac0      	subs	r0, r0, r3
  40732e:	d10f      	bne.n	407350 <__mcmp+0x2c>
  407330:	009b      	lsls	r3, r3, #2
  407332:	3514      	adds	r5, #20
  407334:	3114      	adds	r1, #20
  407336:	4419      	add	r1, r3
  407338:	442b      	add	r3, r5
  40733a:	e001      	b.n	407340 <__mcmp+0x1c>
  40733c:	429d      	cmp	r5, r3
  40733e:	d207      	bcs.n	407350 <__mcmp+0x2c>
  407340:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407348:	4294      	cmp	r4, r2
  40734a:	d0f7      	beq.n	40733c <__mcmp+0x18>
  40734c:	d302      	bcc.n	407354 <__mcmp+0x30>
  40734e:	2001      	movs	r0, #1
  407350:	bc30      	pop	{r4, r5}
  407352:	4770      	bx	lr
  407354:	f04f 30ff 	mov.w	r0, #4294967295
  407358:	e7fa      	b.n	407350 <__mcmp+0x2c>
  40735a:	bf00      	nop

0040735c <__mdiff>:
  40735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407360:	690f      	ldr	r7, [r1, #16]
  407362:	460e      	mov	r6, r1
  407364:	6911      	ldr	r1, [r2, #16]
  407366:	1a7f      	subs	r7, r7, r1
  407368:	2f00      	cmp	r7, #0
  40736a:	4690      	mov	r8, r2
  40736c:	d117      	bne.n	40739e <__mdiff+0x42>
  40736e:	0089      	lsls	r1, r1, #2
  407370:	f106 0514 	add.w	r5, r6, #20
  407374:	f102 0e14 	add.w	lr, r2, #20
  407378:	186b      	adds	r3, r5, r1
  40737a:	4471      	add	r1, lr
  40737c:	e001      	b.n	407382 <__mdiff+0x26>
  40737e:	429d      	cmp	r5, r3
  407380:	d25c      	bcs.n	40743c <__mdiff+0xe0>
  407382:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407386:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40738a:	42a2      	cmp	r2, r4
  40738c:	d0f7      	beq.n	40737e <__mdiff+0x22>
  40738e:	d25e      	bcs.n	40744e <__mdiff+0xf2>
  407390:	4633      	mov	r3, r6
  407392:	462c      	mov	r4, r5
  407394:	4646      	mov	r6, r8
  407396:	4675      	mov	r5, lr
  407398:	4698      	mov	r8, r3
  40739a:	2701      	movs	r7, #1
  40739c:	e005      	b.n	4073aa <__mdiff+0x4e>
  40739e:	db58      	blt.n	407452 <__mdiff+0xf6>
  4073a0:	f106 0514 	add.w	r5, r6, #20
  4073a4:	f108 0414 	add.w	r4, r8, #20
  4073a8:	2700      	movs	r7, #0
  4073aa:	6871      	ldr	r1, [r6, #4]
  4073ac:	f7ff fdbc 	bl	406f28 <_Balloc>
  4073b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4073b4:	6936      	ldr	r6, [r6, #16]
  4073b6:	60c7      	str	r7, [r0, #12]
  4073b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4073bc:	46a6      	mov	lr, r4
  4073be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4073c2:	f100 0414 	add.w	r4, r0, #20
  4073c6:	2300      	movs	r3, #0
  4073c8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4073cc:	f855 8b04 	ldr.w	r8, [r5], #4
  4073d0:	b28a      	uxth	r2, r1
  4073d2:	fa13 f388 	uxtah	r3, r3, r8
  4073d6:	0c09      	lsrs	r1, r1, #16
  4073d8:	1a9a      	subs	r2, r3, r2
  4073da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4073de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4073e2:	b292      	uxth	r2, r2
  4073e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4073e8:	45f4      	cmp	ip, lr
  4073ea:	f844 2b04 	str.w	r2, [r4], #4
  4073ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4073f2:	d8e9      	bhi.n	4073c8 <__mdiff+0x6c>
  4073f4:	42af      	cmp	r7, r5
  4073f6:	d917      	bls.n	407428 <__mdiff+0xcc>
  4073f8:	46a4      	mov	ip, r4
  4073fa:	46ae      	mov	lr, r5
  4073fc:	f85e 2b04 	ldr.w	r2, [lr], #4
  407400:	fa13 f382 	uxtah	r3, r3, r2
  407404:	1419      	asrs	r1, r3, #16
  407406:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40740a:	b29b      	uxth	r3, r3
  40740c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407410:	4577      	cmp	r7, lr
  407412:	f84c 2b04 	str.w	r2, [ip], #4
  407416:	ea4f 4321 	mov.w	r3, r1, asr #16
  40741a:	d8ef      	bhi.n	4073fc <__mdiff+0xa0>
  40741c:	43ed      	mvns	r5, r5
  40741e:	442f      	add	r7, r5
  407420:	f027 0703 	bic.w	r7, r7, #3
  407424:	3704      	adds	r7, #4
  407426:	443c      	add	r4, r7
  407428:	3c04      	subs	r4, #4
  40742a:	b922      	cbnz	r2, 407436 <__mdiff+0xda>
  40742c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407430:	3e01      	subs	r6, #1
  407432:	2b00      	cmp	r3, #0
  407434:	d0fa      	beq.n	40742c <__mdiff+0xd0>
  407436:	6106      	str	r6, [r0, #16]
  407438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40743c:	2100      	movs	r1, #0
  40743e:	f7ff fd73 	bl	406f28 <_Balloc>
  407442:	2201      	movs	r2, #1
  407444:	2300      	movs	r3, #0
  407446:	6102      	str	r2, [r0, #16]
  407448:	6143      	str	r3, [r0, #20]
  40744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40744e:	4674      	mov	r4, lr
  407450:	e7ab      	b.n	4073aa <__mdiff+0x4e>
  407452:	4633      	mov	r3, r6
  407454:	f106 0414 	add.w	r4, r6, #20
  407458:	f102 0514 	add.w	r5, r2, #20
  40745c:	4616      	mov	r6, r2
  40745e:	2701      	movs	r7, #1
  407460:	4698      	mov	r8, r3
  407462:	e7a2      	b.n	4073aa <__mdiff+0x4e>

00407464 <__d2b>:
  407464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407468:	b082      	sub	sp, #8
  40746a:	2101      	movs	r1, #1
  40746c:	461c      	mov	r4, r3
  40746e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407472:	4615      	mov	r5, r2
  407474:	9e08      	ldr	r6, [sp, #32]
  407476:	f7ff fd57 	bl	406f28 <_Balloc>
  40747a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40747e:	4680      	mov	r8, r0
  407480:	b10f      	cbz	r7, 407486 <__d2b+0x22>
  407482:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407486:	9401      	str	r4, [sp, #4]
  407488:	b31d      	cbz	r5, 4074d2 <__d2b+0x6e>
  40748a:	a802      	add	r0, sp, #8
  40748c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407490:	f7ff fdda 	bl	407048 <__lo0bits>
  407494:	2800      	cmp	r0, #0
  407496:	d134      	bne.n	407502 <__d2b+0x9e>
  407498:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40749c:	f8c8 2014 	str.w	r2, [r8, #20]
  4074a0:	2b00      	cmp	r3, #0
  4074a2:	bf0c      	ite	eq
  4074a4:	2101      	moveq	r1, #1
  4074a6:	2102      	movne	r1, #2
  4074a8:	f8c8 3018 	str.w	r3, [r8, #24]
  4074ac:	f8c8 1010 	str.w	r1, [r8, #16]
  4074b0:	b9df      	cbnz	r7, 4074ea <__d2b+0x86>
  4074b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4074b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4074ba:	6030      	str	r0, [r6, #0]
  4074bc:	6918      	ldr	r0, [r3, #16]
  4074be:	f7ff fda3 	bl	407008 <__hi0bits>
  4074c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4074c8:	6018      	str	r0, [r3, #0]
  4074ca:	4640      	mov	r0, r8
  4074cc:	b002      	add	sp, #8
  4074ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4074d2:	a801      	add	r0, sp, #4
  4074d4:	f7ff fdb8 	bl	407048 <__lo0bits>
  4074d8:	9b01      	ldr	r3, [sp, #4]
  4074da:	f8c8 3014 	str.w	r3, [r8, #20]
  4074de:	2101      	movs	r1, #1
  4074e0:	3020      	adds	r0, #32
  4074e2:	f8c8 1010 	str.w	r1, [r8, #16]
  4074e6:	2f00      	cmp	r7, #0
  4074e8:	d0e3      	beq.n	4074b2 <__d2b+0x4e>
  4074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074ec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4074f0:	4407      	add	r7, r0
  4074f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4074f6:	6037      	str	r7, [r6, #0]
  4074f8:	6018      	str	r0, [r3, #0]
  4074fa:	4640      	mov	r0, r8
  4074fc:	b002      	add	sp, #8
  4074fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407502:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407506:	f1c0 0220 	rsb	r2, r0, #32
  40750a:	fa03 f202 	lsl.w	r2, r3, r2
  40750e:	430a      	orrs	r2, r1
  407510:	40c3      	lsrs	r3, r0
  407512:	9301      	str	r3, [sp, #4]
  407514:	f8c8 2014 	str.w	r2, [r8, #20]
  407518:	e7c2      	b.n	4074a0 <__d2b+0x3c>
  40751a:	bf00      	nop

0040751c <_realloc_r>:
  40751c:	2900      	cmp	r1, #0
  40751e:	f000 8095 	beq.w	40764c <_realloc_r+0x130>
  407522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407526:	460d      	mov	r5, r1
  407528:	4616      	mov	r6, r2
  40752a:	b083      	sub	sp, #12
  40752c:	4680      	mov	r8, r0
  40752e:	f106 070b 	add.w	r7, r6, #11
  407532:	f7fc faa1 	bl	403a78 <__malloc_lock>
  407536:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40753a:	2f16      	cmp	r7, #22
  40753c:	f02e 0403 	bic.w	r4, lr, #3
  407540:	f1a5 0908 	sub.w	r9, r5, #8
  407544:	d83c      	bhi.n	4075c0 <_realloc_r+0xa4>
  407546:	2210      	movs	r2, #16
  407548:	4617      	mov	r7, r2
  40754a:	42be      	cmp	r6, r7
  40754c:	d83d      	bhi.n	4075ca <_realloc_r+0xae>
  40754e:	4294      	cmp	r4, r2
  407550:	da43      	bge.n	4075da <_realloc_r+0xbe>
  407552:	4bc4      	ldr	r3, [pc, #784]	; (407864 <_realloc_r+0x348>)
  407554:	6899      	ldr	r1, [r3, #8]
  407556:	eb09 0004 	add.w	r0, r9, r4
  40755a:	4288      	cmp	r0, r1
  40755c:	f000 80b4 	beq.w	4076c8 <_realloc_r+0x1ac>
  407560:	6843      	ldr	r3, [r0, #4]
  407562:	f023 0101 	bic.w	r1, r3, #1
  407566:	4401      	add	r1, r0
  407568:	6849      	ldr	r1, [r1, #4]
  40756a:	07c9      	lsls	r1, r1, #31
  40756c:	d54c      	bpl.n	407608 <_realloc_r+0xec>
  40756e:	f01e 0f01 	tst.w	lr, #1
  407572:	f000 809b 	beq.w	4076ac <_realloc_r+0x190>
  407576:	4631      	mov	r1, r6
  407578:	4640      	mov	r0, r8
  40757a:	f7fb fee5 	bl	403348 <_malloc_r>
  40757e:	4606      	mov	r6, r0
  407580:	2800      	cmp	r0, #0
  407582:	d03a      	beq.n	4075fa <_realloc_r+0xde>
  407584:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407588:	f023 0301 	bic.w	r3, r3, #1
  40758c:	444b      	add	r3, r9
  40758e:	f1a0 0208 	sub.w	r2, r0, #8
  407592:	429a      	cmp	r2, r3
  407594:	f000 8121 	beq.w	4077da <_realloc_r+0x2be>
  407598:	1f22      	subs	r2, r4, #4
  40759a:	2a24      	cmp	r2, #36	; 0x24
  40759c:	f200 8107 	bhi.w	4077ae <_realloc_r+0x292>
  4075a0:	2a13      	cmp	r2, #19
  4075a2:	f200 80db 	bhi.w	40775c <_realloc_r+0x240>
  4075a6:	4603      	mov	r3, r0
  4075a8:	462a      	mov	r2, r5
  4075aa:	6811      	ldr	r1, [r2, #0]
  4075ac:	6019      	str	r1, [r3, #0]
  4075ae:	6851      	ldr	r1, [r2, #4]
  4075b0:	6059      	str	r1, [r3, #4]
  4075b2:	6892      	ldr	r2, [r2, #8]
  4075b4:	609a      	str	r2, [r3, #8]
  4075b6:	4629      	mov	r1, r5
  4075b8:	4640      	mov	r0, r8
  4075ba:	f7ff f8e9 	bl	406790 <_free_r>
  4075be:	e01c      	b.n	4075fa <_realloc_r+0xde>
  4075c0:	f027 0707 	bic.w	r7, r7, #7
  4075c4:	2f00      	cmp	r7, #0
  4075c6:	463a      	mov	r2, r7
  4075c8:	dabf      	bge.n	40754a <_realloc_r+0x2e>
  4075ca:	2600      	movs	r6, #0
  4075cc:	230c      	movs	r3, #12
  4075ce:	4630      	mov	r0, r6
  4075d0:	f8c8 3000 	str.w	r3, [r8]
  4075d4:	b003      	add	sp, #12
  4075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4075da:	462e      	mov	r6, r5
  4075dc:	1be3      	subs	r3, r4, r7
  4075de:	2b0f      	cmp	r3, #15
  4075e0:	d81e      	bhi.n	407620 <_realloc_r+0x104>
  4075e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4075e6:	f003 0301 	and.w	r3, r3, #1
  4075ea:	4323      	orrs	r3, r4
  4075ec:	444c      	add	r4, r9
  4075ee:	f8c9 3004 	str.w	r3, [r9, #4]
  4075f2:	6863      	ldr	r3, [r4, #4]
  4075f4:	f043 0301 	orr.w	r3, r3, #1
  4075f8:	6063      	str	r3, [r4, #4]
  4075fa:	4640      	mov	r0, r8
  4075fc:	f7fc fa42 	bl	403a84 <__malloc_unlock>
  407600:	4630      	mov	r0, r6
  407602:	b003      	add	sp, #12
  407604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407608:	f023 0303 	bic.w	r3, r3, #3
  40760c:	18e1      	adds	r1, r4, r3
  40760e:	4291      	cmp	r1, r2
  407610:	db1f      	blt.n	407652 <_realloc_r+0x136>
  407612:	68c3      	ldr	r3, [r0, #12]
  407614:	6882      	ldr	r2, [r0, #8]
  407616:	462e      	mov	r6, r5
  407618:	60d3      	str	r3, [r2, #12]
  40761a:	460c      	mov	r4, r1
  40761c:	609a      	str	r2, [r3, #8]
  40761e:	e7dd      	b.n	4075dc <_realloc_r+0xc0>
  407620:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407624:	eb09 0107 	add.w	r1, r9, r7
  407628:	f002 0201 	and.w	r2, r2, #1
  40762c:	444c      	add	r4, r9
  40762e:	f043 0301 	orr.w	r3, r3, #1
  407632:	4317      	orrs	r7, r2
  407634:	f8c9 7004 	str.w	r7, [r9, #4]
  407638:	604b      	str	r3, [r1, #4]
  40763a:	6863      	ldr	r3, [r4, #4]
  40763c:	f043 0301 	orr.w	r3, r3, #1
  407640:	3108      	adds	r1, #8
  407642:	6063      	str	r3, [r4, #4]
  407644:	4640      	mov	r0, r8
  407646:	f7ff f8a3 	bl	406790 <_free_r>
  40764a:	e7d6      	b.n	4075fa <_realloc_r+0xde>
  40764c:	4611      	mov	r1, r2
  40764e:	f7fb be7b 	b.w	403348 <_malloc_r>
  407652:	f01e 0f01 	tst.w	lr, #1
  407656:	d18e      	bne.n	407576 <_realloc_r+0x5a>
  407658:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40765c:	eba9 0a01 	sub.w	sl, r9, r1
  407660:	f8da 1004 	ldr.w	r1, [sl, #4]
  407664:	f021 0103 	bic.w	r1, r1, #3
  407668:	440b      	add	r3, r1
  40766a:	4423      	add	r3, r4
  40766c:	4293      	cmp	r3, r2
  40766e:	db25      	blt.n	4076bc <_realloc_r+0x1a0>
  407670:	68c2      	ldr	r2, [r0, #12]
  407672:	6881      	ldr	r1, [r0, #8]
  407674:	4656      	mov	r6, sl
  407676:	60ca      	str	r2, [r1, #12]
  407678:	6091      	str	r1, [r2, #8]
  40767a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40767e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407682:	1f22      	subs	r2, r4, #4
  407684:	2a24      	cmp	r2, #36	; 0x24
  407686:	60c1      	str	r1, [r0, #12]
  407688:	6088      	str	r0, [r1, #8]
  40768a:	f200 8094 	bhi.w	4077b6 <_realloc_r+0x29a>
  40768e:	2a13      	cmp	r2, #19
  407690:	d96f      	bls.n	407772 <_realloc_r+0x256>
  407692:	6829      	ldr	r1, [r5, #0]
  407694:	f8ca 1008 	str.w	r1, [sl, #8]
  407698:	6869      	ldr	r1, [r5, #4]
  40769a:	f8ca 100c 	str.w	r1, [sl, #12]
  40769e:	2a1b      	cmp	r2, #27
  4076a0:	f200 80a2 	bhi.w	4077e8 <_realloc_r+0x2cc>
  4076a4:	3508      	adds	r5, #8
  4076a6:	f10a 0210 	add.w	r2, sl, #16
  4076aa:	e063      	b.n	407774 <_realloc_r+0x258>
  4076ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4076b0:	eba9 0a03 	sub.w	sl, r9, r3
  4076b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076b8:	f021 0103 	bic.w	r1, r1, #3
  4076bc:	1863      	adds	r3, r4, r1
  4076be:	4293      	cmp	r3, r2
  4076c0:	f6ff af59 	blt.w	407576 <_realloc_r+0x5a>
  4076c4:	4656      	mov	r6, sl
  4076c6:	e7d8      	b.n	40767a <_realloc_r+0x15e>
  4076c8:	6841      	ldr	r1, [r0, #4]
  4076ca:	f021 0b03 	bic.w	fp, r1, #3
  4076ce:	44a3      	add	fp, r4
  4076d0:	f107 0010 	add.w	r0, r7, #16
  4076d4:	4583      	cmp	fp, r0
  4076d6:	da56      	bge.n	407786 <_realloc_r+0x26a>
  4076d8:	f01e 0f01 	tst.w	lr, #1
  4076dc:	f47f af4b 	bne.w	407576 <_realloc_r+0x5a>
  4076e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4076e4:	eba9 0a01 	sub.w	sl, r9, r1
  4076e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4076ec:	f021 0103 	bic.w	r1, r1, #3
  4076f0:	448b      	add	fp, r1
  4076f2:	4558      	cmp	r0, fp
  4076f4:	dce2      	bgt.n	4076bc <_realloc_r+0x1a0>
  4076f6:	4656      	mov	r6, sl
  4076f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4076fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407700:	1f22      	subs	r2, r4, #4
  407702:	2a24      	cmp	r2, #36	; 0x24
  407704:	60c1      	str	r1, [r0, #12]
  407706:	6088      	str	r0, [r1, #8]
  407708:	f200 808f 	bhi.w	40782a <_realloc_r+0x30e>
  40770c:	2a13      	cmp	r2, #19
  40770e:	f240 808a 	bls.w	407826 <_realloc_r+0x30a>
  407712:	6829      	ldr	r1, [r5, #0]
  407714:	f8ca 1008 	str.w	r1, [sl, #8]
  407718:	6869      	ldr	r1, [r5, #4]
  40771a:	f8ca 100c 	str.w	r1, [sl, #12]
  40771e:	2a1b      	cmp	r2, #27
  407720:	f200 808a 	bhi.w	407838 <_realloc_r+0x31c>
  407724:	3508      	adds	r5, #8
  407726:	f10a 0210 	add.w	r2, sl, #16
  40772a:	6829      	ldr	r1, [r5, #0]
  40772c:	6011      	str	r1, [r2, #0]
  40772e:	6869      	ldr	r1, [r5, #4]
  407730:	6051      	str	r1, [r2, #4]
  407732:	68a9      	ldr	r1, [r5, #8]
  407734:	6091      	str	r1, [r2, #8]
  407736:	eb0a 0107 	add.w	r1, sl, r7
  40773a:	ebab 0207 	sub.w	r2, fp, r7
  40773e:	f042 0201 	orr.w	r2, r2, #1
  407742:	6099      	str	r1, [r3, #8]
  407744:	604a      	str	r2, [r1, #4]
  407746:	f8da 3004 	ldr.w	r3, [sl, #4]
  40774a:	f003 0301 	and.w	r3, r3, #1
  40774e:	431f      	orrs	r7, r3
  407750:	4640      	mov	r0, r8
  407752:	f8ca 7004 	str.w	r7, [sl, #4]
  407756:	f7fc f995 	bl	403a84 <__malloc_unlock>
  40775a:	e751      	b.n	407600 <_realloc_r+0xe4>
  40775c:	682b      	ldr	r3, [r5, #0]
  40775e:	6003      	str	r3, [r0, #0]
  407760:	686b      	ldr	r3, [r5, #4]
  407762:	6043      	str	r3, [r0, #4]
  407764:	2a1b      	cmp	r2, #27
  407766:	d82d      	bhi.n	4077c4 <_realloc_r+0x2a8>
  407768:	f100 0308 	add.w	r3, r0, #8
  40776c:	f105 0208 	add.w	r2, r5, #8
  407770:	e71b      	b.n	4075aa <_realloc_r+0x8e>
  407772:	4632      	mov	r2, r6
  407774:	6829      	ldr	r1, [r5, #0]
  407776:	6011      	str	r1, [r2, #0]
  407778:	6869      	ldr	r1, [r5, #4]
  40777a:	6051      	str	r1, [r2, #4]
  40777c:	68a9      	ldr	r1, [r5, #8]
  40777e:	6091      	str	r1, [r2, #8]
  407780:	461c      	mov	r4, r3
  407782:	46d1      	mov	r9, sl
  407784:	e72a      	b.n	4075dc <_realloc_r+0xc0>
  407786:	eb09 0107 	add.w	r1, r9, r7
  40778a:	ebab 0b07 	sub.w	fp, fp, r7
  40778e:	f04b 0201 	orr.w	r2, fp, #1
  407792:	6099      	str	r1, [r3, #8]
  407794:	604a      	str	r2, [r1, #4]
  407796:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40779a:	f003 0301 	and.w	r3, r3, #1
  40779e:	431f      	orrs	r7, r3
  4077a0:	4640      	mov	r0, r8
  4077a2:	f845 7c04 	str.w	r7, [r5, #-4]
  4077a6:	f7fc f96d 	bl	403a84 <__malloc_unlock>
  4077aa:	462e      	mov	r6, r5
  4077ac:	e728      	b.n	407600 <_realloc_r+0xe4>
  4077ae:	4629      	mov	r1, r5
  4077b0:	f7ff fb56 	bl	406e60 <memmove>
  4077b4:	e6ff      	b.n	4075b6 <_realloc_r+0x9a>
  4077b6:	4629      	mov	r1, r5
  4077b8:	4630      	mov	r0, r6
  4077ba:	461c      	mov	r4, r3
  4077bc:	46d1      	mov	r9, sl
  4077be:	f7ff fb4f 	bl	406e60 <memmove>
  4077c2:	e70b      	b.n	4075dc <_realloc_r+0xc0>
  4077c4:	68ab      	ldr	r3, [r5, #8]
  4077c6:	6083      	str	r3, [r0, #8]
  4077c8:	68eb      	ldr	r3, [r5, #12]
  4077ca:	60c3      	str	r3, [r0, #12]
  4077cc:	2a24      	cmp	r2, #36	; 0x24
  4077ce:	d017      	beq.n	407800 <_realloc_r+0x2e4>
  4077d0:	f100 0310 	add.w	r3, r0, #16
  4077d4:	f105 0210 	add.w	r2, r5, #16
  4077d8:	e6e7      	b.n	4075aa <_realloc_r+0x8e>
  4077da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4077de:	f023 0303 	bic.w	r3, r3, #3
  4077e2:	441c      	add	r4, r3
  4077e4:	462e      	mov	r6, r5
  4077e6:	e6f9      	b.n	4075dc <_realloc_r+0xc0>
  4077e8:	68a9      	ldr	r1, [r5, #8]
  4077ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4077ee:	68e9      	ldr	r1, [r5, #12]
  4077f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4077f4:	2a24      	cmp	r2, #36	; 0x24
  4077f6:	d00c      	beq.n	407812 <_realloc_r+0x2f6>
  4077f8:	3510      	adds	r5, #16
  4077fa:	f10a 0218 	add.w	r2, sl, #24
  4077fe:	e7b9      	b.n	407774 <_realloc_r+0x258>
  407800:	692b      	ldr	r3, [r5, #16]
  407802:	6103      	str	r3, [r0, #16]
  407804:	696b      	ldr	r3, [r5, #20]
  407806:	6143      	str	r3, [r0, #20]
  407808:	f105 0218 	add.w	r2, r5, #24
  40780c:	f100 0318 	add.w	r3, r0, #24
  407810:	e6cb      	b.n	4075aa <_realloc_r+0x8e>
  407812:	692a      	ldr	r2, [r5, #16]
  407814:	f8ca 2018 	str.w	r2, [sl, #24]
  407818:	696a      	ldr	r2, [r5, #20]
  40781a:	f8ca 201c 	str.w	r2, [sl, #28]
  40781e:	3518      	adds	r5, #24
  407820:	f10a 0220 	add.w	r2, sl, #32
  407824:	e7a6      	b.n	407774 <_realloc_r+0x258>
  407826:	4632      	mov	r2, r6
  407828:	e77f      	b.n	40772a <_realloc_r+0x20e>
  40782a:	4629      	mov	r1, r5
  40782c:	4630      	mov	r0, r6
  40782e:	9301      	str	r3, [sp, #4]
  407830:	f7ff fb16 	bl	406e60 <memmove>
  407834:	9b01      	ldr	r3, [sp, #4]
  407836:	e77e      	b.n	407736 <_realloc_r+0x21a>
  407838:	68a9      	ldr	r1, [r5, #8]
  40783a:	f8ca 1010 	str.w	r1, [sl, #16]
  40783e:	68e9      	ldr	r1, [r5, #12]
  407840:	f8ca 1014 	str.w	r1, [sl, #20]
  407844:	2a24      	cmp	r2, #36	; 0x24
  407846:	d003      	beq.n	407850 <_realloc_r+0x334>
  407848:	3510      	adds	r5, #16
  40784a:	f10a 0218 	add.w	r2, sl, #24
  40784e:	e76c      	b.n	40772a <_realloc_r+0x20e>
  407850:	692a      	ldr	r2, [r5, #16]
  407852:	f8ca 2018 	str.w	r2, [sl, #24]
  407856:	696a      	ldr	r2, [r5, #20]
  407858:	f8ca 201c 	str.w	r2, [sl, #28]
  40785c:	3518      	adds	r5, #24
  40785e:	f10a 0220 	add.w	r2, sl, #32
  407862:	e762      	b.n	40772a <_realloc_r+0x20e>
  407864:	20400438 	.word	0x20400438

00407868 <__sread>:
  407868:	b510      	push	{r4, lr}
  40786a:	460c      	mov	r4, r1
  40786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407870:	f000 fa88 	bl	407d84 <_read_r>
  407874:	2800      	cmp	r0, #0
  407876:	db03      	blt.n	407880 <__sread+0x18>
  407878:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40787a:	4403      	add	r3, r0
  40787c:	6523      	str	r3, [r4, #80]	; 0x50
  40787e:	bd10      	pop	{r4, pc}
  407880:	89a3      	ldrh	r3, [r4, #12]
  407882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407886:	81a3      	strh	r3, [r4, #12]
  407888:	bd10      	pop	{r4, pc}
  40788a:	bf00      	nop

0040788c <__swrite>:
  40788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407890:	4616      	mov	r6, r2
  407892:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407896:	461f      	mov	r7, r3
  407898:	05d3      	lsls	r3, r2, #23
  40789a:	460c      	mov	r4, r1
  40789c:	4605      	mov	r5, r0
  40789e:	d507      	bpl.n	4078b0 <__swrite+0x24>
  4078a0:	2200      	movs	r2, #0
  4078a2:	2302      	movs	r3, #2
  4078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4078a8:	f000 fa40 	bl	407d2c <_lseek_r>
  4078ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4078b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4078b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4078b8:	81a2      	strh	r2, [r4, #12]
  4078ba:	463b      	mov	r3, r7
  4078bc:	4632      	mov	r2, r6
  4078be:	4628      	mov	r0, r5
  4078c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4078c4:	f000 b85e 	b.w	407984 <_write_r>

004078c8 <__sseek>:
  4078c8:	b510      	push	{r4, lr}
  4078ca:	460c      	mov	r4, r1
  4078cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4078d0:	f000 fa2c 	bl	407d2c <_lseek_r>
  4078d4:	89a3      	ldrh	r3, [r4, #12]
  4078d6:	1c42      	adds	r2, r0, #1
  4078d8:	bf0e      	itee	eq
  4078da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4078de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4078e2:	6520      	strne	r0, [r4, #80]	; 0x50
  4078e4:	81a3      	strh	r3, [r4, #12]
  4078e6:	bd10      	pop	{r4, pc}

004078e8 <__sclose>:
  4078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4078ec:	f000 b8f2 	b.w	407ad4 <_close_r>

004078f0 <__sprint_r.part.0>:
  4078f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4078f6:	049c      	lsls	r4, r3, #18
  4078f8:	4693      	mov	fp, r2
  4078fa:	d52f      	bpl.n	40795c <__sprint_r.part.0+0x6c>
  4078fc:	6893      	ldr	r3, [r2, #8]
  4078fe:	6812      	ldr	r2, [r2, #0]
  407900:	b353      	cbz	r3, 407958 <__sprint_r.part.0+0x68>
  407902:	460e      	mov	r6, r1
  407904:	4607      	mov	r7, r0
  407906:	f102 0908 	add.w	r9, r2, #8
  40790a:	e919 0420 	ldmdb	r9, {r5, sl}
  40790e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407912:	d017      	beq.n	407944 <__sprint_r.part.0+0x54>
  407914:	3d04      	subs	r5, #4
  407916:	2400      	movs	r4, #0
  407918:	e001      	b.n	40791e <__sprint_r.part.0+0x2e>
  40791a:	45a0      	cmp	r8, r4
  40791c:	d010      	beq.n	407940 <__sprint_r.part.0+0x50>
  40791e:	4632      	mov	r2, r6
  407920:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407924:	4638      	mov	r0, r7
  407926:	f000 f999 	bl	407c5c <_fputwc_r>
  40792a:	1c43      	adds	r3, r0, #1
  40792c:	f104 0401 	add.w	r4, r4, #1
  407930:	d1f3      	bne.n	40791a <__sprint_r.part.0+0x2a>
  407932:	2300      	movs	r3, #0
  407934:	f8cb 3008 	str.w	r3, [fp, #8]
  407938:	f8cb 3004 	str.w	r3, [fp, #4]
  40793c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407940:	f8db 3008 	ldr.w	r3, [fp, #8]
  407944:	f02a 0a03 	bic.w	sl, sl, #3
  407948:	eba3 030a 	sub.w	r3, r3, sl
  40794c:	f8cb 3008 	str.w	r3, [fp, #8]
  407950:	f109 0908 	add.w	r9, r9, #8
  407954:	2b00      	cmp	r3, #0
  407956:	d1d8      	bne.n	40790a <__sprint_r.part.0+0x1a>
  407958:	2000      	movs	r0, #0
  40795a:	e7ea      	b.n	407932 <__sprint_r.part.0+0x42>
  40795c:	f7fe fffe 	bl	40695c <__sfvwrite_r>
  407960:	2300      	movs	r3, #0
  407962:	f8cb 3008 	str.w	r3, [fp, #8]
  407966:	f8cb 3004 	str.w	r3, [fp, #4]
  40796a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40796e:	bf00      	nop

00407970 <__sprint_r>:
  407970:	6893      	ldr	r3, [r2, #8]
  407972:	b10b      	cbz	r3, 407978 <__sprint_r+0x8>
  407974:	f7ff bfbc 	b.w	4078f0 <__sprint_r.part.0>
  407978:	b410      	push	{r4}
  40797a:	4618      	mov	r0, r3
  40797c:	6053      	str	r3, [r2, #4]
  40797e:	bc10      	pop	{r4}
  407980:	4770      	bx	lr
  407982:	bf00      	nop

00407984 <_write_r>:
  407984:	b570      	push	{r4, r5, r6, lr}
  407986:	460d      	mov	r5, r1
  407988:	4c08      	ldr	r4, [pc, #32]	; (4079ac <_write_r+0x28>)
  40798a:	4611      	mov	r1, r2
  40798c:	4606      	mov	r6, r0
  40798e:	461a      	mov	r2, r3
  407990:	4628      	mov	r0, r5
  407992:	2300      	movs	r3, #0
  407994:	6023      	str	r3, [r4, #0]
  407996:	f7f8 fc73 	bl	400280 <_write>
  40799a:	1c43      	adds	r3, r0, #1
  40799c:	d000      	beq.n	4079a0 <_write_r+0x1c>
  40799e:	bd70      	pop	{r4, r5, r6, pc}
  4079a0:	6823      	ldr	r3, [r4, #0]
  4079a2:	2b00      	cmp	r3, #0
  4079a4:	d0fb      	beq.n	40799e <_write_r+0x1a>
  4079a6:	6033      	str	r3, [r6, #0]
  4079a8:	bd70      	pop	{r4, r5, r6, pc}
  4079aa:	bf00      	nop
  4079ac:	20400c38 	.word	0x20400c38

004079b0 <__register_exitproc>:
  4079b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4079b4:	4d2c      	ldr	r5, [pc, #176]	; (407a68 <__register_exitproc+0xb8>)
  4079b6:	4606      	mov	r6, r0
  4079b8:	6828      	ldr	r0, [r5, #0]
  4079ba:	4698      	mov	r8, r3
  4079bc:	460f      	mov	r7, r1
  4079be:	4691      	mov	r9, r2
  4079c0:	f7ff f980 	bl	406cc4 <__retarget_lock_acquire_recursive>
  4079c4:	4b29      	ldr	r3, [pc, #164]	; (407a6c <__register_exitproc+0xbc>)
  4079c6:	681c      	ldr	r4, [r3, #0]
  4079c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4079cc:	2b00      	cmp	r3, #0
  4079ce:	d03e      	beq.n	407a4e <__register_exitproc+0x9e>
  4079d0:	685a      	ldr	r2, [r3, #4]
  4079d2:	2a1f      	cmp	r2, #31
  4079d4:	dc1c      	bgt.n	407a10 <__register_exitproc+0x60>
  4079d6:	f102 0e01 	add.w	lr, r2, #1
  4079da:	b176      	cbz	r6, 4079fa <__register_exitproc+0x4a>
  4079dc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4079e0:	2401      	movs	r4, #1
  4079e2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4079e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4079ea:	4094      	lsls	r4, r2
  4079ec:	4320      	orrs	r0, r4
  4079ee:	2e02      	cmp	r6, #2
  4079f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4079f4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4079f8:	d023      	beq.n	407a42 <__register_exitproc+0x92>
  4079fa:	3202      	adds	r2, #2
  4079fc:	f8c3 e004 	str.w	lr, [r3, #4]
  407a00:	6828      	ldr	r0, [r5, #0]
  407a02:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407a06:	f7ff f95f 	bl	406cc8 <__retarget_lock_release_recursive>
  407a0a:	2000      	movs	r0, #0
  407a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a10:	4b17      	ldr	r3, [pc, #92]	; (407a70 <__register_exitproc+0xc0>)
  407a12:	b30b      	cbz	r3, 407a58 <__register_exitproc+0xa8>
  407a14:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407a18:	f7fb fc86 	bl	403328 <malloc>
  407a1c:	4603      	mov	r3, r0
  407a1e:	b1d8      	cbz	r0, 407a58 <__register_exitproc+0xa8>
  407a20:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407a24:	6002      	str	r2, [r0, #0]
  407a26:	2100      	movs	r1, #0
  407a28:	6041      	str	r1, [r0, #4]
  407a2a:	460a      	mov	r2, r1
  407a2c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407a30:	f04f 0e01 	mov.w	lr, #1
  407a34:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407a38:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407a3c:	2e00      	cmp	r6, #0
  407a3e:	d0dc      	beq.n	4079fa <__register_exitproc+0x4a>
  407a40:	e7cc      	b.n	4079dc <__register_exitproc+0x2c>
  407a42:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407a46:	430c      	orrs	r4, r1
  407a48:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407a4c:	e7d5      	b.n	4079fa <__register_exitproc+0x4a>
  407a4e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407a52:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407a56:	e7bb      	b.n	4079d0 <__register_exitproc+0x20>
  407a58:	6828      	ldr	r0, [r5, #0]
  407a5a:	f7ff f935 	bl	406cc8 <__retarget_lock_release_recursive>
  407a5e:	f04f 30ff 	mov.w	r0, #4294967295
  407a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a66:	bf00      	nop
  407a68:	20400848 	.word	0x20400848
  407a6c:	0040896c 	.word	0x0040896c
  407a70:	00403329 	.word	0x00403329

00407a74 <_calloc_r>:
  407a74:	b510      	push	{r4, lr}
  407a76:	fb02 f101 	mul.w	r1, r2, r1
  407a7a:	f7fb fc65 	bl	403348 <_malloc_r>
  407a7e:	4604      	mov	r4, r0
  407a80:	b1d8      	cbz	r0, 407aba <_calloc_r+0x46>
  407a82:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407a86:	f022 0203 	bic.w	r2, r2, #3
  407a8a:	3a04      	subs	r2, #4
  407a8c:	2a24      	cmp	r2, #36	; 0x24
  407a8e:	d818      	bhi.n	407ac2 <_calloc_r+0x4e>
  407a90:	2a13      	cmp	r2, #19
  407a92:	d914      	bls.n	407abe <_calloc_r+0x4a>
  407a94:	2300      	movs	r3, #0
  407a96:	2a1b      	cmp	r2, #27
  407a98:	6003      	str	r3, [r0, #0]
  407a9a:	6043      	str	r3, [r0, #4]
  407a9c:	d916      	bls.n	407acc <_calloc_r+0x58>
  407a9e:	2a24      	cmp	r2, #36	; 0x24
  407aa0:	6083      	str	r3, [r0, #8]
  407aa2:	60c3      	str	r3, [r0, #12]
  407aa4:	bf11      	iteee	ne
  407aa6:	f100 0210 	addne.w	r2, r0, #16
  407aaa:	6103      	streq	r3, [r0, #16]
  407aac:	6143      	streq	r3, [r0, #20]
  407aae:	f100 0218 	addeq.w	r2, r0, #24
  407ab2:	2300      	movs	r3, #0
  407ab4:	6013      	str	r3, [r2, #0]
  407ab6:	6053      	str	r3, [r2, #4]
  407ab8:	6093      	str	r3, [r2, #8]
  407aba:	4620      	mov	r0, r4
  407abc:	bd10      	pop	{r4, pc}
  407abe:	4602      	mov	r2, r0
  407ac0:	e7f7      	b.n	407ab2 <_calloc_r+0x3e>
  407ac2:	2100      	movs	r1, #0
  407ac4:	f7fb ff8a 	bl	4039dc <memset>
  407ac8:	4620      	mov	r0, r4
  407aca:	bd10      	pop	{r4, pc}
  407acc:	f100 0208 	add.w	r2, r0, #8
  407ad0:	e7ef      	b.n	407ab2 <_calloc_r+0x3e>
  407ad2:	bf00      	nop

00407ad4 <_close_r>:
  407ad4:	b538      	push	{r3, r4, r5, lr}
  407ad6:	4c07      	ldr	r4, [pc, #28]	; (407af4 <_close_r+0x20>)
  407ad8:	2300      	movs	r3, #0
  407ada:	4605      	mov	r5, r0
  407adc:	4608      	mov	r0, r1
  407ade:	6023      	str	r3, [r4, #0]
  407ae0:	f7f9 f93e 	bl	400d60 <_close>
  407ae4:	1c43      	adds	r3, r0, #1
  407ae6:	d000      	beq.n	407aea <_close_r+0x16>
  407ae8:	bd38      	pop	{r3, r4, r5, pc}
  407aea:	6823      	ldr	r3, [r4, #0]
  407aec:	2b00      	cmp	r3, #0
  407aee:	d0fb      	beq.n	407ae8 <_close_r+0x14>
  407af0:	602b      	str	r3, [r5, #0]
  407af2:	bd38      	pop	{r3, r4, r5, pc}
  407af4:	20400c38 	.word	0x20400c38

00407af8 <_fclose_r>:
  407af8:	b570      	push	{r4, r5, r6, lr}
  407afa:	b159      	cbz	r1, 407b14 <_fclose_r+0x1c>
  407afc:	4605      	mov	r5, r0
  407afe:	460c      	mov	r4, r1
  407b00:	b110      	cbz	r0, 407b08 <_fclose_r+0x10>
  407b02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407b04:	2b00      	cmp	r3, #0
  407b06:	d03c      	beq.n	407b82 <_fclose_r+0x8a>
  407b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407b0a:	07d8      	lsls	r0, r3, #31
  407b0c:	d505      	bpl.n	407b1a <_fclose_r+0x22>
  407b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b12:	b92b      	cbnz	r3, 407b20 <_fclose_r+0x28>
  407b14:	2600      	movs	r6, #0
  407b16:	4630      	mov	r0, r6
  407b18:	bd70      	pop	{r4, r5, r6, pc}
  407b1a:	89a3      	ldrh	r3, [r4, #12]
  407b1c:	0599      	lsls	r1, r3, #22
  407b1e:	d53c      	bpl.n	407b9a <_fclose_r+0xa2>
  407b20:	4621      	mov	r1, r4
  407b22:	4628      	mov	r0, r5
  407b24:	f7fe fc9a 	bl	40645c <__sflush_r>
  407b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407b2a:	4606      	mov	r6, r0
  407b2c:	b133      	cbz	r3, 407b3c <_fclose_r+0x44>
  407b2e:	69e1      	ldr	r1, [r4, #28]
  407b30:	4628      	mov	r0, r5
  407b32:	4798      	blx	r3
  407b34:	2800      	cmp	r0, #0
  407b36:	bfb8      	it	lt
  407b38:	f04f 36ff 	movlt.w	r6, #4294967295
  407b3c:	89a3      	ldrh	r3, [r4, #12]
  407b3e:	061a      	lsls	r2, r3, #24
  407b40:	d422      	bmi.n	407b88 <_fclose_r+0x90>
  407b42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407b44:	b141      	cbz	r1, 407b58 <_fclose_r+0x60>
  407b46:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407b4a:	4299      	cmp	r1, r3
  407b4c:	d002      	beq.n	407b54 <_fclose_r+0x5c>
  407b4e:	4628      	mov	r0, r5
  407b50:	f7fe fe1e 	bl	406790 <_free_r>
  407b54:	2300      	movs	r3, #0
  407b56:	6323      	str	r3, [r4, #48]	; 0x30
  407b58:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407b5a:	b121      	cbz	r1, 407b66 <_fclose_r+0x6e>
  407b5c:	4628      	mov	r0, r5
  407b5e:	f7fe fe17 	bl	406790 <_free_r>
  407b62:	2300      	movs	r3, #0
  407b64:	6463      	str	r3, [r4, #68]	; 0x44
  407b66:	f7fe fd9d 	bl	4066a4 <__sfp_lock_acquire>
  407b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407b6c:	2200      	movs	r2, #0
  407b6e:	07db      	lsls	r3, r3, #31
  407b70:	81a2      	strh	r2, [r4, #12]
  407b72:	d50e      	bpl.n	407b92 <_fclose_r+0x9a>
  407b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407b76:	f7ff f8a3 	bl	406cc0 <__retarget_lock_close_recursive>
  407b7a:	f7fe fd99 	bl	4066b0 <__sfp_lock_release>
  407b7e:	4630      	mov	r0, r6
  407b80:	bd70      	pop	{r4, r5, r6, pc}
  407b82:	f7fe fd63 	bl	40664c <__sinit>
  407b86:	e7bf      	b.n	407b08 <_fclose_r+0x10>
  407b88:	6921      	ldr	r1, [r4, #16]
  407b8a:	4628      	mov	r0, r5
  407b8c:	f7fe fe00 	bl	406790 <_free_r>
  407b90:	e7d7      	b.n	407b42 <_fclose_r+0x4a>
  407b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407b94:	f7ff f898 	bl	406cc8 <__retarget_lock_release_recursive>
  407b98:	e7ec      	b.n	407b74 <_fclose_r+0x7c>
  407b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407b9c:	f7ff f892 	bl	406cc4 <__retarget_lock_acquire_recursive>
  407ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ba4:	2b00      	cmp	r3, #0
  407ba6:	d1bb      	bne.n	407b20 <_fclose_r+0x28>
  407ba8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407baa:	f016 0601 	ands.w	r6, r6, #1
  407bae:	d1b1      	bne.n	407b14 <_fclose_r+0x1c>
  407bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407bb2:	f7ff f889 	bl	406cc8 <__retarget_lock_release_recursive>
  407bb6:	4630      	mov	r0, r6
  407bb8:	bd70      	pop	{r4, r5, r6, pc}
  407bba:	bf00      	nop

00407bbc <__fputwc>:
  407bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407bc0:	b082      	sub	sp, #8
  407bc2:	4680      	mov	r8, r0
  407bc4:	4689      	mov	r9, r1
  407bc6:	4614      	mov	r4, r2
  407bc8:	f000 f8a2 	bl	407d10 <__locale_mb_cur_max>
  407bcc:	2801      	cmp	r0, #1
  407bce:	d036      	beq.n	407c3e <__fputwc+0x82>
  407bd0:	464a      	mov	r2, r9
  407bd2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407bd6:	a901      	add	r1, sp, #4
  407bd8:	4640      	mov	r0, r8
  407bda:	f000 f941 	bl	407e60 <_wcrtomb_r>
  407bde:	1c42      	adds	r2, r0, #1
  407be0:	4606      	mov	r6, r0
  407be2:	d025      	beq.n	407c30 <__fputwc+0x74>
  407be4:	b3a8      	cbz	r0, 407c52 <__fputwc+0x96>
  407be6:	f89d e004 	ldrb.w	lr, [sp, #4]
  407bea:	2500      	movs	r5, #0
  407bec:	f10d 0a04 	add.w	sl, sp, #4
  407bf0:	e009      	b.n	407c06 <__fputwc+0x4a>
  407bf2:	6823      	ldr	r3, [r4, #0]
  407bf4:	1c5a      	adds	r2, r3, #1
  407bf6:	6022      	str	r2, [r4, #0]
  407bf8:	f883 e000 	strb.w	lr, [r3]
  407bfc:	3501      	adds	r5, #1
  407bfe:	42b5      	cmp	r5, r6
  407c00:	d227      	bcs.n	407c52 <__fputwc+0x96>
  407c02:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407c06:	68a3      	ldr	r3, [r4, #8]
  407c08:	3b01      	subs	r3, #1
  407c0a:	2b00      	cmp	r3, #0
  407c0c:	60a3      	str	r3, [r4, #8]
  407c0e:	daf0      	bge.n	407bf2 <__fputwc+0x36>
  407c10:	69a7      	ldr	r7, [r4, #24]
  407c12:	42bb      	cmp	r3, r7
  407c14:	4671      	mov	r1, lr
  407c16:	4622      	mov	r2, r4
  407c18:	4640      	mov	r0, r8
  407c1a:	db02      	blt.n	407c22 <__fputwc+0x66>
  407c1c:	f1be 0f0a 	cmp.w	lr, #10
  407c20:	d1e7      	bne.n	407bf2 <__fputwc+0x36>
  407c22:	f000 f8c5 	bl	407db0 <__swbuf_r>
  407c26:	1c43      	adds	r3, r0, #1
  407c28:	d1e8      	bne.n	407bfc <__fputwc+0x40>
  407c2a:	b002      	add	sp, #8
  407c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c30:	89a3      	ldrh	r3, [r4, #12]
  407c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c36:	81a3      	strh	r3, [r4, #12]
  407c38:	b002      	add	sp, #8
  407c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c3e:	f109 33ff 	add.w	r3, r9, #4294967295
  407c42:	2bfe      	cmp	r3, #254	; 0xfe
  407c44:	d8c4      	bhi.n	407bd0 <__fputwc+0x14>
  407c46:	fa5f fe89 	uxtb.w	lr, r9
  407c4a:	4606      	mov	r6, r0
  407c4c:	f88d e004 	strb.w	lr, [sp, #4]
  407c50:	e7cb      	b.n	407bea <__fputwc+0x2e>
  407c52:	4648      	mov	r0, r9
  407c54:	b002      	add	sp, #8
  407c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c5a:	bf00      	nop

00407c5c <_fputwc_r>:
  407c5c:	b530      	push	{r4, r5, lr}
  407c5e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407c60:	f013 0f01 	tst.w	r3, #1
  407c64:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407c68:	4614      	mov	r4, r2
  407c6a:	b083      	sub	sp, #12
  407c6c:	4605      	mov	r5, r0
  407c6e:	b29a      	uxth	r2, r3
  407c70:	d101      	bne.n	407c76 <_fputwc_r+0x1a>
  407c72:	0590      	lsls	r0, r2, #22
  407c74:	d51c      	bpl.n	407cb0 <_fputwc_r+0x54>
  407c76:	0490      	lsls	r0, r2, #18
  407c78:	d406      	bmi.n	407c88 <_fputwc_r+0x2c>
  407c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407c84:	81a3      	strh	r3, [r4, #12]
  407c86:	6662      	str	r2, [r4, #100]	; 0x64
  407c88:	4628      	mov	r0, r5
  407c8a:	4622      	mov	r2, r4
  407c8c:	f7ff ff96 	bl	407bbc <__fputwc>
  407c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407c92:	07da      	lsls	r2, r3, #31
  407c94:	4605      	mov	r5, r0
  407c96:	d402      	bmi.n	407c9e <_fputwc_r+0x42>
  407c98:	89a3      	ldrh	r3, [r4, #12]
  407c9a:	059b      	lsls	r3, r3, #22
  407c9c:	d502      	bpl.n	407ca4 <_fputwc_r+0x48>
  407c9e:	4628      	mov	r0, r5
  407ca0:	b003      	add	sp, #12
  407ca2:	bd30      	pop	{r4, r5, pc}
  407ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407ca6:	f7ff f80f 	bl	406cc8 <__retarget_lock_release_recursive>
  407caa:	4628      	mov	r0, r5
  407cac:	b003      	add	sp, #12
  407cae:	bd30      	pop	{r4, r5, pc}
  407cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407cb2:	9101      	str	r1, [sp, #4]
  407cb4:	f7ff f806 	bl	406cc4 <__retarget_lock_acquire_recursive>
  407cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407cbc:	9901      	ldr	r1, [sp, #4]
  407cbe:	b29a      	uxth	r2, r3
  407cc0:	e7d9      	b.n	407c76 <_fputwc_r+0x1a>
  407cc2:	bf00      	nop

00407cc4 <_fstat_r>:
  407cc4:	b538      	push	{r3, r4, r5, lr}
  407cc6:	460b      	mov	r3, r1
  407cc8:	4c07      	ldr	r4, [pc, #28]	; (407ce8 <_fstat_r+0x24>)
  407cca:	4605      	mov	r5, r0
  407ccc:	4611      	mov	r1, r2
  407cce:	4618      	mov	r0, r3
  407cd0:	2300      	movs	r3, #0
  407cd2:	6023      	str	r3, [r4, #0]
  407cd4:	f7f9 f847 	bl	400d66 <_fstat>
  407cd8:	1c43      	adds	r3, r0, #1
  407cda:	d000      	beq.n	407cde <_fstat_r+0x1a>
  407cdc:	bd38      	pop	{r3, r4, r5, pc}
  407cde:	6823      	ldr	r3, [r4, #0]
  407ce0:	2b00      	cmp	r3, #0
  407ce2:	d0fb      	beq.n	407cdc <_fstat_r+0x18>
  407ce4:	602b      	str	r3, [r5, #0]
  407ce6:	bd38      	pop	{r3, r4, r5, pc}
  407ce8:	20400c38 	.word	0x20400c38

00407cec <_isatty_r>:
  407cec:	b538      	push	{r3, r4, r5, lr}
  407cee:	4c07      	ldr	r4, [pc, #28]	; (407d0c <_isatty_r+0x20>)
  407cf0:	2300      	movs	r3, #0
  407cf2:	4605      	mov	r5, r0
  407cf4:	4608      	mov	r0, r1
  407cf6:	6023      	str	r3, [r4, #0]
  407cf8:	f7f9 f83a 	bl	400d70 <_isatty>
  407cfc:	1c43      	adds	r3, r0, #1
  407cfe:	d000      	beq.n	407d02 <_isatty_r+0x16>
  407d00:	bd38      	pop	{r3, r4, r5, pc}
  407d02:	6823      	ldr	r3, [r4, #0]
  407d04:	2b00      	cmp	r3, #0
  407d06:	d0fb      	beq.n	407d00 <_isatty_r+0x14>
  407d08:	602b      	str	r3, [r5, #0]
  407d0a:	bd38      	pop	{r3, r4, r5, pc}
  407d0c:	20400c38 	.word	0x20400c38

00407d10 <__locale_mb_cur_max>:
  407d10:	4b04      	ldr	r3, [pc, #16]	; (407d24 <__locale_mb_cur_max+0x14>)
  407d12:	4a05      	ldr	r2, [pc, #20]	; (407d28 <__locale_mb_cur_max+0x18>)
  407d14:	681b      	ldr	r3, [r3, #0]
  407d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407d18:	2b00      	cmp	r3, #0
  407d1a:	bf08      	it	eq
  407d1c:	4613      	moveq	r3, r2
  407d1e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407d22:	4770      	bx	lr
  407d24:	2040000c 	.word	0x2040000c
  407d28:	2040084c 	.word	0x2040084c

00407d2c <_lseek_r>:
  407d2c:	b570      	push	{r4, r5, r6, lr}
  407d2e:	460d      	mov	r5, r1
  407d30:	4c08      	ldr	r4, [pc, #32]	; (407d54 <_lseek_r+0x28>)
  407d32:	4611      	mov	r1, r2
  407d34:	4606      	mov	r6, r0
  407d36:	461a      	mov	r2, r3
  407d38:	4628      	mov	r0, r5
  407d3a:	2300      	movs	r3, #0
  407d3c:	6023      	str	r3, [r4, #0]
  407d3e:	f7f9 f819 	bl	400d74 <_lseek>
  407d42:	1c43      	adds	r3, r0, #1
  407d44:	d000      	beq.n	407d48 <_lseek_r+0x1c>
  407d46:	bd70      	pop	{r4, r5, r6, pc}
  407d48:	6823      	ldr	r3, [r4, #0]
  407d4a:	2b00      	cmp	r3, #0
  407d4c:	d0fb      	beq.n	407d46 <_lseek_r+0x1a>
  407d4e:	6033      	str	r3, [r6, #0]
  407d50:	bd70      	pop	{r4, r5, r6, pc}
  407d52:	bf00      	nop
  407d54:	20400c38 	.word	0x20400c38

00407d58 <__ascii_mbtowc>:
  407d58:	b082      	sub	sp, #8
  407d5a:	b149      	cbz	r1, 407d70 <__ascii_mbtowc+0x18>
  407d5c:	b15a      	cbz	r2, 407d76 <__ascii_mbtowc+0x1e>
  407d5e:	b16b      	cbz	r3, 407d7c <__ascii_mbtowc+0x24>
  407d60:	7813      	ldrb	r3, [r2, #0]
  407d62:	600b      	str	r3, [r1, #0]
  407d64:	7812      	ldrb	r2, [r2, #0]
  407d66:	1c10      	adds	r0, r2, #0
  407d68:	bf18      	it	ne
  407d6a:	2001      	movne	r0, #1
  407d6c:	b002      	add	sp, #8
  407d6e:	4770      	bx	lr
  407d70:	a901      	add	r1, sp, #4
  407d72:	2a00      	cmp	r2, #0
  407d74:	d1f3      	bne.n	407d5e <__ascii_mbtowc+0x6>
  407d76:	4610      	mov	r0, r2
  407d78:	b002      	add	sp, #8
  407d7a:	4770      	bx	lr
  407d7c:	f06f 0001 	mvn.w	r0, #1
  407d80:	e7f4      	b.n	407d6c <__ascii_mbtowc+0x14>
  407d82:	bf00      	nop

00407d84 <_read_r>:
  407d84:	b570      	push	{r4, r5, r6, lr}
  407d86:	460d      	mov	r5, r1
  407d88:	4c08      	ldr	r4, [pc, #32]	; (407dac <_read_r+0x28>)
  407d8a:	4611      	mov	r1, r2
  407d8c:	4606      	mov	r6, r0
  407d8e:	461a      	mov	r2, r3
  407d90:	4628      	mov	r0, r5
  407d92:	2300      	movs	r3, #0
  407d94:	6023      	str	r3, [r4, #0]
  407d96:	f7f8 fa55 	bl	400244 <_read>
  407d9a:	1c43      	adds	r3, r0, #1
  407d9c:	d000      	beq.n	407da0 <_read_r+0x1c>
  407d9e:	bd70      	pop	{r4, r5, r6, pc}
  407da0:	6823      	ldr	r3, [r4, #0]
  407da2:	2b00      	cmp	r3, #0
  407da4:	d0fb      	beq.n	407d9e <_read_r+0x1a>
  407da6:	6033      	str	r3, [r6, #0]
  407da8:	bd70      	pop	{r4, r5, r6, pc}
  407daa:	bf00      	nop
  407dac:	20400c38 	.word	0x20400c38

00407db0 <__swbuf_r>:
  407db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407db2:	460d      	mov	r5, r1
  407db4:	4614      	mov	r4, r2
  407db6:	4606      	mov	r6, r0
  407db8:	b110      	cbz	r0, 407dc0 <__swbuf_r+0x10>
  407dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407dbc:	2b00      	cmp	r3, #0
  407dbe:	d04b      	beq.n	407e58 <__swbuf_r+0xa8>
  407dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407dc4:	69a3      	ldr	r3, [r4, #24]
  407dc6:	60a3      	str	r3, [r4, #8]
  407dc8:	b291      	uxth	r1, r2
  407dca:	0708      	lsls	r0, r1, #28
  407dcc:	d539      	bpl.n	407e42 <__swbuf_r+0x92>
  407dce:	6923      	ldr	r3, [r4, #16]
  407dd0:	2b00      	cmp	r3, #0
  407dd2:	d036      	beq.n	407e42 <__swbuf_r+0x92>
  407dd4:	b2ed      	uxtb	r5, r5
  407dd6:	0489      	lsls	r1, r1, #18
  407dd8:	462f      	mov	r7, r5
  407dda:	d515      	bpl.n	407e08 <__swbuf_r+0x58>
  407ddc:	6822      	ldr	r2, [r4, #0]
  407dde:	6961      	ldr	r1, [r4, #20]
  407de0:	1ad3      	subs	r3, r2, r3
  407de2:	428b      	cmp	r3, r1
  407de4:	da1c      	bge.n	407e20 <__swbuf_r+0x70>
  407de6:	3301      	adds	r3, #1
  407de8:	68a1      	ldr	r1, [r4, #8]
  407dea:	1c50      	adds	r0, r2, #1
  407dec:	3901      	subs	r1, #1
  407dee:	60a1      	str	r1, [r4, #8]
  407df0:	6020      	str	r0, [r4, #0]
  407df2:	7015      	strb	r5, [r2, #0]
  407df4:	6962      	ldr	r2, [r4, #20]
  407df6:	429a      	cmp	r2, r3
  407df8:	d01a      	beq.n	407e30 <__swbuf_r+0x80>
  407dfa:	89a3      	ldrh	r3, [r4, #12]
  407dfc:	07db      	lsls	r3, r3, #31
  407dfe:	d501      	bpl.n	407e04 <__swbuf_r+0x54>
  407e00:	2d0a      	cmp	r5, #10
  407e02:	d015      	beq.n	407e30 <__swbuf_r+0x80>
  407e04:	4638      	mov	r0, r7
  407e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e08:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407e0e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407e12:	81a2      	strh	r2, [r4, #12]
  407e14:	6822      	ldr	r2, [r4, #0]
  407e16:	6661      	str	r1, [r4, #100]	; 0x64
  407e18:	6961      	ldr	r1, [r4, #20]
  407e1a:	1ad3      	subs	r3, r2, r3
  407e1c:	428b      	cmp	r3, r1
  407e1e:	dbe2      	blt.n	407de6 <__swbuf_r+0x36>
  407e20:	4621      	mov	r1, r4
  407e22:	4630      	mov	r0, r6
  407e24:	f7fe fbba 	bl	40659c <_fflush_r>
  407e28:	b940      	cbnz	r0, 407e3c <__swbuf_r+0x8c>
  407e2a:	6822      	ldr	r2, [r4, #0]
  407e2c:	2301      	movs	r3, #1
  407e2e:	e7db      	b.n	407de8 <__swbuf_r+0x38>
  407e30:	4621      	mov	r1, r4
  407e32:	4630      	mov	r0, r6
  407e34:	f7fe fbb2 	bl	40659c <_fflush_r>
  407e38:	2800      	cmp	r0, #0
  407e3a:	d0e3      	beq.n	407e04 <__swbuf_r+0x54>
  407e3c:	f04f 37ff 	mov.w	r7, #4294967295
  407e40:	e7e0      	b.n	407e04 <__swbuf_r+0x54>
  407e42:	4621      	mov	r1, r4
  407e44:	4630      	mov	r0, r6
  407e46:	f7fd fad7 	bl	4053f8 <__swsetup_r>
  407e4a:	2800      	cmp	r0, #0
  407e4c:	d1f6      	bne.n	407e3c <__swbuf_r+0x8c>
  407e4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407e52:	6923      	ldr	r3, [r4, #16]
  407e54:	b291      	uxth	r1, r2
  407e56:	e7bd      	b.n	407dd4 <__swbuf_r+0x24>
  407e58:	f7fe fbf8 	bl	40664c <__sinit>
  407e5c:	e7b0      	b.n	407dc0 <__swbuf_r+0x10>
  407e5e:	bf00      	nop

00407e60 <_wcrtomb_r>:
  407e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  407e62:	4606      	mov	r6, r0
  407e64:	b085      	sub	sp, #20
  407e66:	461f      	mov	r7, r3
  407e68:	b189      	cbz	r1, 407e8e <_wcrtomb_r+0x2e>
  407e6a:	4c10      	ldr	r4, [pc, #64]	; (407eac <_wcrtomb_r+0x4c>)
  407e6c:	4d10      	ldr	r5, [pc, #64]	; (407eb0 <_wcrtomb_r+0x50>)
  407e6e:	6824      	ldr	r4, [r4, #0]
  407e70:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407e72:	2c00      	cmp	r4, #0
  407e74:	bf08      	it	eq
  407e76:	462c      	moveq	r4, r5
  407e78:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407e7c:	47a0      	blx	r4
  407e7e:	1c43      	adds	r3, r0, #1
  407e80:	d103      	bne.n	407e8a <_wcrtomb_r+0x2a>
  407e82:	2200      	movs	r2, #0
  407e84:	238a      	movs	r3, #138	; 0x8a
  407e86:	603a      	str	r2, [r7, #0]
  407e88:	6033      	str	r3, [r6, #0]
  407e8a:	b005      	add	sp, #20
  407e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e8e:	460c      	mov	r4, r1
  407e90:	4906      	ldr	r1, [pc, #24]	; (407eac <_wcrtomb_r+0x4c>)
  407e92:	4a07      	ldr	r2, [pc, #28]	; (407eb0 <_wcrtomb_r+0x50>)
  407e94:	6809      	ldr	r1, [r1, #0]
  407e96:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407e98:	2900      	cmp	r1, #0
  407e9a:	bf08      	it	eq
  407e9c:	4611      	moveq	r1, r2
  407e9e:	4622      	mov	r2, r4
  407ea0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407ea4:	a901      	add	r1, sp, #4
  407ea6:	47a0      	blx	r4
  407ea8:	e7e9      	b.n	407e7e <_wcrtomb_r+0x1e>
  407eaa:	bf00      	nop
  407eac:	2040000c 	.word	0x2040000c
  407eb0:	2040084c 	.word	0x2040084c

00407eb4 <__ascii_wctomb>:
  407eb4:	b121      	cbz	r1, 407ec0 <__ascii_wctomb+0xc>
  407eb6:	2aff      	cmp	r2, #255	; 0xff
  407eb8:	d804      	bhi.n	407ec4 <__ascii_wctomb+0x10>
  407eba:	700a      	strb	r2, [r1, #0]
  407ebc:	2001      	movs	r0, #1
  407ebe:	4770      	bx	lr
  407ec0:	4608      	mov	r0, r1
  407ec2:	4770      	bx	lr
  407ec4:	238a      	movs	r3, #138	; 0x8a
  407ec6:	6003      	str	r3, [r0, #0]
  407ec8:	f04f 30ff 	mov.w	r0, #4294967295
  407ecc:	4770      	bx	lr
  407ece:	bf00      	nop

00407ed0 <__aeabi_dmul>:
  407ed0:	b570      	push	{r4, r5, r6, lr}
  407ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407ede:	bf1d      	ittte	ne
  407ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ee4:	ea94 0f0c 	teqne	r4, ip
  407ee8:	ea95 0f0c 	teqne	r5, ip
  407eec:	f000 f8de 	bleq	4080ac <__aeabi_dmul+0x1dc>
  407ef0:	442c      	add	r4, r5
  407ef2:	ea81 0603 	eor.w	r6, r1, r3
  407ef6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407efa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407efe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407f02:	bf18      	it	ne
  407f04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407f10:	d038      	beq.n	407f84 <__aeabi_dmul+0xb4>
  407f12:	fba0 ce02 	umull	ip, lr, r0, r2
  407f16:	f04f 0500 	mov.w	r5, #0
  407f1a:	fbe1 e502 	umlal	lr, r5, r1, r2
  407f1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407f22:	fbe0 e503 	umlal	lr, r5, r0, r3
  407f26:	f04f 0600 	mov.w	r6, #0
  407f2a:	fbe1 5603 	umlal	r5, r6, r1, r3
  407f2e:	f09c 0f00 	teq	ip, #0
  407f32:	bf18      	it	ne
  407f34:	f04e 0e01 	orrne.w	lr, lr, #1
  407f38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407f3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407f40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407f44:	d204      	bcs.n	407f50 <__aeabi_dmul+0x80>
  407f46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407f4a:	416d      	adcs	r5, r5
  407f4c:	eb46 0606 	adc.w	r6, r6, r6
  407f50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407f54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407f58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407f5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407f60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407f64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407f68:	bf88      	it	hi
  407f6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407f6e:	d81e      	bhi.n	407fae <__aeabi_dmul+0xde>
  407f70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407f74:	bf08      	it	eq
  407f76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407f7a:	f150 0000 	adcs.w	r0, r0, #0
  407f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407f82:	bd70      	pop	{r4, r5, r6, pc}
  407f84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407f88:	ea46 0101 	orr.w	r1, r6, r1
  407f8c:	ea40 0002 	orr.w	r0, r0, r2
  407f90:	ea81 0103 	eor.w	r1, r1, r3
  407f94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407f98:	bfc2      	ittt	gt
  407f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  407f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407fa2:	bd70      	popgt	{r4, r5, r6, pc}
  407fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407fa8:	f04f 0e00 	mov.w	lr, #0
  407fac:	3c01      	subs	r4, #1
  407fae:	f300 80ab 	bgt.w	408108 <__aeabi_dmul+0x238>
  407fb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407fb6:	bfde      	ittt	le
  407fb8:	2000      	movle	r0, #0
  407fba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407fbe:	bd70      	pople	{r4, r5, r6, pc}
  407fc0:	f1c4 0400 	rsb	r4, r4, #0
  407fc4:	3c20      	subs	r4, #32
  407fc6:	da35      	bge.n	408034 <__aeabi_dmul+0x164>
  407fc8:	340c      	adds	r4, #12
  407fca:	dc1b      	bgt.n	408004 <__aeabi_dmul+0x134>
  407fcc:	f104 0414 	add.w	r4, r4, #20
  407fd0:	f1c4 0520 	rsb	r5, r4, #32
  407fd4:	fa00 f305 	lsl.w	r3, r0, r5
  407fd8:	fa20 f004 	lsr.w	r0, r0, r4
  407fdc:	fa01 f205 	lsl.w	r2, r1, r5
  407fe0:	ea40 0002 	orr.w	r0, r0, r2
  407fe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407ff0:	fa21 f604 	lsr.w	r6, r1, r4
  407ff4:	eb42 0106 	adc.w	r1, r2, r6
  407ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ffc:	bf08      	it	eq
  407ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408002:	bd70      	pop	{r4, r5, r6, pc}
  408004:	f1c4 040c 	rsb	r4, r4, #12
  408008:	f1c4 0520 	rsb	r5, r4, #32
  40800c:	fa00 f304 	lsl.w	r3, r0, r4
  408010:	fa20 f005 	lsr.w	r0, r0, r5
  408014:	fa01 f204 	lsl.w	r2, r1, r4
  408018:	ea40 0002 	orr.w	r0, r0, r2
  40801c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408024:	f141 0100 	adc.w	r1, r1, #0
  408028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40802c:	bf08      	it	eq
  40802e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408032:	bd70      	pop	{r4, r5, r6, pc}
  408034:	f1c4 0520 	rsb	r5, r4, #32
  408038:	fa00 f205 	lsl.w	r2, r0, r5
  40803c:	ea4e 0e02 	orr.w	lr, lr, r2
  408040:	fa20 f304 	lsr.w	r3, r0, r4
  408044:	fa01 f205 	lsl.w	r2, r1, r5
  408048:	ea43 0302 	orr.w	r3, r3, r2
  40804c:	fa21 f004 	lsr.w	r0, r1, r4
  408050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408054:	fa21 f204 	lsr.w	r2, r1, r4
  408058:	ea20 0002 	bic.w	r0, r0, r2
  40805c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408064:	bf08      	it	eq
  408066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40806a:	bd70      	pop	{r4, r5, r6, pc}
  40806c:	f094 0f00 	teq	r4, #0
  408070:	d10f      	bne.n	408092 <__aeabi_dmul+0x1c2>
  408072:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408076:	0040      	lsls	r0, r0, #1
  408078:	eb41 0101 	adc.w	r1, r1, r1
  40807c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408080:	bf08      	it	eq
  408082:	3c01      	subeq	r4, #1
  408084:	d0f7      	beq.n	408076 <__aeabi_dmul+0x1a6>
  408086:	ea41 0106 	orr.w	r1, r1, r6
  40808a:	f095 0f00 	teq	r5, #0
  40808e:	bf18      	it	ne
  408090:	4770      	bxne	lr
  408092:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408096:	0052      	lsls	r2, r2, #1
  408098:	eb43 0303 	adc.w	r3, r3, r3
  40809c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4080a0:	bf08      	it	eq
  4080a2:	3d01      	subeq	r5, #1
  4080a4:	d0f7      	beq.n	408096 <__aeabi_dmul+0x1c6>
  4080a6:	ea43 0306 	orr.w	r3, r3, r6
  4080aa:	4770      	bx	lr
  4080ac:	ea94 0f0c 	teq	r4, ip
  4080b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4080b4:	bf18      	it	ne
  4080b6:	ea95 0f0c 	teqne	r5, ip
  4080ba:	d00c      	beq.n	4080d6 <__aeabi_dmul+0x206>
  4080bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4080c0:	bf18      	it	ne
  4080c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4080c6:	d1d1      	bne.n	40806c <__aeabi_dmul+0x19c>
  4080c8:	ea81 0103 	eor.w	r1, r1, r3
  4080cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4080d0:	f04f 0000 	mov.w	r0, #0
  4080d4:	bd70      	pop	{r4, r5, r6, pc}
  4080d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4080da:	bf06      	itte	eq
  4080dc:	4610      	moveq	r0, r2
  4080de:	4619      	moveq	r1, r3
  4080e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4080e4:	d019      	beq.n	40811a <__aeabi_dmul+0x24a>
  4080e6:	ea94 0f0c 	teq	r4, ip
  4080ea:	d102      	bne.n	4080f2 <__aeabi_dmul+0x222>
  4080ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4080f0:	d113      	bne.n	40811a <__aeabi_dmul+0x24a>
  4080f2:	ea95 0f0c 	teq	r5, ip
  4080f6:	d105      	bne.n	408104 <__aeabi_dmul+0x234>
  4080f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4080fc:	bf1c      	itt	ne
  4080fe:	4610      	movne	r0, r2
  408100:	4619      	movne	r1, r3
  408102:	d10a      	bne.n	40811a <__aeabi_dmul+0x24a>
  408104:	ea81 0103 	eor.w	r1, r1, r3
  408108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40810c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408114:	f04f 0000 	mov.w	r0, #0
  408118:	bd70      	pop	{r4, r5, r6, pc}
  40811a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40811e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408122:	bd70      	pop	{r4, r5, r6, pc}

00408124 <__aeabi_ddiv>:
  408124:	b570      	push	{r4, r5, r6, lr}
  408126:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40812a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40812e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408132:	bf1d      	ittte	ne
  408134:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408138:	ea94 0f0c 	teqne	r4, ip
  40813c:	ea95 0f0c 	teqne	r5, ip
  408140:	f000 f8a7 	bleq	408292 <__aeabi_ddiv+0x16e>
  408144:	eba4 0405 	sub.w	r4, r4, r5
  408148:	ea81 0e03 	eor.w	lr, r1, r3
  40814c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408150:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408154:	f000 8088 	beq.w	408268 <__aeabi_ddiv+0x144>
  408158:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40815c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408160:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408164:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408168:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40816c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408170:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408174:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408178:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40817c:	429d      	cmp	r5, r3
  40817e:	bf08      	it	eq
  408180:	4296      	cmpeq	r6, r2
  408182:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408186:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40818a:	d202      	bcs.n	408192 <__aeabi_ddiv+0x6e>
  40818c:	085b      	lsrs	r3, r3, #1
  40818e:	ea4f 0232 	mov.w	r2, r2, rrx
  408192:	1ab6      	subs	r6, r6, r2
  408194:	eb65 0503 	sbc.w	r5, r5, r3
  408198:	085b      	lsrs	r3, r3, #1
  40819a:	ea4f 0232 	mov.w	r2, r2, rrx
  40819e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4081a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4081a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4081aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081ae:	bf22      	ittt	cs
  4081b0:	1ab6      	subcs	r6, r6, r2
  4081b2:	4675      	movcs	r5, lr
  4081b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4081b8:	085b      	lsrs	r3, r3, #1
  4081ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4081be:	ebb6 0e02 	subs.w	lr, r6, r2
  4081c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081c6:	bf22      	ittt	cs
  4081c8:	1ab6      	subcs	r6, r6, r2
  4081ca:	4675      	movcs	r5, lr
  4081cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4081d0:	085b      	lsrs	r3, r3, #1
  4081d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4081d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4081da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081de:	bf22      	ittt	cs
  4081e0:	1ab6      	subcs	r6, r6, r2
  4081e2:	4675      	movcs	r5, lr
  4081e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4081e8:	085b      	lsrs	r3, r3, #1
  4081ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4081ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4081f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4081f6:	bf22      	ittt	cs
  4081f8:	1ab6      	subcs	r6, r6, r2
  4081fa:	4675      	movcs	r5, lr
  4081fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408200:	ea55 0e06 	orrs.w	lr, r5, r6
  408204:	d018      	beq.n	408238 <__aeabi_ddiv+0x114>
  408206:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40820a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40820e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408212:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408216:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40821a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40821e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408222:	d1c0      	bne.n	4081a6 <__aeabi_ddiv+0x82>
  408224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408228:	d10b      	bne.n	408242 <__aeabi_ddiv+0x11e>
  40822a:	ea41 0100 	orr.w	r1, r1, r0
  40822e:	f04f 0000 	mov.w	r0, #0
  408232:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408236:	e7b6      	b.n	4081a6 <__aeabi_ddiv+0x82>
  408238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40823c:	bf04      	itt	eq
  40823e:	4301      	orreq	r1, r0
  408240:	2000      	moveq	r0, #0
  408242:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408246:	bf88      	it	hi
  408248:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40824c:	f63f aeaf 	bhi.w	407fae <__aeabi_dmul+0xde>
  408250:	ebb5 0c03 	subs.w	ip, r5, r3
  408254:	bf04      	itt	eq
  408256:	ebb6 0c02 	subseq.w	ip, r6, r2
  40825a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40825e:	f150 0000 	adcs.w	r0, r0, #0
  408262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408266:	bd70      	pop	{r4, r5, r6, pc}
  408268:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40826c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408270:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408274:	bfc2      	ittt	gt
  408276:	ebd4 050c 	rsbsgt	r5, r4, ip
  40827a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40827e:	bd70      	popgt	{r4, r5, r6, pc}
  408280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408284:	f04f 0e00 	mov.w	lr, #0
  408288:	3c01      	subs	r4, #1
  40828a:	e690      	b.n	407fae <__aeabi_dmul+0xde>
  40828c:	ea45 0e06 	orr.w	lr, r5, r6
  408290:	e68d      	b.n	407fae <__aeabi_dmul+0xde>
  408292:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408296:	ea94 0f0c 	teq	r4, ip
  40829a:	bf08      	it	eq
  40829c:	ea95 0f0c 	teqeq	r5, ip
  4082a0:	f43f af3b 	beq.w	40811a <__aeabi_dmul+0x24a>
  4082a4:	ea94 0f0c 	teq	r4, ip
  4082a8:	d10a      	bne.n	4082c0 <__aeabi_ddiv+0x19c>
  4082aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4082ae:	f47f af34 	bne.w	40811a <__aeabi_dmul+0x24a>
  4082b2:	ea95 0f0c 	teq	r5, ip
  4082b6:	f47f af25 	bne.w	408104 <__aeabi_dmul+0x234>
  4082ba:	4610      	mov	r0, r2
  4082bc:	4619      	mov	r1, r3
  4082be:	e72c      	b.n	40811a <__aeabi_dmul+0x24a>
  4082c0:	ea95 0f0c 	teq	r5, ip
  4082c4:	d106      	bne.n	4082d4 <__aeabi_ddiv+0x1b0>
  4082c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4082ca:	f43f aefd 	beq.w	4080c8 <__aeabi_dmul+0x1f8>
  4082ce:	4610      	mov	r0, r2
  4082d0:	4619      	mov	r1, r3
  4082d2:	e722      	b.n	40811a <__aeabi_dmul+0x24a>
  4082d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4082d8:	bf18      	it	ne
  4082da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4082de:	f47f aec5 	bne.w	40806c <__aeabi_dmul+0x19c>
  4082e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4082e6:	f47f af0d 	bne.w	408104 <__aeabi_dmul+0x234>
  4082ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4082ee:	f47f aeeb 	bne.w	4080c8 <__aeabi_dmul+0x1f8>
  4082f2:	e712      	b.n	40811a <__aeabi_dmul+0x24a>

004082f4 <__gedf2>:
  4082f4:	f04f 3cff 	mov.w	ip, #4294967295
  4082f8:	e006      	b.n	408308 <__cmpdf2+0x4>
  4082fa:	bf00      	nop

004082fc <__ledf2>:
  4082fc:	f04f 0c01 	mov.w	ip, #1
  408300:	e002      	b.n	408308 <__cmpdf2+0x4>
  408302:	bf00      	nop

00408304 <__cmpdf2>:
  408304:	f04f 0c01 	mov.w	ip, #1
  408308:	f84d cd04 	str.w	ip, [sp, #-4]!
  40830c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408318:	bf18      	it	ne
  40831a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40831e:	d01b      	beq.n	408358 <__cmpdf2+0x54>
  408320:	b001      	add	sp, #4
  408322:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408326:	bf0c      	ite	eq
  408328:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40832c:	ea91 0f03 	teqne	r1, r3
  408330:	bf02      	ittt	eq
  408332:	ea90 0f02 	teqeq	r0, r2
  408336:	2000      	moveq	r0, #0
  408338:	4770      	bxeq	lr
  40833a:	f110 0f00 	cmn.w	r0, #0
  40833e:	ea91 0f03 	teq	r1, r3
  408342:	bf58      	it	pl
  408344:	4299      	cmppl	r1, r3
  408346:	bf08      	it	eq
  408348:	4290      	cmpeq	r0, r2
  40834a:	bf2c      	ite	cs
  40834c:	17d8      	asrcs	r0, r3, #31
  40834e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408352:	f040 0001 	orr.w	r0, r0, #1
  408356:	4770      	bx	lr
  408358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40835c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408360:	d102      	bne.n	408368 <__cmpdf2+0x64>
  408362:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408366:	d107      	bne.n	408378 <__cmpdf2+0x74>
  408368:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40836c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408370:	d1d6      	bne.n	408320 <__cmpdf2+0x1c>
  408372:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408376:	d0d3      	beq.n	408320 <__cmpdf2+0x1c>
  408378:	f85d 0b04 	ldr.w	r0, [sp], #4
  40837c:	4770      	bx	lr
  40837e:	bf00      	nop

00408380 <__aeabi_cdrcmple>:
  408380:	4684      	mov	ip, r0
  408382:	4610      	mov	r0, r2
  408384:	4662      	mov	r2, ip
  408386:	468c      	mov	ip, r1
  408388:	4619      	mov	r1, r3
  40838a:	4663      	mov	r3, ip
  40838c:	e000      	b.n	408390 <__aeabi_cdcmpeq>
  40838e:	bf00      	nop

00408390 <__aeabi_cdcmpeq>:
  408390:	b501      	push	{r0, lr}
  408392:	f7ff ffb7 	bl	408304 <__cmpdf2>
  408396:	2800      	cmp	r0, #0
  408398:	bf48      	it	mi
  40839a:	f110 0f00 	cmnmi.w	r0, #0
  40839e:	bd01      	pop	{r0, pc}

004083a0 <__aeabi_dcmpeq>:
  4083a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083a4:	f7ff fff4 	bl	408390 <__aeabi_cdcmpeq>
  4083a8:	bf0c      	ite	eq
  4083aa:	2001      	moveq	r0, #1
  4083ac:	2000      	movne	r0, #0
  4083ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4083b2:	bf00      	nop

004083b4 <__aeabi_dcmplt>:
  4083b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083b8:	f7ff ffea 	bl	408390 <__aeabi_cdcmpeq>
  4083bc:	bf34      	ite	cc
  4083be:	2001      	movcc	r0, #1
  4083c0:	2000      	movcs	r0, #0
  4083c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4083c6:	bf00      	nop

004083c8 <__aeabi_dcmple>:
  4083c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083cc:	f7ff ffe0 	bl	408390 <__aeabi_cdcmpeq>
  4083d0:	bf94      	ite	ls
  4083d2:	2001      	movls	r0, #1
  4083d4:	2000      	movhi	r0, #0
  4083d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4083da:	bf00      	nop

004083dc <__aeabi_dcmpge>:
  4083dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083e0:	f7ff ffce 	bl	408380 <__aeabi_cdrcmple>
  4083e4:	bf94      	ite	ls
  4083e6:	2001      	movls	r0, #1
  4083e8:	2000      	movhi	r0, #0
  4083ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4083ee:	bf00      	nop

004083f0 <__aeabi_dcmpgt>:
  4083f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4083f4:	f7ff ffc4 	bl	408380 <__aeabi_cdrcmple>
  4083f8:	bf34      	ite	cc
  4083fa:	2001      	movcc	r0, #1
  4083fc:	2000      	movcs	r0, #0
  4083fe:	f85d fb08 	ldr.w	pc, [sp], #8
  408402:	bf00      	nop

00408404 <__aeabi_dcmpun>:
  408404:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40840c:	d102      	bne.n	408414 <__aeabi_dcmpun+0x10>
  40840e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408412:	d10a      	bne.n	40842a <__aeabi_dcmpun+0x26>
  408414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40841c:	d102      	bne.n	408424 <__aeabi_dcmpun+0x20>
  40841e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408422:	d102      	bne.n	40842a <__aeabi_dcmpun+0x26>
  408424:	f04f 0000 	mov.w	r0, #0
  408428:	4770      	bx	lr
  40842a:	f04f 0001 	mov.w	r0, #1
  40842e:	4770      	bx	lr

00408430 <__aeabi_d2iz>:
  408430:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408434:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408438:	d215      	bcs.n	408466 <__aeabi_d2iz+0x36>
  40843a:	d511      	bpl.n	408460 <__aeabi_d2iz+0x30>
  40843c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408440:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408444:	d912      	bls.n	40846c <__aeabi_d2iz+0x3c>
  408446:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40844a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40844e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408452:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408456:	fa23 f002 	lsr.w	r0, r3, r2
  40845a:	bf18      	it	ne
  40845c:	4240      	negne	r0, r0
  40845e:	4770      	bx	lr
  408460:	f04f 0000 	mov.w	r0, #0
  408464:	4770      	bx	lr
  408466:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40846a:	d105      	bne.n	408478 <__aeabi_d2iz+0x48>
  40846c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408470:	bf08      	it	eq
  408472:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408476:	4770      	bx	lr
  408478:	f04f 0000 	mov.w	r0, #0
  40847c:	4770      	bx	lr
  40847e:	bf00      	nop

00408480 <__aeabi_uldivmod>:
  408480:	b953      	cbnz	r3, 408498 <__aeabi_uldivmod+0x18>
  408482:	b94a      	cbnz	r2, 408498 <__aeabi_uldivmod+0x18>
  408484:	2900      	cmp	r1, #0
  408486:	bf08      	it	eq
  408488:	2800      	cmpeq	r0, #0
  40848a:	bf1c      	itt	ne
  40848c:	f04f 31ff 	movne.w	r1, #4294967295
  408490:	f04f 30ff 	movne.w	r0, #4294967295
  408494:	f000 b97a 	b.w	40878c <__aeabi_idiv0>
  408498:	f1ad 0c08 	sub.w	ip, sp, #8
  40849c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4084a0:	f000 f806 	bl	4084b0 <__udivmoddi4>
  4084a4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4084a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4084ac:	b004      	add	sp, #16
  4084ae:	4770      	bx	lr

004084b0 <__udivmoddi4>:
  4084b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4084b4:	468c      	mov	ip, r1
  4084b6:	460d      	mov	r5, r1
  4084b8:	4604      	mov	r4, r0
  4084ba:	9e08      	ldr	r6, [sp, #32]
  4084bc:	2b00      	cmp	r3, #0
  4084be:	d151      	bne.n	408564 <__udivmoddi4+0xb4>
  4084c0:	428a      	cmp	r2, r1
  4084c2:	4617      	mov	r7, r2
  4084c4:	d96d      	bls.n	4085a2 <__udivmoddi4+0xf2>
  4084c6:	fab2 fe82 	clz	lr, r2
  4084ca:	f1be 0f00 	cmp.w	lr, #0
  4084ce:	d00b      	beq.n	4084e8 <__udivmoddi4+0x38>
  4084d0:	f1ce 0c20 	rsb	ip, lr, #32
  4084d4:	fa01 f50e 	lsl.w	r5, r1, lr
  4084d8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4084dc:	fa02 f70e 	lsl.w	r7, r2, lr
  4084e0:	ea4c 0c05 	orr.w	ip, ip, r5
  4084e4:	fa00 f40e 	lsl.w	r4, r0, lr
  4084e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4084ec:	0c25      	lsrs	r5, r4, #16
  4084ee:	fbbc f8fa 	udiv	r8, ip, sl
  4084f2:	fa1f f987 	uxth.w	r9, r7
  4084f6:	fb0a cc18 	mls	ip, sl, r8, ip
  4084fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4084fe:	fb08 f309 	mul.w	r3, r8, r9
  408502:	42ab      	cmp	r3, r5
  408504:	d90a      	bls.n	40851c <__udivmoddi4+0x6c>
  408506:	19ed      	adds	r5, r5, r7
  408508:	f108 32ff 	add.w	r2, r8, #4294967295
  40850c:	f080 8123 	bcs.w	408756 <__udivmoddi4+0x2a6>
  408510:	42ab      	cmp	r3, r5
  408512:	f240 8120 	bls.w	408756 <__udivmoddi4+0x2a6>
  408516:	f1a8 0802 	sub.w	r8, r8, #2
  40851a:	443d      	add	r5, r7
  40851c:	1aed      	subs	r5, r5, r3
  40851e:	b2a4      	uxth	r4, r4
  408520:	fbb5 f0fa 	udiv	r0, r5, sl
  408524:	fb0a 5510 	mls	r5, sl, r0, r5
  408528:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40852c:	fb00 f909 	mul.w	r9, r0, r9
  408530:	45a1      	cmp	r9, r4
  408532:	d909      	bls.n	408548 <__udivmoddi4+0x98>
  408534:	19e4      	adds	r4, r4, r7
  408536:	f100 33ff 	add.w	r3, r0, #4294967295
  40853a:	f080 810a 	bcs.w	408752 <__udivmoddi4+0x2a2>
  40853e:	45a1      	cmp	r9, r4
  408540:	f240 8107 	bls.w	408752 <__udivmoddi4+0x2a2>
  408544:	3802      	subs	r0, #2
  408546:	443c      	add	r4, r7
  408548:	eba4 0409 	sub.w	r4, r4, r9
  40854c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408550:	2100      	movs	r1, #0
  408552:	2e00      	cmp	r6, #0
  408554:	d061      	beq.n	40861a <__udivmoddi4+0x16a>
  408556:	fa24 f40e 	lsr.w	r4, r4, lr
  40855a:	2300      	movs	r3, #0
  40855c:	6034      	str	r4, [r6, #0]
  40855e:	6073      	str	r3, [r6, #4]
  408560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408564:	428b      	cmp	r3, r1
  408566:	d907      	bls.n	408578 <__udivmoddi4+0xc8>
  408568:	2e00      	cmp	r6, #0
  40856a:	d054      	beq.n	408616 <__udivmoddi4+0x166>
  40856c:	2100      	movs	r1, #0
  40856e:	e886 0021 	stmia.w	r6, {r0, r5}
  408572:	4608      	mov	r0, r1
  408574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408578:	fab3 f183 	clz	r1, r3
  40857c:	2900      	cmp	r1, #0
  40857e:	f040 808e 	bne.w	40869e <__udivmoddi4+0x1ee>
  408582:	42ab      	cmp	r3, r5
  408584:	d302      	bcc.n	40858c <__udivmoddi4+0xdc>
  408586:	4282      	cmp	r2, r0
  408588:	f200 80fa 	bhi.w	408780 <__udivmoddi4+0x2d0>
  40858c:	1a84      	subs	r4, r0, r2
  40858e:	eb65 0503 	sbc.w	r5, r5, r3
  408592:	2001      	movs	r0, #1
  408594:	46ac      	mov	ip, r5
  408596:	2e00      	cmp	r6, #0
  408598:	d03f      	beq.n	40861a <__udivmoddi4+0x16a>
  40859a:	e886 1010 	stmia.w	r6, {r4, ip}
  40859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085a2:	b912      	cbnz	r2, 4085aa <__udivmoddi4+0xfa>
  4085a4:	2701      	movs	r7, #1
  4085a6:	fbb7 f7f2 	udiv	r7, r7, r2
  4085aa:	fab7 fe87 	clz	lr, r7
  4085ae:	f1be 0f00 	cmp.w	lr, #0
  4085b2:	d134      	bne.n	40861e <__udivmoddi4+0x16e>
  4085b4:	1beb      	subs	r3, r5, r7
  4085b6:	0c3a      	lsrs	r2, r7, #16
  4085b8:	fa1f fc87 	uxth.w	ip, r7
  4085bc:	2101      	movs	r1, #1
  4085be:	fbb3 f8f2 	udiv	r8, r3, r2
  4085c2:	0c25      	lsrs	r5, r4, #16
  4085c4:	fb02 3318 	mls	r3, r2, r8, r3
  4085c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4085cc:	fb0c f308 	mul.w	r3, ip, r8
  4085d0:	42ab      	cmp	r3, r5
  4085d2:	d907      	bls.n	4085e4 <__udivmoddi4+0x134>
  4085d4:	19ed      	adds	r5, r5, r7
  4085d6:	f108 30ff 	add.w	r0, r8, #4294967295
  4085da:	d202      	bcs.n	4085e2 <__udivmoddi4+0x132>
  4085dc:	42ab      	cmp	r3, r5
  4085de:	f200 80d1 	bhi.w	408784 <__udivmoddi4+0x2d4>
  4085e2:	4680      	mov	r8, r0
  4085e4:	1aed      	subs	r5, r5, r3
  4085e6:	b2a3      	uxth	r3, r4
  4085e8:	fbb5 f0f2 	udiv	r0, r5, r2
  4085ec:	fb02 5510 	mls	r5, r2, r0, r5
  4085f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4085f4:	fb0c fc00 	mul.w	ip, ip, r0
  4085f8:	45a4      	cmp	ip, r4
  4085fa:	d907      	bls.n	40860c <__udivmoddi4+0x15c>
  4085fc:	19e4      	adds	r4, r4, r7
  4085fe:	f100 33ff 	add.w	r3, r0, #4294967295
  408602:	d202      	bcs.n	40860a <__udivmoddi4+0x15a>
  408604:	45a4      	cmp	ip, r4
  408606:	f200 80b8 	bhi.w	40877a <__udivmoddi4+0x2ca>
  40860a:	4618      	mov	r0, r3
  40860c:	eba4 040c 	sub.w	r4, r4, ip
  408610:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408614:	e79d      	b.n	408552 <__udivmoddi4+0xa2>
  408616:	4631      	mov	r1, r6
  408618:	4630      	mov	r0, r6
  40861a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40861e:	f1ce 0420 	rsb	r4, lr, #32
  408622:	fa05 f30e 	lsl.w	r3, r5, lr
  408626:	fa07 f70e 	lsl.w	r7, r7, lr
  40862a:	fa20 f804 	lsr.w	r8, r0, r4
  40862e:	0c3a      	lsrs	r2, r7, #16
  408630:	fa25 f404 	lsr.w	r4, r5, r4
  408634:	ea48 0803 	orr.w	r8, r8, r3
  408638:	fbb4 f1f2 	udiv	r1, r4, r2
  40863c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408640:	fb02 4411 	mls	r4, r2, r1, r4
  408644:	fa1f fc87 	uxth.w	ip, r7
  408648:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40864c:	fb01 f30c 	mul.w	r3, r1, ip
  408650:	42ab      	cmp	r3, r5
  408652:	fa00 f40e 	lsl.w	r4, r0, lr
  408656:	d909      	bls.n	40866c <__udivmoddi4+0x1bc>
  408658:	19ed      	adds	r5, r5, r7
  40865a:	f101 30ff 	add.w	r0, r1, #4294967295
  40865e:	f080 808a 	bcs.w	408776 <__udivmoddi4+0x2c6>
  408662:	42ab      	cmp	r3, r5
  408664:	f240 8087 	bls.w	408776 <__udivmoddi4+0x2c6>
  408668:	3902      	subs	r1, #2
  40866a:	443d      	add	r5, r7
  40866c:	1aeb      	subs	r3, r5, r3
  40866e:	fa1f f588 	uxth.w	r5, r8
  408672:	fbb3 f0f2 	udiv	r0, r3, r2
  408676:	fb02 3310 	mls	r3, r2, r0, r3
  40867a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40867e:	fb00 f30c 	mul.w	r3, r0, ip
  408682:	42ab      	cmp	r3, r5
  408684:	d907      	bls.n	408696 <__udivmoddi4+0x1e6>
  408686:	19ed      	adds	r5, r5, r7
  408688:	f100 38ff 	add.w	r8, r0, #4294967295
  40868c:	d26f      	bcs.n	40876e <__udivmoddi4+0x2be>
  40868e:	42ab      	cmp	r3, r5
  408690:	d96d      	bls.n	40876e <__udivmoddi4+0x2be>
  408692:	3802      	subs	r0, #2
  408694:	443d      	add	r5, r7
  408696:	1aeb      	subs	r3, r5, r3
  408698:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40869c:	e78f      	b.n	4085be <__udivmoddi4+0x10e>
  40869e:	f1c1 0720 	rsb	r7, r1, #32
  4086a2:	fa22 f807 	lsr.w	r8, r2, r7
  4086a6:	408b      	lsls	r3, r1
  4086a8:	fa05 f401 	lsl.w	r4, r5, r1
  4086ac:	ea48 0303 	orr.w	r3, r8, r3
  4086b0:	fa20 fe07 	lsr.w	lr, r0, r7
  4086b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4086b8:	40fd      	lsrs	r5, r7
  4086ba:	ea4e 0e04 	orr.w	lr, lr, r4
  4086be:	fbb5 f9fc 	udiv	r9, r5, ip
  4086c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4086c6:	fb0c 5519 	mls	r5, ip, r9, r5
  4086ca:	fa1f f883 	uxth.w	r8, r3
  4086ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4086d2:	fb09 f408 	mul.w	r4, r9, r8
  4086d6:	42ac      	cmp	r4, r5
  4086d8:	fa02 f201 	lsl.w	r2, r2, r1
  4086dc:	fa00 fa01 	lsl.w	sl, r0, r1
  4086e0:	d908      	bls.n	4086f4 <__udivmoddi4+0x244>
  4086e2:	18ed      	adds	r5, r5, r3
  4086e4:	f109 30ff 	add.w	r0, r9, #4294967295
  4086e8:	d243      	bcs.n	408772 <__udivmoddi4+0x2c2>
  4086ea:	42ac      	cmp	r4, r5
  4086ec:	d941      	bls.n	408772 <__udivmoddi4+0x2c2>
  4086ee:	f1a9 0902 	sub.w	r9, r9, #2
  4086f2:	441d      	add	r5, r3
  4086f4:	1b2d      	subs	r5, r5, r4
  4086f6:	fa1f fe8e 	uxth.w	lr, lr
  4086fa:	fbb5 f0fc 	udiv	r0, r5, ip
  4086fe:	fb0c 5510 	mls	r5, ip, r0, r5
  408702:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408706:	fb00 f808 	mul.w	r8, r0, r8
  40870a:	45a0      	cmp	r8, r4
  40870c:	d907      	bls.n	40871e <__udivmoddi4+0x26e>
  40870e:	18e4      	adds	r4, r4, r3
  408710:	f100 35ff 	add.w	r5, r0, #4294967295
  408714:	d229      	bcs.n	40876a <__udivmoddi4+0x2ba>
  408716:	45a0      	cmp	r8, r4
  408718:	d927      	bls.n	40876a <__udivmoddi4+0x2ba>
  40871a:	3802      	subs	r0, #2
  40871c:	441c      	add	r4, r3
  40871e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408722:	eba4 0408 	sub.w	r4, r4, r8
  408726:	fba0 8902 	umull	r8, r9, r0, r2
  40872a:	454c      	cmp	r4, r9
  40872c:	46c6      	mov	lr, r8
  40872e:	464d      	mov	r5, r9
  408730:	d315      	bcc.n	40875e <__udivmoddi4+0x2ae>
  408732:	d012      	beq.n	40875a <__udivmoddi4+0x2aa>
  408734:	b156      	cbz	r6, 40874c <__udivmoddi4+0x29c>
  408736:	ebba 030e 	subs.w	r3, sl, lr
  40873a:	eb64 0405 	sbc.w	r4, r4, r5
  40873e:	fa04 f707 	lsl.w	r7, r4, r7
  408742:	40cb      	lsrs	r3, r1
  408744:	431f      	orrs	r7, r3
  408746:	40cc      	lsrs	r4, r1
  408748:	6037      	str	r7, [r6, #0]
  40874a:	6074      	str	r4, [r6, #4]
  40874c:	2100      	movs	r1, #0
  40874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408752:	4618      	mov	r0, r3
  408754:	e6f8      	b.n	408548 <__udivmoddi4+0x98>
  408756:	4690      	mov	r8, r2
  408758:	e6e0      	b.n	40851c <__udivmoddi4+0x6c>
  40875a:	45c2      	cmp	sl, r8
  40875c:	d2ea      	bcs.n	408734 <__udivmoddi4+0x284>
  40875e:	ebb8 0e02 	subs.w	lr, r8, r2
  408762:	eb69 0503 	sbc.w	r5, r9, r3
  408766:	3801      	subs	r0, #1
  408768:	e7e4      	b.n	408734 <__udivmoddi4+0x284>
  40876a:	4628      	mov	r0, r5
  40876c:	e7d7      	b.n	40871e <__udivmoddi4+0x26e>
  40876e:	4640      	mov	r0, r8
  408770:	e791      	b.n	408696 <__udivmoddi4+0x1e6>
  408772:	4681      	mov	r9, r0
  408774:	e7be      	b.n	4086f4 <__udivmoddi4+0x244>
  408776:	4601      	mov	r1, r0
  408778:	e778      	b.n	40866c <__udivmoddi4+0x1bc>
  40877a:	3802      	subs	r0, #2
  40877c:	443c      	add	r4, r7
  40877e:	e745      	b.n	40860c <__udivmoddi4+0x15c>
  408780:	4608      	mov	r0, r1
  408782:	e708      	b.n	408596 <__udivmoddi4+0xe6>
  408784:	f1a8 0802 	sub.w	r8, r8, #2
  408788:	443d      	add	r5, r7
  40878a:	e72b      	b.n	4085e4 <__udivmoddi4+0x134>

0040878c <__aeabi_idiv0>:
  40878c:	4770      	bx	lr
  40878e:	bf00      	nop
  408790:	454c4449 	.word	0x454c4449
  408794:	00000000 	.word	0x00000000
  408798:	51726d54 	.word	0x51726d54
  40879c:	00000000 	.word	0x00000000
  4087a0:	20726d54 	.word	0x20726d54
  4087a4:	00637653 	.word	0x00637653
  4087a8:	46202d2d 	.word	0x46202d2d
  4087ac:	72656572 	.word	0x72656572
  4087b0:	20736f74 	.word	0x20736f74
  4087b4:	6d617845 	.word	0x6d617845
  4087b8:	20656c70 	.word	0x20656c70
  4087bc:	0d0a2d2d 	.word	0x0d0a2d2d
  4087c0:	00000000 	.word	0x00000000
  4087c4:	454d4153 	.word	0x454d4153
  4087c8:	582d3037 	.word	0x582d3037
  4087cc:	00444c50 	.word	0x00444c50
  4087d0:	25202d2d 	.word	0x25202d2d
  4087d4:	000d0a73 	.word	0x000d0a73
  4087d8:	353a3332 	.word	0x353a3332
  4087dc:	38333a32 	.word	0x38333a32
  4087e0:	00000000 	.word	0x00000000
  4087e4:	2074634f 	.word	0x2074634f
  4087e8:	32203432 	.word	0x32203432
  4087ec:	00333230 	.word	0x00333230
  4087f0:	43202d2d 	.word	0x43202d2d
  4087f4:	69706d6f 	.word	0x69706d6f
  4087f8:	3a64656c 	.word	0x3a64656c
  4087fc:	20732520 	.word	0x20732520
  408800:	2d207325 	.word	0x2d207325
  408804:	000d0a2d 	.word	0x000d0a2d
  408808:	0064654c 	.word	0x0064654c
  40880c:	6c696146 	.word	0x6c696146
  408810:	74206465 	.word	0x74206465
  408814:	7263206f 	.word	0x7263206f
  408818:	65746165 	.word	0x65746165
  40881c:	73657420 	.word	0x73657420
  408820:	656c2074 	.word	0x656c2074
  408824:	61742064 	.word	0x61742064
  408828:	000d6b73 	.word	0x000d6b73
  40882c:	00756d49 	.word	0x00756d49
  408830:	6c696146 	.word	0x6c696146
  408834:	74206465 	.word	0x74206465
  408838:	7263206f 	.word	0x7263206f
  40883c:	65746165 	.word	0x65746165
  408840:	73657420 	.word	0x73657420
  408844:	6d692074 	.word	0x6d692074
  408848:	61742075 	.word	0x61742075
  40884c:	000d6b73 	.word	0x000d6b73
  408850:	5252455b 	.word	0x5252455b
  408854:	5b205d4f 	.word	0x5b205d4f
  408858:	5d633269 	.word	0x5d633269
  40885c:	72705b20 	.word	0x72705b20
  408860:	5d65626f 	.word	0x5d65626f
  408864:	00000020 	.word	0x00000020
  408868:	4441445b 	.word	0x4441445b
  40886c:	5b205d4f 	.word	0x5b205d4f
  408870:	5d633269 	.word	0x5d633269
  408874:	6f727020 	.word	0x6f727020
  408878:	4f206562 	.word	0x4f206562
  40887c:	0000004b 	.word	0x0000004b
  408880:	5252455b 	.word	0x5252455b
  408884:	5b205d4f 	.word	0x5b205d4f
  408888:	5d633269 	.word	0x5d633269
  40888c:	65725b20 	.word	0x65725b20
  408890:	205d6461 	.word	0x205d6461
  408894:	00000000 	.word	0x00000000
  408898:	4355535b 	.word	0x4355535b
  40889c:	4f535345 	.word	0x4f535345
  4088a0:	6156205d 	.word	0x6156205d
  4088a4:	20726f6c 	.word	0x20726f6c
  4088a8:	6f64696c 	.word	0x6f64696c
  4088ac:	20a9c320 	.word	0x20a9c320
  4088b0:	72726f63 	.word	0x72726f63
  4088b4:	3a6f7465 	.word	0x3a6f7465
  4088b8:	0a782520 	.word	0x0a782520
  4088bc:	00000000 	.word	0x00000000
  4088c0:	5252455b 	.word	0x5252455b
  4088c4:	56205d4f 	.word	0x56205d4f
  4088c8:	726f6c61 	.word	0x726f6c61
  4088cc:	64696c20 	.word	0x64696c20
  4088d0:	a9c3206f 	.word	0xa9c3206f
  4088d4:	636e6920 	.word	0x636e6920
  4088d8:	6572726f 	.word	0x6572726f
  4088dc:	203a6f74 	.word	0x203a6f74
  4088e0:	000a7825 	.word	0x000a7825
  4088e4:	5252455b 	.word	0x5252455b
  4088e8:	5b205d4f 	.word	0x5b205d4f
  4088ec:	5d633269 	.word	0x5d633269
  4088f0:	72775b20 	.word	0x72775b20
  4088f4:	5d657469 	.word	0x5d657469
  4088f8:	00000020 	.word	0x00000020
  4088fc:	6c656341 	.word	0x6c656341
  408900:	63617265 	.word	0x63617265
  408904:	203a6f61 	.word	0x203a6f61
  408908:	203d2058 	.word	0x203d2058
  40890c:	66322e25 	.word	0x66322e25
  408910:	2059202c 	.word	0x2059202c
  408914:	2e25203d 	.word	0x2e25203d
  408918:	202c6632 	.word	0x202c6632
  40891c:	203d205a 	.word	0x203d205a
  408920:	66322e25 	.word	0x66322e25
  408924:	0000000a 	.word	0x0000000a
  408928:	6f726947 	.word	0x6f726947
  40892c:	706f6373 	.word	0x706f6373
  408930:	203a6f69 	.word	0x203a6f69
  408934:	203d2058 	.word	0x203d2058
  408938:	66322e25 	.word	0x66322e25
  40893c:	2059202c 	.word	0x2059202c
  408940:	2e25203d 	.word	0x2e25203d
  408944:	202c6632 	.word	0x202c6632
  408948:	203d205a 	.word	0x203d205a
  40894c:	66322e25 	.word	0x66322e25
  408950:	0000000a 	.word	0x0000000a
  408954:	63617473 	.word	0x63617473
  408958:	766f206b 	.word	0x766f206b
  40895c:	6c667265 	.word	0x6c667265
  408960:	2520776f 	.word	0x2520776f
  408964:	73252078 	.word	0x73252078
  408968:	00000a0d 	.word	0x00000a0d

0040896c <_global_impure_ptr>:
  40896c:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40897c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40898c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40899c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4089ac:	0000296c 00000030                       l)..0...

004089b4 <blanks.7238>:
  4089b4:	20202020 20202020 20202020 20202020                     

004089c4 <zeroes.7239>:
  4089c4:	30303030 30303030 30303030 30303030     0000000000000000
  4089d4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4089e4:	00000000                                ....

004089e8 <__mprec_bigtens>:
  4089e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4089f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408a08:	7f73bf3c 75154fdd                       <.s..O.u

00408a10 <__mprec_tens>:
  408a10:	00000000 3ff00000 00000000 40240000     .......?......$@
  408a20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408a30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408a40:	00000000 412e8480 00000000 416312d0     .......A......cA
  408a50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408a60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408a70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408a80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408a90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408aa0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408ab0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408ac0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408ad0:	79d99db4 44ea7843                       ...yCx.D

00408ad8 <p05.6055>:
  408ad8:	00000005 00000019 0000007d 00000043     ........}...C...
  408ae8:	49534f50 00000058 0000002e              POSIX.......

00408af4 <_ctype_>:
  408af4:	20202000 20202020 28282020 20282828     .         ((((( 
  408b04:	20202020 20202020 20202020 20202020                     
  408b14:	10108820 10101010 10101010 10101010      ...............
  408b24:	04040410 04040404 10040404 10101010     ................
  408b34:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408b44:	01010101 01010101 01010101 10101010     ................
  408b54:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408b64:	02020202 02020202 02020202 10101010     ................
  408b74:	00000020 00000000 00000000 00000000      ...............
	...

00408bf8 <_init>:
  408bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408bfa:	bf00      	nop
  408bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408bfe:	bc08      	pop	{r3}
  408c00:	469e      	mov	lr, r3
  408c02:	4770      	bx	lr

00408c04 <__init_array_start>:
  408c04:	004054c1 	.word	0x004054c1

00408c08 <__frame_dummy_init_array_entry>:
  408c08:	0040018d                                ..@.

00408c0c <_fini>:
  408c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c0e:	bf00      	nop
  408c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408c12:	bc08      	pop	{r3}
  408c14:	469e      	mov	lr, r3
  408c16:	4770      	bx	lr

00408c18 <__fini_array_start>:
  408c18:	00400169 	.word	0x00400169
